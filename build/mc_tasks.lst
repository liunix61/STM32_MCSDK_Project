ARM GAS  /tmp/ccxOD3Ta.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"mc_tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.FOC_Clear,"ax",%progbits
  18              		.align	1
  19              		.weak	FOC_Clear
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	FOC_Clear:
  27              	.LVL0:
  28              	.LFB1627:
  29              		.file 1 "Src/mc_tasks.c"
   1:Src/mc_tasks.c **** 
   2:Src/mc_tasks.c **** /**
   3:Src/mc_tasks.c ****   ******************************************************************************
   4:Src/mc_tasks.c ****   * @file    mc_tasks.c
   5:Src/mc_tasks.c ****   * @author  Motor Control SDK Team, ST Microelectronics
   6:Src/mc_tasks.c ****   * @brief   This file implements tasks definition
   7:Src/mc_tasks.c ****   *
   8:Src/mc_tasks.c ****   ******************************************************************************
   9:Src/mc_tasks.c ****   * @attention
  10:Src/mc_tasks.c ****   *
  11:Src/mc_tasks.c ****   * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  12:Src/mc_tasks.c ****   * All rights reserved.</center></h2>
  13:Src/mc_tasks.c ****   *
  14:Src/mc_tasks.c ****   * This software component is licensed by ST under Ultimate Liberty license
  15:Src/mc_tasks.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  16:Src/mc_tasks.c ****   * the License. You may obtain a copy of the License at:
  17:Src/mc_tasks.c ****   *                             www.st.com/SLA0044
  18:Src/mc_tasks.c ****   *
  19:Src/mc_tasks.c ****   ******************************************************************************
  20:Src/mc_tasks.c ****   */
  21:Src/mc_tasks.c **** 
  22:Src/mc_tasks.c **** /* Includes ------------------------------------------------------------------*/
  23:Src/mc_tasks.c **** //cstat -MISRAC2012-Rule-21.1
  24:Src/mc_tasks.c **** #include "main.h"
  25:Src/mc_tasks.c **** //cstat +MISRAC2012-Rule-21.1
  26:Src/mc_tasks.c **** #include "mc_type.h"
  27:Src/mc_tasks.c **** #include "mc_math.h"
  28:Src/mc_tasks.c **** #include "motorcontrol.h"
  29:Src/mc_tasks.c **** #include "regular_conversion_manager.h"
ARM GAS  /tmp/ccxOD3Ta.s 			page 2


  30:Src/mc_tasks.c **** #include "mc_interface.h"
  31:Src/mc_tasks.c **** #include "digital_output.h"
  32:Src/mc_tasks.c **** #include "pwm_common.h"
  33:Src/mc_tasks.c **** 
  34:Src/mc_tasks.c **** #include "mc_tasks.h"
  35:Src/mc_tasks.c **** #include "parameters_conversion.h"
  36:Src/mc_tasks.c **** #include "mcp_config.h"
  37:Src/mc_tasks.c **** 
  38:Src/mc_tasks.c **** /* USER CODE BEGIN Includes */
  39:Src/mc_tasks.c **** 
  40:Src/mc_tasks.c **** /* USER CODE END Includes */
  41:Src/mc_tasks.c **** 
  42:Src/mc_tasks.c **** /* USER CODE BEGIN Private define */
  43:Src/mc_tasks.c **** 
  44:Src/mc_tasks.c **** /* Private define ------------------------------------------------------------*/
  45:Src/mc_tasks.c **** /* Un-Comment this macro define in order to activate the smooth
  46:Src/mc_tasks.c ****    braking action on over voltage */
  47:Src/mc_tasks.c **** /* #define  MC.SMOOTH_BRAKING_ACTION_ON_OVERVOLTAGE */
  48:Src/mc_tasks.c **** 
  49:Src/mc_tasks.c ****   #define CHARGE_BOOT_CAP_MS  ((uint16_t)10)
  50:Src/mc_tasks.c ****   #define CHARGE_BOOT_CAP_MS2 ((uint16_t)10)
  51:Src/mc_tasks.c ****   #define STOPPERMANENCY_MS   ((uint16_t)400)
  52:Src/mc_tasks.c ****   #define STOPPERMANENCY_MS2  ((uint16_t)400)
  53:Src/mc_tasks.c ****   #define CHARGE_BOOT_CAP_TICKS  (uint16_t)((SYS_TICK_FREQUENCY * CHARGE_BOOT_CAP_MS) / ((uint16_t)
  54:Src/mc_tasks.c ****   #define CHARGE_BOOT_CAP_TICKS2 (uint16_t)((SYS_TICK_FREQUENCY * CHARGE_BOOT_CAP_MS2)/ ((uint16_t)
  55:Src/mc_tasks.c ****   #define STOPPERMANENCY_TICKS   (uint16_t)((SYS_TICK_FREQUENCY * STOPPERMANENCY_MS)  / ((uint16_t)
  56:Src/mc_tasks.c ****   #define STOPPERMANENCY_TICKS2  (uint16_t)((SYS_TICK_FREQUENCY * STOPPERMANENCY_MS2) / ((uint16_t)
  57:Src/mc_tasks.c **** 
  58:Src/mc_tasks.c **** /* USER CODE END Private define */
  59:Src/mc_tasks.c **** #define VBUS_TEMP_ERR_MASK (MC_OVER_VOLT| MC_UNDER_VOLT| MC_OVER_TEMP)
  60:Src/mc_tasks.c **** /* Private variables----------------------------------------------------------*/
  61:Src/mc_tasks.c **** 
  62:Src/mc_tasks.c **** static FOCVars_t FOCVars[NBR_OF_MOTORS];
  63:Src/mc_tasks.c **** 
  64:Src/mc_tasks.c **** static PWMC_Handle_t *pwmcHandle[NBR_OF_MOTORS];
  65:Src/mc_tasks.c **** static CircleLimitation_Handle_t *pCLM[NBR_OF_MOTORS];
  66:Src/mc_tasks.c **** //cstat !MISRAC2012-Rule-8.9_a
  67:Src/mc_tasks.c **** static RampExtMngr_Handle_t *pREMNG[NBR_OF_MOTORS];   /*!< Ramp manager used to modify the Iq ref
  68:Src/mc_tasks.c ****                                                     during the start-up switch over.*/
  69:Src/mc_tasks.c **** 
  70:Src/mc_tasks.c **** static uint16_t hMFTaskCounterM1 = 0; //cstat !MISRAC2012-Rule-8.9_a
  71:Src/mc_tasks.c **** static volatile uint16_t hBootCapDelayCounterM1 = ((uint16_t)0);
  72:Src/mc_tasks.c **** static volatile uint16_t hStopPermanencyCounterM1 = ((uint16_t)0);
  73:Src/mc_tasks.c **** 
  74:Src/mc_tasks.c **** static volatile uint8_t bMCBootCompleted = ((uint8_t)0);
  75:Src/mc_tasks.c **** 
  76:Src/mc_tasks.c **** /* USER CODE BEGIN Private Variables */
  77:Src/mc_tasks.c **** 
  78:Src/mc_tasks.c **** /* USER CODE END Private Variables */
  79:Src/mc_tasks.c **** 
  80:Src/mc_tasks.c **** /* Private functions ---------------------------------------------------------*/
  81:Src/mc_tasks.c **** void TSK_MediumFrequencyTaskM1(void);
  82:Src/mc_tasks.c **** void FOC_Clear(uint8_t bMotor);
  83:Src/mc_tasks.c **** void FOC_InitAdditionalMethods(uint8_t bMotor);
  84:Src/mc_tasks.c **** void FOC_CalcCurrRef(uint8_t bMotor);
  85:Src/mc_tasks.c **** void TSK_MF_StopProcessing(  MCI_Handle_t * pHandle, uint8_t motor);
  86:Src/mc_tasks.c **** MCI_Handle_t * GetMCI(uint8_t bMotor);
ARM GAS  /tmp/ccxOD3Ta.s 			page 3


  87:Src/mc_tasks.c **** static uint16_t FOC_CurrControllerM1(void);
  88:Src/mc_tasks.c **** void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount);
  89:Src/mc_tasks.c **** bool TSK_ChargeBootCapDelayHasElapsedM1(void);
  90:Src/mc_tasks.c **** void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount);
  91:Src/mc_tasks.c **** bool TSK_StopPermanencyTimeHasElapsedM1(void);
  92:Src/mc_tasks.c **** void TSK_SafetyTask_PWMOFF(uint8_t motor);
  93:Src/mc_tasks.c **** 
  94:Src/mc_tasks.c **** /* USER CODE BEGIN Private Functions */
  95:Src/mc_tasks.c **** 
  96:Src/mc_tasks.c **** /* USER CODE END Private Functions */
  97:Src/mc_tasks.c **** /**
  98:Src/mc_tasks.c ****   * @brief  It initializes the whole MC core according to user defined
  99:Src/mc_tasks.c ****   *         parameters.
 100:Src/mc_tasks.c ****   * @param  pMCIList pointer to the vector of MCInterface objects that will be
 101:Src/mc_tasks.c ****   *         created and initialized. The vector must have length equal to the
 102:Src/mc_tasks.c ****   *         number of motor drives.
 103:Src/mc_tasks.c ****   * @retval None
 104:Src/mc_tasks.c ****   */
 105:Src/mc_tasks.c **** __weak void MCboot( MCI_Handle_t* pMCIList[NBR_OF_MOTORS] )
 106:Src/mc_tasks.c **** {
 107:Src/mc_tasks.c ****   /* USER CODE BEGIN MCboot 0 */
 108:Src/mc_tasks.c **** 
 109:Src/mc_tasks.c ****   /* USER CODE END MCboot 0 */
 110:Src/mc_tasks.c **** 
 111:Src/mc_tasks.c ****   if (MC_NULL == pMCIList)
 112:Src/mc_tasks.c ****   {
 113:Src/mc_tasks.c ****     /* Nothing to do */
 114:Src/mc_tasks.c ****   }
 115:Src/mc_tasks.c ****   else
 116:Src/mc_tasks.c ****   {
 117:Src/mc_tasks.c **** 
 118:Src/mc_tasks.c ****     bMCBootCompleted = (uint8_t )0;
 119:Src/mc_tasks.c ****     pCLM[M1] = &CircleLimitationM1;
 120:Src/mc_tasks.c **** 
 121:Src/mc_tasks.c ****     /**********************************************************/
 122:Src/mc_tasks.c ****     /*    PWM and current sensing component initialization    */
 123:Src/mc_tasks.c ****     /**********************************************************/
 124:Src/mc_tasks.c ****     pwmcHandle[M1] = &PWM_Handle_M1._Super;
 125:Src/mc_tasks.c ****     R3_2_Init(&PWM_Handle_M1);
 126:Src/mc_tasks.c ****     ASPEP_start(&aspepOverUartA);
 127:Src/mc_tasks.c **** 
 128:Src/mc_tasks.c ****     /* USER CODE BEGIN MCboot 1 */
 129:Src/mc_tasks.c **** 
 130:Src/mc_tasks.c ****     /* USER CODE END MCboot 1 */
 131:Src/mc_tasks.c ****     /**************************************/
 132:Src/mc_tasks.c ****     /*    Start timers synchronously      */
 133:Src/mc_tasks.c ****     /**************************************/
 134:Src/mc_tasks.c ****     startTimers();
 135:Src/mc_tasks.c **** 
 136:Src/mc_tasks.c ****     /******************************************************/
 137:Src/mc_tasks.c ****     /*   PID component initialization: speed regulation   */
 138:Src/mc_tasks.c ****     /******************************************************/
 139:Src/mc_tasks.c ****     PID_HandleInit(&PIDSpeedHandle_M1);
 140:Src/mc_tasks.c **** 
 141:Src/mc_tasks.c ****     /******************************************************/
 142:Src/mc_tasks.c ****     /*   Main speed sensor component initialization       */
 143:Src/mc_tasks.c ****     /******************************************************/
ARM GAS  /tmp/ccxOD3Ta.s 			page 4


 144:Src/mc_tasks.c ****     STO_CR_Init (&STO_CR_M1);
 145:Src/mc_tasks.c **** 
 146:Src/mc_tasks.c ****     /******************************************************/
 147:Src/mc_tasks.c ****     /*   Speed & torque component initialization          */
 148:Src/mc_tasks.c ****     /******************************************************/
 149:Src/mc_tasks.c ****     STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_CR_M1._Super);
 150:Src/mc_tasks.c **** 
 151:Src/mc_tasks.c ****     /******************************************************/
 152:Src/mc_tasks.c ****     /*   Auxiliary speed sensor component initialization  */
 153:Src/mc_tasks.c ****     /******************************************************/
 154:Src/mc_tasks.c ****     STO_PLL_Init (&STO_PLL_M1);
 155:Src/mc_tasks.c **** 
 156:Src/mc_tasks.c ****     /****************************************************/
 157:Src/mc_tasks.c ****     /*   Virtual speed sensor component initialization  */
 158:Src/mc_tasks.c ****     /****************************************************/
 159:Src/mc_tasks.c ****     VSS_Init(&VirtualSpeedSensorM1);
 160:Src/mc_tasks.c **** 
 161:Src/mc_tasks.c ****     /**************************************/
 162:Src/mc_tasks.c ****     /*   Rev-up component initialization  */
 163:Src/mc_tasks.c ****     /**************************************/
 164:Src/mc_tasks.c ****     RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 165:Src/mc_tasks.c **** 
 166:Src/mc_tasks.c ****     /********************************************************/
 167:Src/mc_tasks.c ****     /*   PID component initialization: current regulation   */
 168:Src/mc_tasks.c ****     /********************************************************/
 169:Src/mc_tasks.c ****     PID_HandleInit(&PIDIqHandle_M1);
 170:Src/mc_tasks.c ****     PID_HandleInit(&PIDIdHandle_M1);
 171:Src/mc_tasks.c **** 
 172:Src/mc_tasks.c ****     /********************************************************/
 173:Src/mc_tasks.c ****     /*   Bus voltage sensor component initialization        */
 174:Src/mc_tasks.c ****     /********************************************************/
 175:Src/mc_tasks.c ****     RVBS_Init(&BusVoltageSensor_M1);
 176:Src/mc_tasks.c **** 
 177:Src/mc_tasks.c ****     /*************************************************/
 178:Src/mc_tasks.c ****     /*   Power measurement component initialization  */
 179:Src/mc_tasks.c ****     /*************************************************/
 180:Src/mc_tasks.c ****     pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 181:Src/mc_tasks.c ****     pMPM[M1]->pFOCVars = &FOCVars[M1];
 182:Src/mc_tasks.c **** 
 183:Src/mc_tasks.c ****     /*******************************************************/
 184:Src/mc_tasks.c ****     /*   Temperature measurement component initialization  */
 185:Src/mc_tasks.c ****     /*******************************************************/
 186:Src/mc_tasks.c ****     NTC_Init(&TempSensor_M1);
 187:Src/mc_tasks.c **** 
 188:Src/mc_tasks.c ****     pREMNG[M1] = &RampExtMngrHFParamsM1;
 189:Src/mc_tasks.c ****     REMNG_Init(pREMNG[M1]);
 190:Src/mc_tasks.c **** 
 191:Src/mc_tasks.c ****     FOC_Clear(M1);
 192:Src/mc_tasks.c ****     FOCVars[M1].bDriveInput = EXTERNAL;
 193:Src/mc_tasks.c ****     FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 194:Src/mc_tasks.c ****     FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 195:Src/mc_tasks.c ****     MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 196:Src/mc_tasks.c ****     MCI_ExecSpeedRamp(&Mci[M1],
 197:Src/mc_tasks.c ****     STC_GetMecSpeedRefUnitDefault(pSTC[M1]),0); /*First command to STC*/
 198:Src/mc_tasks.c ****     pMCIList[M1] = &Mci[M1];
 199:Src/mc_tasks.c **** 
 200:Src/mc_tasks.c ****     /* USER CODE BEGIN MCboot 2 */
ARM GAS  /tmp/ccxOD3Ta.s 			page 5


 201:Src/mc_tasks.c **** 
 202:Src/mc_tasks.c ****     /* USER CODE END MCboot 2 */
 203:Src/mc_tasks.c **** 
 204:Src/mc_tasks.c ****     bMCBootCompleted = 1U;
 205:Src/mc_tasks.c ****   }
 206:Src/mc_tasks.c **** }
 207:Src/mc_tasks.c **** 
 208:Src/mc_tasks.c **** /**
 209:Src/mc_tasks.c ****  * @brief Runs all the Tasks of the Motor Control cockpit
 210:Src/mc_tasks.c ****  *
 211:Src/mc_tasks.c ****  * This function is to be called periodically at least at the Medium Frequency task
 212:Src/mc_tasks.c ****  * rate (It is typically called on the Systick interrupt). Exact invokation rate is
 213:Src/mc_tasks.c ****  * the Speed regulator execution rate set in the Motor Contorl Workbench.
 214:Src/mc_tasks.c ****  *
 215:Src/mc_tasks.c ****  * The following tasks are executed in this order:
 216:Src/mc_tasks.c ****  *
 217:Src/mc_tasks.c ****  * - Medium Frequency Tasks of each motors
 218:Src/mc_tasks.c ****  * - Safety Task
 219:Src/mc_tasks.c ****  * - Power Factor Correction Task (if enabled)
 220:Src/mc_tasks.c ****  * - User Interface task.
 221:Src/mc_tasks.c ****  */
 222:Src/mc_tasks.c **** __weak void MC_RunMotorControlTasks(void)
 223:Src/mc_tasks.c **** {
 224:Src/mc_tasks.c ****   if (0U == bMCBootCompleted)
 225:Src/mc_tasks.c ****   {
 226:Src/mc_tasks.c ****     /* Nothing to do */
 227:Src/mc_tasks.c ****   }
 228:Src/mc_tasks.c ****   else
 229:Src/mc_tasks.c ****   {
 230:Src/mc_tasks.c ****     /* ** Medium Frequency Tasks ** */
 231:Src/mc_tasks.c ****     MC_Scheduler();
 232:Src/mc_tasks.c **** 
 233:Src/mc_tasks.c ****     /* Safety task is run after Medium Frequency task so that
 234:Src/mc_tasks.c ****      * it can overcome actions they initiated if needed. */
 235:Src/mc_tasks.c ****     TSK_SafetyTask();
 236:Src/mc_tasks.c **** 
 237:Src/mc_tasks.c ****   }
 238:Src/mc_tasks.c **** }
 239:Src/mc_tasks.c **** 
 240:Src/mc_tasks.c **** /**
 241:Src/mc_tasks.c ****  * @brief Performs stop process and update the state machine.This function
 242:Src/mc_tasks.c ****  *        shall be called only during medium frequency task
 243:Src/mc_tasks.c ****  */
 244:Src/mc_tasks.c **** void TSK_MF_StopProcessing(  MCI_Handle_t * pHandle, uint8_t motor)
 245:Src/mc_tasks.c **** {
 246:Src/mc_tasks.c ****   R3_2_SwitchOffPWM(pwmcHandle[motor]);
 247:Src/mc_tasks.c **** 
 248:Src/mc_tasks.c ****   FOC_Clear(motor);
 249:Src/mc_tasks.c ****   PQD_Clear(pMPM[motor]);
 250:Src/mc_tasks.c ****   TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 251:Src/mc_tasks.c ****   Mci[motor].State = STOP;
 252:Src/mc_tasks.c ****   return;
 253:Src/mc_tasks.c **** }
 254:Src/mc_tasks.c **** 
 255:Src/mc_tasks.c **** /**
 256:Src/mc_tasks.c ****  * @brief  Executes the Medium Frequency Task functions for each drive instance.
 257:Src/mc_tasks.c ****  *
ARM GAS  /tmp/ccxOD3Ta.s 			page 6


 258:Src/mc_tasks.c ****  * It is to be clocked at the Systick frequency.
 259:Src/mc_tasks.c ****  */
 260:Src/mc_tasks.c **** __weak void MC_Scheduler(void)
 261:Src/mc_tasks.c **** {
 262:Src/mc_tasks.c **** /* USER CODE BEGIN MC_Scheduler 0 */
 263:Src/mc_tasks.c **** 
 264:Src/mc_tasks.c **** /* USER CODE END MC_Scheduler 0 */
 265:Src/mc_tasks.c **** 
 266:Src/mc_tasks.c ****   if (((uint8_t)1) == bMCBootCompleted)
 267:Src/mc_tasks.c ****   {
 268:Src/mc_tasks.c ****     if(hMFTaskCounterM1 > 0u)
 269:Src/mc_tasks.c ****     {
 270:Src/mc_tasks.c ****       hMFTaskCounterM1--;
 271:Src/mc_tasks.c ****     }
 272:Src/mc_tasks.c ****     else
 273:Src/mc_tasks.c ****     {
 274:Src/mc_tasks.c ****       TSK_MediumFrequencyTaskM1();
 275:Src/mc_tasks.c **** 
 276:Src/mc_tasks.c ****       MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTr
 277:Src/mc_tasks.c ****                                                                                 &MCP_Over_UartA.rxL
 278:Src/mc_tasks.c ****       if ( 0U == MCP_Over_UartA.rxBuffer)
 279:Src/mc_tasks.c ****       {
 280:Src/mc_tasks.c ****         /* Nothing to do */
 281:Src/mc_tasks.c ****       }
 282:Src/mc_tasks.c ****       else
 283:Src/mc_tasks.c ****       {
 284:Src/mc_tasks.c ****         /* Synchronous answer */
 285:Src/mc_tasks.c ****         if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 286:Src/mc_tasks.c ****                                                      (void **) &MCP_Over_UartA.txBuffer, //cstat !M
 287:Src/mc_tasks.c ****                                                      MCTL_SYNC))
 288:Src/mc_tasks.c ****         {
 289:Src/mc_tasks.c ****           /* no buffer available to build the answer ... should not occur */
 290:Src/mc_tasks.c ****         }
 291:Src/mc_tasks.c ****         else
 292:Src/mc_tasks.c ****         {
 293:Src/mc_tasks.c ****           MCP_ReceivedPacket(&MCP_Over_UartA);
 294:Src/mc_tasks.c ****           MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_Uart
 295:Src/mc_tasks.c ****                                                       MCP_Over_UartA.txLength, MCTL_SYNC);
 296:Src/mc_tasks.c ****           /* no buffer available to build the answer ... should not occur */
 297:Src/mc_tasks.c ****         }
 298:Src/mc_tasks.c ****       }
 299:Src/mc_tasks.c **** 
 300:Src/mc_tasks.c ****       /* USER CODE BEGIN MC_Scheduler 1 */
 301:Src/mc_tasks.c **** 
 302:Src/mc_tasks.c ****       /* USER CODE END MC_Scheduler 1 */
 303:Src/mc_tasks.c ****       hMFTaskCounterM1 = (uint16_t)MF_TASK_OCCURENCE_TICKS;
 304:Src/mc_tasks.c ****     }
 305:Src/mc_tasks.c ****     if(hBootCapDelayCounterM1 > 0U)
 306:Src/mc_tasks.c ****     {
 307:Src/mc_tasks.c ****       hBootCapDelayCounterM1--;
 308:Src/mc_tasks.c ****     }
 309:Src/mc_tasks.c ****     if(hStopPermanencyCounterM1 > 0U)
 310:Src/mc_tasks.c ****     {
 311:Src/mc_tasks.c ****       hStopPermanencyCounterM1--;
 312:Src/mc_tasks.c ****     }
 313:Src/mc_tasks.c ****   }
 314:Src/mc_tasks.c ****   else
ARM GAS  /tmp/ccxOD3Ta.s 			page 7


 315:Src/mc_tasks.c ****   {
 316:Src/mc_tasks.c ****     /* Nothing to do */
 317:Src/mc_tasks.c ****   }
 318:Src/mc_tasks.c ****   /* USER CODE BEGIN MC_Scheduler 2 */
 319:Src/mc_tasks.c **** 
 320:Src/mc_tasks.c ****   /* USER CODE END MC_Scheduler 2 */
 321:Src/mc_tasks.c **** }
 322:Src/mc_tasks.c **** 
 323:Src/mc_tasks.c **** /**
 324:Src/mc_tasks.c ****   * @brief Executes medium frequency periodic Motor Control tasks
 325:Src/mc_tasks.c ****   *
 326:Src/mc_tasks.c ****   * This function performs some of the control duties on Motor 1 according to the
 327:Src/mc_tasks.c ****   * present state of its state machine. In particular, duties requiring a periodic
 328:Src/mc_tasks.c ****   * execution at a medium frequency rate (such as the speed controller for instance)
 329:Src/mc_tasks.c ****   * are executed here.
 330:Src/mc_tasks.c ****   */
 331:Src/mc_tasks.c **** __weak void TSK_MediumFrequencyTaskM1(void)
 332:Src/mc_tasks.c **** {
 333:Src/mc_tasks.c ****   /* USER CODE BEGIN MediumFrequencyTask M1 0 */
 334:Src/mc_tasks.c **** 
 335:Src/mc_tasks.c ****   /* USER CODE END MediumFrequencyTask M1 0 */
 336:Src/mc_tasks.c **** 
 337:Src/mc_tasks.c ****   int16_t wAux = 0;
 338:Src/mc_tasks.c ****   (void)STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 339:Src/mc_tasks.c ****   bool IsSpeedReliable = STO_CR_CalcAvrgMecSpeedUnit(&STO_CR_M1, &wAux);
 340:Src/mc_tasks.c ****   PQD_CalcElMotorPower(pMPM[M1]);
 341:Src/mc_tasks.c **** 
 342:Src/mc_tasks.c ****   if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 343:Src/mc_tasks.c ****   {
 344:Src/mc_tasks.c ****     if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 345:Src/mc_tasks.c ****     {
 346:Src/mc_tasks.c ****       switch (Mci[M1].State)
 347:Src/mc_tasks.c ****       {
 348:Src/mc_tasks.c ****         case IDLE:
 349:Src/mc_tasks.c ****         {
 350:Src/mc_tasks.c ****           if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand
 351:Src/mc_tasks.c ****           {
 352:Src/mc_tasks.c ****             {
 353:Src/mc_tasks.c ****               RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 354:Src/mc_tasks.c ****             }
 355:Src/mc_tasks.c **** 
 356:Src/mc_tasks.c ****            if (pwmcHandle[M1]->offsetCalibStatus == false)
 357:Src/mc_tasks.c ****            {
 358:Src/mc_tasks.c ****              PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 359:Src/mc_tasks.c ****              Mci[M1].State = OFFSET_CALIB;
 360:Src/mc_tasks.c ****            }
 361:Src/mc_tasks.c ****            else
 362:Src/mc_tasks.c ****            {
 363:Src/mc_tasks.c ****              /* calibration already done. Enables only TIM channels */
 364:Src/mc_tasks.c ****              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 365:Src/mc_tasks.c ****              PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 366:Src/mc_tasks.c ****              R3_2_TurnOnLowSides(pwmcHandle[M1]);
 367:Src/mc_tasks.c ****              TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 368:Src/mc_tasks.c ****              Mci[M1].State = CHARGE_BOOT_CAP;
 369:Src/mc_tasks.c **** 
 370:Src/mc_tasks.c ****            }
 371:Src/mc_tasks.c **** 
ARM GAS  /tmp/ccxOD3Ta.s 			page 8


 372:Src/mc_tasks.c ****           }
 373:Src/mc_tasks.c ****           else
 374:Src/mc_tasks.c ****           {
 375:Src/mc_tasks.c ****             /* nothing to be done, FW stays in IDLE state */
 376:Src/mc_tasks.c ****           }
 377:Src/mc_tasks.c ****           break;
 378:Src/mc_tasks.c ****         }
 379:Src/mc_tasks.c **** 
 380:Src/mc_tasks.c ****         case OFFSET_CALIB:
 381:Src/mc_tasks.c ****           {
 382:Src/mc_tasks.c ****             if (MCI_STOP == Mci[M1].DirectCommand)
 383:Src/mc_tasks.c ****             {
 384:Src/mc_tasks.c ****               TSK_MF_StopProcessing(&Mci[M1], M1);
 385:Src/mc_tasks.c ****             }
 386:Src/mc_tasks.c ****             else
 387:Src/mc_tasks.c ****             {
 388:Src/mc_tasks.c ****               if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 389:Src/mc_tasks.c ****               {
 390:Src/mc_tasks.c ****                 if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 391:Src/mc_tasks.c ****                 {
 392:Src/mc_tasks.c ****                   FOC_Clear(M1);
 393:Src/mc_tasks.c ****                   PQD_Clear(pMPM[M1]);
 394:Src/mc_tasks.c ****                   Mci[M1].DirectCommand = MCI_NO_COMMAND;
 395:Src/mc_tasks.c ****                   Mci[M1].State = IDLE;
 396:Src/mc_tasks.c ****                 }
 397:Src/mc_tasks.c ****                 else
 398:Src/mc_tasks.c ****                 {
 399:Src/mc_tasks.c ****                   R3_2_TurnOnLowSides(pwmcHandle[M1]);
 400:Src/mc_tasks.c ****                   TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 401:Src/mc_tasks.c ****                   Mci[M1].State = CHARGE_BOOT_CAP;
 402:Src/mc_tasks.c **** 
 403:Src/mc_tasks.c ****                 }
 404:Src/mc_tasks.c ****               }
 405:Src/mc_tasks.c ****               else
 406:Src/mc_tasks.c ****               {
 407:Src/mc_tasks.c ****                 /* nothing to be done, FW waits for offset calibration to finish */
 408:Src/mc_tasks.c ****               }
 409:Src/mc_tasks.c ****             }
 410:Src/mc_tasks.c ****             break;
 411:Src/mc_tasks.c ****           }
 412:Src/mc_tasks.c **** 
 413:Src/mc_tasks.c ****         case CHARGE_BOOT_CAP:
 414:Src/mc_tasks.c ****         {
 415:Src/mc_tasks.c ****           if (MCI_STOP == Mci[M1].DirectCommand)
 416:Src/mc_tasks.c ****           {
 417:Src/mc_tasks.c ****             TSK_MF_StopProcessing(&Mci[M1], M1);
 418:Src/mc_tasks.c ****           }
 419:Src/mc_tasks.c ****           else
 420:Src/mc_tasks.c ****           {
 421:Src/mc_tasks.c ****             if (TSK_ChargeBootCapDelayHasElapsedM1())
 422:Src/mc_tasks.c ****             {
 423:Src/mc_tasks.c ****               R3_2_SwitchOffPWM(pwmcHandle[M1]);
 424:Src/mc_tasks.c ****               FOCVars[M1].bDriveInput = EXTERNAL;
 425:Src/mc_tasks.c ****               STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 426:Src/mc_tasks.c ****               STO_CR_Clear(&STO_CR_M1);
 427:Src/mc_tasks.c ****               STO_PLL_Clear(&STO_PLL_M1);
 428:Src/mc_tasks.c ****               FOC_Clear( M1 );
ARM GAS  /tmp/ccxOD3Ta.s 			page 9


 429:Src/mc_tasks.c **** 
 430:Src/mc_tasks.c ****               {
 431:Src/mc_tasks.c **** 
 432:Src/mc_tasks.c ****                 Mci[M1].State = START;
 433:Src/mc_tasks.c ****               }
 434:Src/mc_tasks.c **** 
 435:Src/mc_tasks.c ****               PWMC_SwitchOnPWM(pwmcHandle[M1]);
 436:Src/mc_tasks.c ****             }
 437:Src/mc_tasks.c ****             else
 438:Src/mc_tasks.c ****             {
 439:Src/mc_tasks.c ****               /* nothing to be done, FW waits for bootstrap capacitor to charge */
 440:Src/mc_tasks.c ****             }
 441:Src/mc_tasks.c ****           }
 442:Src/mc_tasks.c ****           break;
 443:Src/mc_tasks.c ****         }
 444:Src/mc_tasks.c **** 
 445:Src/mc_tasks.c ****         case START:
 446:Src/mc_tasks.c ****         {
 447:Src/mc_tasks.c ****           if (MCI_STOP == Mci[M1].DirectCommand)
 448:Src/mc_tasks.c ****           {
 449:Src/mc_tasks.c ****             TSK_MF_StopProcessing(&Mci[M1], M1);
 450:Src/mc_tasks.c ****           }
 451:Src/mc_tasks.c ****           else
 452:Src/mc_tasks.c ****           {
 453:Src/mc_tasks.c ****             /* Mechanical speed as imposed by the Virtual Speed Sensor during the Rev Up phase. */
 454:Src/mc_tasks.c ****             int16_t hForcedMecSpeedUnit;
 455:Src/mc_tasks.c ****             qd_t IqdRef;
 456:Src/mc_tasks.c ****             bool ObserverConverged = false;
 457:Src/mc_tasks.c **** 
 458:Src/mc_tasks.c ****             /* Execute the Rev Up procedure */
 459:Src/mc_tasks.c ****             if(! RUC_Exec(&RevUpControlM1))
 460:Src/mc_tasks.c **** 
 461:Src/mc_tasks.c ****             {
 462:Src/mc_tasks.c ****             /* The time allowed for the startup sequence has expired */
 463:Src/mc_tasks.c ****               MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 464:Src/mc_tasks.c **** 
 465:Src/mc_tasks.c ****            }
 466:Src/mc_tasks.c ****            else
 467:Src/mc_tasks.c ****            {
 468:Src/mc_tasks.c ****              /* Execute the torque open loop current start-up ramp:
 469:Src/mc_tasks.c ****               * Compute the Iq reference current as configured in the Rev Up sequence */
 470:Src/mc_tasks.c ****              IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 471:Src/mc_tasks.c ****              IqdRef.d = FOCVars[M1].UserIdref;
 472:Src/mc_tasks.c ****              /* Iqd reference current used by the High Frequency Loop to generate the PWM output */
 473:Src/mc_tasks.c ****              FOCVars[M1].Iqdref = IqdRef;
 474:Src/mc_tasks.c ****            }
 475:Src/mc_tasks.c **** 
 476:Src/mc_tasks.c ****            (void) VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 477:Src/mc_tasks.c **** 
 478:Src/mc_tasks.c ****            /* check that startup stage where the observer has to be used has been reached */
 479:Src/mc_tasks.c ****            if (true == RUC_FirstAccelerationStageReached(&RevUpControlM1))
 480:Src/mc_tasks.c **** 
 481:Src/mc_tasks.c ****             {
 482:Src/mc_tasks.c ****              ObserverConverged = STO_CR_IsObserverConverged(&STO_CR_M1, hForcedMecSpeedUnit);
 483:Src/mc_tasks.c **** 
 484:Src/mc_tasks.c ****               (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 485:Src/mc_tasks.c ****             }
ARM GAS  /tmp/ccxOD3Ta.s 			page 10


 486:Src/mc_tasks.c **** 
 487:Src/mc_tasks.c ****             if (ObserverConverged)
 488:Src/mc_tasks.c ****             {
 489:Src/mc_tasks.c ****               qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_CR_M1._Supe
 490:Src/mc_tasks.c **** 
 491:Src/mc_tasks.c ****               /* Start switch over ramp. This ramp will transition from the revup to the closed loo
 492:Src/mc_tasks.c ****               REMNG_Init(pREMNG[M1]);
 493:Src/mc_tasks.c ****               (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 494:Src/mc_tasks.c ****               (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 495:Src/mc_tasks.c ****               Mci[M1].State = SWITCH_OVER;
 496:Src/mc_tasks.c ****             }
 497:Src/mc_tasks.c ****           }
 498:Src/mc_tasks.c ****           break;
 499:Src/mc_tasks.c ****         }
 500:Src/mc_tasks.c **** 
 501:Src/mc_tasks.c ****         case SWITCH_OVER:
 502:Src/mc_tasks.c ****         {
 503:Src/mc_tasks.c ****           if (MCI_STOP == Mci[M1].DirectCommand)
 504:Src/mc_tasks.c ****           {
 505:Src/mc_tasks.c ****             TSK_MF_StopProcessing(&Mci[M1], M1);
 506:Src/mc_tasks.c ****           }
 507:Src/mc_tasks.c ****           else
 508:Src/mc_tasks.c ****           {
 509:Src/mc_tasks.c ****             bool LoopClosed;
 510:Src/mc_tasks.c ****             int16_t hForcedMecSpeedUnit;
 511:Src/mc_tasks.c **** 
 512:Src/mc_tasks.c ****             if(! RUC_Exec(&RevUpControlM1))
 513:Src/mc_tasks.c **** 
 514:Src/mc_tasks.c ****             {
 515:Src/mc_tasks.c ****               /* The time allowed for the startup sequence has expired */
 516:Src/mc_tasks.c ****               MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 517:Src/mc_tasks.c **** 
 518:Src/mc_tasks.c ****             }
 519:Src/mc_tasks.c ****             else
 520:Src/mc_tasks.c **** 
 521:Src/mc_tasks.c ****             {
 522:Src/mc_tasks.c ****               /* Compute the virtual speed and positions of the rotor.
 523:Src/mc_tasks.c ****                  The function returns true if the virtual speed is in the reliability range */
 524:Src/mc_tasks.c ****               LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 525:Src/mc_tasks.c ****               /* Check if the transition ramp has completed. */
 526:Src/mc_tasks.c ****               bool tempBool;
 527:Src/mc_tasks.c ****               tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 528:Src/mc_tasks.c ****               LoopClosed = LoopClosed || tempBool;
 529:Src/mc_tasks.c **** 
 530:Src/mc_tasks.c ****               /* If any of the above conditions is true, the loop is considered closed.
 531:Src/mc_tasks.c ****                  The state machine transitions to the START_RUN state. */
 532:Src/mc_tasks.c ****               if (true ==  LoopClosed)
 533:Src/mc_tasks.c ****               {
 534:Src/mc_tasks.c ****                 #if ( PID_SPEED_INTEGRAL_INIT_DIV == 0 )
 535:Src/mc_tasks.c ****                 PID_SetIntegralTerm(&PIDSpeedHandle_M1, 0);
 536:Src/mc_tasks.c ****                 #else
 537:Src/mc_tasks.c ****                 PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 538:Src/mc_tasks.c ****                                     (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PI
 539:Src/mc_tasks.c ****                                     / PID_SPEED_INTEGRAL_INIT_DIV));
 540:Src/mc_tasks.c **** 				#endif
 541:Src/mc_tasks.c **** 
 542:Src/mc_tasks.c ****                 /* USER CODE BEGIN MediumFrequencyTask M1 1 */
ARM GAS  /tmp/ccxOD3Ta.s 			page 11


 543:Src/mc_tasks.c **** 
 544:Src/mc_tasks.c ****                 /* USER CODE END MediumFrequencyTask M1 1 */
 545:Src/mc_tasks.c ****                 STC_SetSpeedSensor(pSTC[M1], &STO_CR_M1._Super); /*Observer has converged*/
 546:Src/mc_tasks.c ****                 FOC_InitAdditionalMethods(M1);
 547:Src/mc_tasks.c ****                 FOC_CalcCurrRef( M1 );
 548:Src/mc_tasks.c ****                 STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to cur
 549:Src/mc_tasks.c ****                 MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the sp
 550:Src/mc_tasks.c ****                 Mci[M1].State = RUN;
 551:Src/mc_tasks.c ****               }
 552:Src/mc_tasks.c ****             }
 553:Src/mc_tasks.c ****           }
 554:Src/mc_tasks.c ****           break;
 555:Src/mc_tasks.c ****         }
 556:Src/mc_tasks.c **** 
 557:Src/mc_tasks.c ****         case RUN:
 558:Src/mc_tasks.c ****         {
 559:Src/mc_tasks.c ****           if (MCI_STOP == Mci[M1].DirectCommand)
 560:Src/mc_tasks.c ****           {
 561:Src/mc_tasks.c ****             TSK_MF_StopProcessing(&Mci[M1], M1);
 562:Src/mc_tasks.c ****           }
 563:Src/mc_tasks.c ****           else
 564:Src/mc_tasks.c ****           {
 565:Src/mc_tasks.c ****             /* USER CODE BEGIN MediumFrequencyTask M1 2 */
 566:Src/mc_tasks.c **** 
 567:Src/mc_tasks.c ****             /* USER CODE END MediumFrequencyTask M1 2 */
 568:Src/mc_tasks.c **** 
 569:Src/mc_tasks.c ****             MCI_ExecBufferedCommands(&Mci[M1]);
 570:Src/mc_tasks.c **** 
 571:Src/mc_tasks.c ****               FOC_CalcCurrRef(M1);
 572:Src/mc_tasks.c **** 
 573:Src/mc_tasks.c ****               if(!IsSpeedReliable)
 574:Src/mc_tasks.c ****               {
 575:Src/mc_tasks.c ****                 MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 576:Src/mc_tasks.c ****               }
 577:Src/mc_tasks.c **** 
 578:Src/mc_tasks.c ****           }
 579:Src/mc_tasks.c ****           break;
 580:Src/mc_tasks.c ****         }
 581:Src/mc_tasks.c **** 
 582:Src/mc_tasks.c ****         case STOP:
 583:Src/mc_tasks.c ****         {
 584:Src/mc_tasks.c ****           if (TSK_StopPermanencyTimeHasElapsedM1())
 585:Src/mc_tasks.c ****           {
 586:Src/mc_tasks.c **** 
 587:Src/mc_tasks.c ****             STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);  	/*  sensor-less */
 588:Src/mc_tasks.c ****             VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 589:Src/mc_tasks.c **** 
 590:Src/mc_tasks.c ****             /* USER CODE BEGIN MediumFrequencyTask M1 5 */
 591:Src/mc_tasks.c **** 
 592:Src/mc_tasks.c ****             /* USER CODE END MediumFrequencyTask M1 5 */
 593:Src/mc_tasks.c ****             Mci[M1].DirectCommand = MCI_NO_COMMAND;
 594:Src/mc_tasks.c ****             Mci[M1].State = IDLE;
 595:Src/mc_tasks.c **** 
 596:Src/mc_tasks.c ****           }
 597:Src/mc_tasks.c ****           else
 598:Src/mc_tasks.c ****           {
 599:Src/mc_tasks.c ****             /* nothing to do, FW waits for to stop */
ARM GAS  /tmp/ccxOD3Ta.s 			page 12


 600:Src/mc_tasks.c ****           }
 601:Src/mc_tasks.c ****           break;
 602:Src/mc_tasks.c ****         }
 603:Src/mc_tasks.c **** 
 604:Src/mc_tasks.c ****         case FAULT_OVER:
 605:Src/mc_tasks.c ****         {
 606:Src/mc_tasks.c ****           if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 607:Src/mc_tasks.c ****           {
 608:Src/mc_tasks.c ****             Mci[M1].DirectCommand = MCI_NO_COMMAND;
 609:Src/mc_tasks.c ****             Mci[M1].State = IDLE;
 610:Src/mc_tasks.c **** 
 611:Src/mc_tasks.c ****           }
 612:Src/mc_tasks.c ****           else
 613:Src/mc_tasks.c ****           {
 614:Src/mc_tasks.c ****             /* nothing to do, FW stays in FAULT_OVER state until acknowledgement */
 615:Src/mc_tasks.c ****           }
 616:Src/mc_tasks.c ****         }
 617:Src/mc_tasks.c ****         break;
 618:Src/mc_tasks.c **** 
 619:Src/mc_tasks.c ****         case FAULT_NOW:
 620:Src/mc_tasks.c ****         {
 621:Src/mc_tasks.c ****           Mci[M1].State = FAULT_OVER;
 622:Src/mc_tasks.c ****         }
 623:Src/mc_tasks.c **** 
 624:Src/mc_tasks.c ****         default:
 625:Src/mc_tasks.c ****           break;
 626:Src/mc_tasks.c ****        }
 627:Src/mc_tasks.c ****     }
 628:Src/mc_tasks.c ****     else
 629:Src/mc_tasks.c ****     {
 630:Src/mc_tasks.c ****       Mci[M1].State = FAULT_OVER;
 631:Src/mc_tasks.c ****     }
 632:Src/mc_tasks.c ****   }
 633:Src/mc_tasks.c ****   else
 634:Src/mc_tasks.c ****   {
 635:Src/mc_tasks.c ****     Mci[M1].State = FAULT_NOW;
 636:Src/mc_tasks.c ****   }
 637:Src/mc_tasks.c **** 
 638:Src/mc_tasks.c ****   /* USER CODE BEGIN MediumFrequencyTask M1 6 */
 639:Src/mc_tasks.c **** 
 640:Src/mc_tasks.c ****   /* USER CODE END MediumFrequencyTask M1 6 */
 641:Src/mc_tasks.c **** }
 642:Src/mc_tasks.c **** 
 643:Src/mc_tasks.c **** /**
 644:Src/mc_tasks.c ****   * @brief  It re-initializes the current and voltage variables. Moreover
 645:Src/mc_tasks.c ****   *         it clears qd currents PI controllers, voltage sensor and SpeednTorque
 646:Src/mc_tasks.c ****   *         controller. It must be called before each motor restart.
 647:Src/mc_tasks.c ****   *         It does not clear speed sensor.
 648:Src/mc_tasks.c ****   * @param  bMotor related motor it can be M1 or M2
 649:Src/mc_tasks.c ****   * @retval none
 650:Src/mc_tasks.c ****   */
 651:Src/mc_tasks.c **** __weak void FOC_Clear(uint8_t bMotor)
 652:Src/mc_tasks.c **** {
  30              		.loc 1 652 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 16
  33              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccxOD3Ta.s 			page 13


  34              		.loc 1 652 1 is_stmt 0 view .LVU1
  35 0000 30B5     		push	{r4, r5, lr}
  36              		.cfi_def_cfa_offset 12
  37              		.cfi_offset 4, -12
  38              		.cfi_offset 5, -8
  39              		.cfi_offset 14, -4
  40 0002 85B0     		sub	sp, sp, #20
  41              		.cfi_def_cfa_offset 32
  42 0004 0546     		mov	r5, r0
 653:Src/mc_tasks.c ****   /* USER CODE BEGIN FOC_Clear 0 */
 654:Src/mc_tasks.c **** 
 655:Src/mc_tasks.c ****   /* USER CODE END FOC_Clear 0 */
 656:Src/mc_tasks.c **** 
 657:Src/mc_tasks.c ****   ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  43              		.loc 1 657 3 is_stmt 1 view .LVU2
  44              		.loc 1 657 8 is_stmt 0 view .LVU3
  45 0006 0024     		movs	r4, #0
  46 0008 ADF80C40 		strh	r4, [sp, #12]	@ movhi
  47 000c ADF80E40 		strh	r4, [sp, #14]	@ movhi
 658:Src/mc_tasks.c ****   qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  48              		.loc 1 658 3 is_stmt 1 view .LVU4
  49              		.loc 1 658 8 is_stmt 0 view .LVU5
  50 0010 ADF80840 		strh	r4, [sp, #8]	@ movhi
  51 0014 ADF80A40 		strh	r4, [sp, #10]	@ movhi
 659:Src/mc_tasks.c ****   alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};
  52              		.loc 1 659 3 is_stmt 1 view .LVU6
  53              		.loc 1 659 15 is_stmt 0 view .LVU7
  54 0018 ADF80440 		strh	r4, [sp, #4]	@ movhi
  55 001c ADF80640 		strh	r4, [sp, #6]	@ movhi
 660:Src/mc_tasks.c **** 
 661:Src/mc_tasks.c ****   FOCVars[bMotor].Iab = NULL_ab;
  56              		.loc 1 661 3 is_stmt 1 view .LVU8
  57              		.loc 1 661 23 is_stmt 0 view .LVU9
  58 0020 1549     		ldr	r1, .L3
  59 0022 2622     		movs	r2, #38
  60 0024 02FB00F2 		mul	r2, r2, r0
  61 0028 8B18     		adds	r3, r1, r2
  62 002a 0398     		ldr	r0, [sp, #12]
  63              	.LVL1:
  64              		.loc 1 661 23 view .LVU10
  65 002c 8850     		str	r0, [r1, r2]	@ unaligned
 662:Src/mc_tasks.c ****   FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
  66              		.loc 1 662 3 is_stmt 1 view .LVU11
  67              		.loc 1 662 30 is_stmt 0 view .LVU12
  68 002e 0198     		ldr	r0, [sp, #4]
  69 0030 5860     		str	r0, [r3, #4]	@ unaligned
 663:Src/mc_tasks.c ****   FOCVars[bMotor].Iqd = NULL_qd;
  70              		.loc 1 663 3 is_stmt 1 view .LVU13
  71              		.loc 1 663 23 is_stmt 0 view .LVU14
  72 0032 0298     		ldr	r0, [sp, #8]
  73 0034 D860     		str	r0, [r3, #12]	@ unaligned
 664:Src/mc_tasks.c ****   {
 665:Src/mc_tasks.c ****     FOCVars[bMotor].Iqdref = NULL_qd;
  74              		.loc 1 665 5 is_stmt 1 view .LVU15
  75              		.loc 1 665 28 is_stmt 0 view .LVU16
  76 0036 1861     		str	r0, [r3, #16]	@ unaligned
 666:Src/mc_tasks.c ****   }
ARM GAS  /tmp/ccxOD3Ta.s 			page 14


 667:Src/mc_tasks.c ****   FOCVars[bMotor].hTeref = (int16_t)0;
  77              		.loc 1 667 3 is_stmt 1 view .LVU17
  78              		.loc 1 667 26 is_stmt 0 view .LVU18
  79 0038 DC83     		strh	r4, [r3, #30]	@ movhi
 668:Src/mc_tasks.c ****   FOCVars[bMotor].Vqd = NULL_qd;
  80              		.loc 1 668 3 is_stmt 1 view .LVU19
  81              		.loc 1 668 23 is_stmt 0 view .LVU20
  82 003a C3F81600 		str	r0, [r3, #22]	@ unaligned
 669:Src/mc_tasks.c ****   FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  83              		.loc 1 669 3 is_stmt 1 view .LVU21
  84              		.loc 1 669 30 is_stmt 0 view .LVU22
  85 003e 0198     		ldr	r0, [sp, #4]
  86 0040 C3F81A00 		str	r0, [r3, #26]	@ unaligned
 670:Src/mc_tasks.c ****   FOCVars[bMotor].hElAngle = (int16_t)0;
  87              		.loc 1 670 3 is_stmt 1 view .LVU23
  88              		.loc 1 670 28 is_stmt 0 view .LVU24
  89 0044 1C84     		strh	r4, [r3, #32]	@ movhi
 671:Src/mc_tasks.c **** 
 672:Src/mc_tasks.c ****   PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
  90              		.loc 1 672 3 is_stmt 1 view .LVU25
  91 0046 2146     		mov	r1, r4
  92 0048 0C4B     		ldr	r3, .L3+4
  93 004a 53F82500 		ldr	r0, [r3, r5, lsl #2]
  94 004e FFF7FEFF 		bl	PID_SetIntegralTerm
  95              	.LVL2:
 673:Src/mc_tasks.c ****   PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
  96              		.loc 1 673 3 view .LVU26
  97 0052 2146     		mov	r1, r4
  98 0054 0A4B     		ldr	r3, .L3+8
  99 0056 53F82500 		ldr	r0, [r3, r5, lsl #2]
 100 005a FFF7FEFF 		bl	PID_SetIntegralTerm
 101              	.LVL3:
 674:Src/mc_tasks.c **** 
 675:Src/mc_tasks.c ****   STC_Clear(pSTC[bMotor]);
 102              		.loc 1 675 3 view .LVU27
 103 005e 094B     		ldr	r3, .L3+12
 104 0060 53F82500 		ldr	r0, [r3, r5, lsl #2]
 105 0064 FFF7FEFF 		bl	STC_Clear
 106              	.LVL4:
 676:Src/mc_tasks.c **** 
 677:Src/mc_tasks.c ****   PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 107              		.loc 1 677 3 view .LVU28
 108 0068 074B     		ldr	r3, .L3+16
 109 006a 53F82500 		ldr	r0, [r3, r5, lsl #2]
 110 006e FFF7FEFF 		bl	PWMC_SwitchOffPWM
 111              	.LVL5:
 678:Src/mc_tasks.c **** 
 679:Src/mc_tasks.c ****   /* USER CODE BEGIN FOC_Clear 1 */
 680:Src/mc_tasks.c **** 
 681:Src/mc_tasks.c ****   /* USER CODE END FOC_Clear 1 */
 682:Src/mc_tasks.c **** }
 112              		.loc 1 682 1 is_stmt 0 view .LVU29
 113 0072 05B0     		add	sp, sp, #20
 114              		.cfi_def_cfa_offset 12
 115              		@ sp needed
 116 0074 30BD     		pop	{r4, r5, pc}
 117              	.L4:
ARM GAS  /tmp/ccxOD3Ta.s 			page 15


 118 0076 00BF     		.align	2
 119              	.L3:
 120 0078 00000000 		.word	.LANCHOR0
 121 007c 00000000 		.word	pPIDIq
 122 0080 00000000 		.word	pPIDId
 123 0084 00000000 		.word	pSTC
 124 0088 00000000 		.word	.LANCHOR1
 125              		.cfi_endproc
 126              	.LFE1627:
 128              		.section	.text.MCboot,"ax",%progbits
 129              		.align	1
 130              		.weak	MCboot
 131              		.syntax unified
 132              		.thumb
 133              		.thumb_func
 134              		.fpu fpv4-sp-d16
 136              	MCboot:
 137              	.LVL6:
 138              	.LFB1622:
 106:Src/mc_tasks.c ****   /* USER CODE BEGIN MCboot 0 */
 139              		.loc 1 106 1 is_stmt 1 view -0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 8
 142              		@ frame_needed = 0, uses_anonymous_args = 0
 111:Src/mc_tasks.c ****   {
 143              		.loc 1 111 3 view .LVU31
 111:Src/mc_tasks.c ****   {
 144              		.loc 1 111 6 is_stmt 0 view .LVU32
 145 0000 0028     		cmp	r0, #0
 146 0002 73D0     		beq	.L8
 106:Src/mc_tasks.c ****   /* USER CODE BEGIN MCboot 0 */
 147              		.loc 1 106 1 view .LVU33
 148 0004 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 149              		.cfi_def_cfa_offset 36
 150              		.cfi_offset 4, -36
 151              		.cfi_offset 5, -32
 152              		.cfi_offset 6, -28
 153              		.cfi_offset 7, -24
 154              		.cfi_offset 8, -20
 155              		.cfi_offset 9, -16
 156              		.cfi_offset 10, -12
 157              		.cfi_offset 11, -8
 158              		.cfi_offset 14, -4
 159 0008 85B0     		sub	sp, sp, #20
 160              		.cfi_def_cfa_offset 56
 161 000a 8246     		mov	r10, r0
 118:Src/mc_tasks.c ****     pCLM[M1] = &CircleLimitationM1;
 162              		.loc 1 118 5 is_stmt 1 view .LVU34
 118:Src/mc_tasks.c ****     pCLM[M1] = &CircleLimitationM1;
 163              		.loc 1 118 22 is_stmt 0 view .LVU35
 164 000c DFF83091 		ldr	r9, .L11+80
 165 0010 0027     		movs	r7, #0
 166 0012 89F80070 		strb	r7, [r9]
 119:Src/mc_tasks.c **** 
 167              		.loc 1 119 5 is_stmt 1 view .LVU36
 119:Src/mc_tasks.c **** 
 168              		.loc 1 119 14 is_stmt 0 view .LVU37
ARM GAS  /tmp/ccxOD3Ta.s 			page 16


 169 0016 364B     		ldr	r3, .L11
 170 0018 364A     		ldr	r2, .L11+4
 171 001a 1A60     		str	r2, [r3]
 124:Src/mc_tasks.c ****     R3_2_Init(&PWM_Handle_M1);
 172              		.loc 1 124 5 is_stmt 1 view .LVU38
 124:Src/mc_tasks.c ****     R3_2_Init(&PWM_Handle_M1);
 173              		.loc 1 124 20 is_stmt 0 view .LVU39
 174 001c DFF82481 		ldr	r8, .L11+84
 175 0020 3548     		ldr	r0, .L11+8
 176              	.LVL7:
 124:Src/mc_tasks.c ****     R3_2_Init(&PWM_Handle_M1);
 177              		.loc 1 124 20 view .LVU40
 178 0022 C8F80000 		str	r0, [r8]
 125:Src/mc_tasks.c ****     ASPEP_start(&aspepOverUartA);
 179              		.loc 1 125 5 is_stmt 1 view .LVU41
 180 0026 FFF7FEFF 		bl	R3_2_Init
 181              	.LVL8:
 126:Src/mc_tasks.c **** 
 182              		.loc 1 126 5 view .LVU42
 183 002a 3448     		ldr	r0, .L11+12
 184 002c FFF7FEFF 		bl	ASPEP_start
 185              	.LVL9:
 134:Src/mc_tasks.c **** 
 186              		.loc 1 134 5 view .LVU43
 187 0030 FFF7FEFF 		bl	startTimers
 188              	.LVL10:
 139:Src/mc_tasks.c **** 
 189              		.loc 1 139 5 view .LVU44
 190 0034 324D     		ldr	r5, .L11+16
 191 0036 2846     		mov	r0, r5
 192 0038 FFF7FEFF 		bl	PID_HandleInit
 193              	.LVL11:
 144:Src/mc_tasks.c **** 
 194              		.loc 1 144 5 view .LVU45
 195 003c 314E     		ldr	r6, .L11+20
 196 003e 3046     		mov	r0, r6
 197 0040 FFF7FEFF 		bl	STO_CR_Init
 198              	.LVL12:
 149:Src/mc_tasks.c **** 
 199              		.loc 1 149 5 view .LVU46
 200 0044 304C     		ldr	r4, .L11+24
 201 0046 3246     		mov	r2, r6
 202 0048 2946     		mov	r1, r5
 203 004a 2068     		ldr	r0, [r4]
 204 004c FFF7FEFF 		bl	STC_Init
 205              	.LVL13:
 154:Src/mc_tasks.c **** 
 206              		.loc 1 154 5 view .LVU47
 207 0050 2E48     		ldr	r0, .L11+28
 208 0052 FFF7FEFF 		bl	STO_PLL_Init
 209              	.LVL14:
 159:Src/mc_tasks.c **** 
 210              		.loc 1 159 5 view .LVU48
 211 0056 2E4D     		ldr	r5, .L11+32
 212 0058 2846     		mov	r0, r5
 213 005a FFF7FEFF 		bl	VSS_Init
 214              	.LVL15:
ARM GAS  /tmp/ccxOD3Ta.s 			page 17


 164:Src/mc_tasks.c **** 
 215              		.loc 1 164 5 view .LVU49
 216 005e D8F80030 		ldr	r3, [r8]
 217 0062 0093     		str	r3, [sp]
 218 0064 2B4B     		ldr	r3, .L11+36
 219 0066 2A46     		mov	r2, r5
 220 0068 2168     		ldr	r1, [r4]
 221 006a 2B48     		ldr	r0, .L11+40
 222 006c FFF7FEFF 		bl	RUC_Init
 223              	.LVL16:
 169:Src/mc_tasks.c ****     PID_HandleInit(&PIDIdHandle_M1);
 224              		.loc 1 169 5 view .LVU50
 225 0070 2A48     		ldr	r0, .L11+44
 226 0072 FFF7FEFF 		bl	PID_HandleInit
 227              	.LVL17:
 170:Src/mc_tasks.c **** 
 228              		.loc 1 170 5 view .LVU51
 229 0076 2A48     		ldr	r0, .L11+48
 230 0078 FFF7FEFF 		bl	PID_HandleInit
 231              	.LVL18:
 175:Src/mc_tasks.c **** 
 232              		.loc 1 175 5 view .LVU52
 233 007c 294D     		ldr	r5, .L11+52
 234 007e 2846     		mov	r0, r5
 235 0080 FFF7FEFF 		bl	RVBS_Init
 236              	.LVL19:
 180:Src/mc_tasks.c ****     pMPM[M1]->pFOCVars = &FOCVars[M1];
 237              		.loc 1 180 5 view .LVU53
 180:Src/mc_tasks.c ****     pMPM[M1]->pFOCVars = &FOCVars[M1];
 238              		.loc 1 180 9 is_stmt 0 view .LVU54
 239 0084 284B     		ldr	r3, .L11+56
 240 0086 1B68     		ldr	r3, [r3]
 180:Src/mc_tasks.c ****     pMPM[M1]->pFOCVars = &FOCVars[M1];
 241              		.loc 1 180 20 view .LVU55
 242 0088 DD60     		str	r5, [r3, #12]
 181:Src/mc_tasks.c **** 
 243              		.loc 1 181 5 is_stmt 1 view .LVU56
 181:Src/mc_tasks.c **** 
 244              		.loc 1 181 24 is_stmt 0 view .LVU57
 245 008a 284D     		ldr	r5, .L11+60
 246 008c 9D60     		str	r5, [r3, #8]
 186:Src/mc_tasks.c **** 
 247              		.loc 1 186 5 is_stmt 1 view .LVU58
 248 008e 2848     		ldr	r0, .L11+64
 249 0090 FFF7FEFF 		bl	NTC_Init
 250              	.LVL20:
 188:Src/mc_tasks.c ****     REMNG_Init(pREMNG[M1]);
 251              		.loc 1 188 5 view .LVU59
 188:Src/mc_tasks.c ****     REMNG_Init(pREMNG[M1]);
 252              		.loc 1 188 16 is_stmt 0 view .LVU60
 253 0094 2748     		ldr	r0, .L11+68
 254 0096 284B     		ldr	r3, .L11+72
 255 0098 1860     		str	r0, [r3]
 189:Src/mc_tasks.c **** 
 256              		.loc 1 189 5 is_stmt 1 view .LVU61
 257 009a FFF7FEFF 		bl	REMNG_Init
 258              	.LVL21:
ARM GAS  /tmp/ccxOD3Ta.s 			page 18


 191:Src/mc_tasks.c ****     FOCVars[M1].bDriveInput = EXTERNAL;
 259              		.loc 1 191 5 view .LVU62
 260 009e 3846     		mov	r0, r7
 261 00a0 FFF7FEFF 		bl	FOC_Clear
 262              	.LVL22:
 192:Src/mc_tasks.c ****     FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 263              		.loc 1 192 5 view .LVU63
 192:Src/mc_tasks.c ****     FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 264              		.loc 1 192 29 is_stmt 0 view .LVU64
 265 00a4 4FF0010B 		mov	fp, #1
 266 00a8 85F824B0 		strb	fp, [r5, #36]
 193:Src/mc_tasks.c ****     FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 267              		.loc 1 193 5 is_stmt 1 view .LVU65
 193:Src/mc_tasks.c ****     FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 268              		.loc 1 193 26 is_stmt 0 view .LVU66
 269 00ac 2068     		ldr	r0, [r4]
 270 00ae FFF7FEFF 		bl	STC_GetDefaultIqdref
 271              	.LVL23:
 272 00b2 2861     		str	r0, [r5, #16]
 194:Src/mc_tasks.c ****     MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 273              		.loc 1 194 5 is_stmt 1 view .LVU67
 194:Src/mc_tasks.c ****     MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 274              		.loc 1 194 29 is_stmt 0 view .LVU68
 275 00b4 2068     		ldr	r0, [r4]
 276 00b6 FFF7FEFF 		bl	STC_GetDefaultIqdref
 277              	.LVL24:
 194:Src/mc_tasks.c ****     MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 278              		.loc 1 194 59 view .LVU69
 279 00ba 0014     		asrs	r0, r0, #16
 194:Src/mc_tasks.c ****     MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 280              		.loc 1 194 27 view .LVU70
 281 00bc A882     		strh	r0, [r5, #20]	@ movhi
 195:Src/mc_tasks.c ****     MCI_ExecSpeedRamp(&Mci[M1],
 282              		.loc 1 195 5 is_stmt 1 view .LVU71
 283 00be 1F4E     		ldr	r6, .L11+76
 284 00c0 D8F80030 		ldr	r3, [r8]
 285 00c4 2A46     		mov	r2, r5
 286 00c6 2168     		ldr	r1, [r4]
 287 00c8 3046     		mov	r0, r6
 288 00ca FFF7FEFF 		bl	MCI_Init
 289              	.LVL25:
 196:Src/mc_tasks.c ****     STC_GetMecSpeedRefUnitDefault(pSTC[M1]),0); /*First command to STC*/
 290              		.loc 1 196 5 view .LVU72
 291 00ce 2068     		ldr	r0, [r4]
 292 00d0 FFF7FEFF 		bl	STC_GetMecSpeedRefUnitDefault
 293              	.LVL26:
 294 00d4 0146     		mov	r1, r0
 295 00d6 3A46     		mov	r2, r7
 296 00d8 3046     		mov	r0, r6
 297 00da FFF7FEFF 		bl	MCI_ExecSpeedRamp
 298              	.LVL27:
 198:Src/mc_tasks.c **** 
 299              		.loc 1 198 5 view .LVU73
 198:Src/mc_tasks.c **** 
 300              		.loc 1 198 18 is_stmt 0 view .LVU74
 301 00de CAF80060 		str	r6, [r10]
 204:Src/mc_tasks.c ****   }
ARM GAS  /tmp/ccxOD3Ta.s 			page 19


 302              		.loc 1 204 5 is_stmt 1 view .LVU75
 204:Src/mc_tasks.c ****   }
 303              		.loc 1 204 22 is_stmt 0 view .LVU76
 304 00e2 89F800B0 		strb	fp, [r9]
 206:Src/mc_tasks.c **** 
 305              		.loc 1 206 1 view .LVU77
 306 00e6 05B0     		add	sp, sp, #20
 307              		.cfi_def_cfa_offset 36
 308              		@ sp needed
 309 00e8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 310              	.LVL28:
 311              	.L8:
 312              		.cfi_def_cfa_offset 0
 313              		.cfi_restore 4
 314              		.cfi_restore 5
 315              		.cfi_restore 6
 316              		.cfi_restore 7
 317              		.cfi_restore 8
 318              		.cfi_restore 9
 319              		.cfi_restore 10
 320              		.cfi_restore 11
 321              		.cfi_restore 14
 206:Src/mc_tasks.c **** 
 322              		.loc 1 206 1 view .LVU78
 323 00ec 7047     		bx	lr
 324              	.L12:
 325 00ee 00BF     		.align	2
 326              	.L11:
 327 00f0 00000000 		.word	.LANCHOR3
 328 00f4 00000000 		.word	CircleLimitationM1
 329 00f8 00000000 		.word	PWM_Handle_M1
 330 00fc 00000000 		.word	aspepOverUartA
 331 0100 00000000 		.word	PIDSpeedHandle_M1
 332 0104 00000000 		.word	STO_CR_M1
 333 0108 00000000 		.word	pSTC
 334 010c 00000000 		.word	STO_PLL_M1
 335 0110 00000000 		.word	VirtualSpeedSensorM1
 336 0114 00000000 		.word	STO_M1
 337 0118 00000000 		.word	RevUpControlM1
 338 011c 00000000 		.word	PIDIqHandle_M1
 339 0120 00000000 		.word	PIDIdHandle_M1
 340 0124 00000000 		.word	BusVoltageSensor_M1
 341 0128 00000000 		.word	pMPM
 342 012c 00000000 		.word	.LANCHOR0
 343 0130 00000000 		.word	TempSensor_M1
 344 0134 00000000 		.word	RampExtMngrHFParamsM1
 345 0138 00000000 		.word	.LANCHOR4
 346 013c 00000000 		.word	Mci
 347 0140 00000000 		.word	.LANCHOR2
 348 0144 00000000 		.word	.LANCHOR1
 349              		.cfi_endproc
 350              	.LFE1622:
 352              		.section	.text.FOC_InitAdditionalMethods,"ax",%progbits
 353              		.align	1
 354              		.weak	FOC_InitAdditionalMethods
 355              		.syntax unified
 356              		.thumb
ARM GAS  /tmp/ccxOD3Ta.s 			page 20


 357              		.thumb_func
 358              		.fpu fpv4-sp-d16
 360              	FOC_InitAdditionalMethods:
 361              	.LVL29:
 362              	.LFB1628:
 683:Src/mc_tasks.c **** 
 684:Src/mc_tasks.c **** /**
 685:Src/mc_tasks.c ****   * @brief  Use this method to initialize additional methods (if any) in
 686:Src/mc_tasks.c ****   *         START_TO_RUN state
 687:Src/mc_tasks.c ****   * @param  bMotor related motor it can be M1 or M2
 688:Src/mc_tasks.c ****   * @retval none
 689:Src/mc_tasks.c ****   */
 690:Src/mc_tasks.c **** __weak void FOC_InitAdditionalMethods(uint8_t bMotor) //cstat !RED-func-no-effect
 691:Src/mc_tasks.c **** {
 363              		.loc 1 691 1 is_stmt 1 view -0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 0
 366              		@ frame_needed = 0, uses_anonymous_args = 0
 367              		@ link register save eliminated.
 692:Src/mc_tasks.c ****     if (M_NONE == bMotor)
 368              		.loc 1 692 5 view .LVU80
 693:Src/mc_tasks.c ****     {
 694:Src/mc_tasks.c ****       /* Nothing to do */
 695:Src/mc_tasks.c ****     }
 696:Src/mc_tasks.c ****     else
 697:Src/mc_tasks.c ****     {
 698:Src/mc_tasks.c ****   /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */
 699:Src/mc_tasks.c **** 
 700:Src/mc_tasks.c ****   /* USER CODE END FOC_InitAdditionalMethods 0 */
 701:Src/mc_tasks.c ****     }
 369              		.loc 1 701 5 view .LVU81
 702:Src/mc_tasks.c **** }
 370              		.loc 1 702 1 is_stmt 0 view .LVU82
 371 0000 7047     		bx	lr
 372              		.cfi_endproc
 373              	.LFE1628:
 375              		.section	.text.FOC_CalcCurrRef,"ax",%progbits
 376              		.align	1
 377              		.weak	FOC_CalcCurrRef
 378              		.syntax unified
 379              		.thumb
 380              		.thumb_func
 381              		.fpu fpv4-sp-d16
 383              	FOC_CalcCurrRef:
 384              	.LVL30:
 385              	.LFB1629:
 703:Src/mc_tasks.c **** 
 704:Src/mc_tasks.c **** /**
 705:Src/mc_tasks.c ****   * @brief  It computes the new values of Iqdref (current references on qd
 706:Src/mc_tasks.c ****   *         reference frame) based on the required electrical torque information
 707:Src/mc_tasks.c ****   *         provided by oTSC object (internally clocked).
 708:Src/mc_tasks.c ****   *         If implemented in the derived class it executes flux weakening and/or
 709:Src/mc_tasks.c ****   *         MTPA algorithm(s). It must be called with the periodicity specified
 710:Src/mc_tasks.c ****   *         in oTSC parameters
 711:Src/mc_tasks.c ****   * @param  bMotor related motor it can be M1 or M2
 712:Src/mc_tasks.c ****   * @retval none
 713:Src/mc_tasks.c ****   */
ARM GAS  /tmp/ccxOD3Ta.s 			page 21


 714:Src/mc_tasks.c **** __weak void FOC_CalcCurrRef(uint8_t bMotor)
 715:Src/mc_tasks.c **** {
 386              		.loc 1 715 1 is_stmt 1 view -0
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 0
 389              		@ frame_needed = 0, uses_anonymous_args = 0
 716:Src/mc_tasks.c **** 
 717:Src/mc_tasks.c ****   /* USER CODE BEGIN FOC_CalcCurrRef 0 */
 718:Src/mc_tasks.c **** 
 719:Src/mc_tasks.c ****   /* USER CODE END FOC_CalcCurrRef 0 */
 720:Src/mc_tasks.c ****   if (INTERNAL == FOCVars[bMotor].bDriveInput)
 390              		.loc 1 720 3 view .LVU84
 391              		.loc 1 720 34 is_stmt 0 view .LVU85
 392 0000 0A4A     		ldr	r2, .L21
 393 0002 2623     		movs	r3, #38
 394 0004 03FB0023 		mla	r3, r3, r0, r2
 395 0008 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 396              		.loc 1 720 6 view .LVU86
 397 000c 03B1     		cbz	r3, .L20
 398 000e 7047     		bx	lr
 399              	.L20:
 715:Src/mc_tasks.c **** 
 400              		.loc 1 715 1 view .LVU87
 401 0010 10B5     		push	{r4, lr}
 402              		.cfi_def_cfa_offset 8
 403              		.cfi_offset 4, -8
 404              		.cfi_offset 14, -4
 405 0012 0446     		mov	r4, r0
 721:Src/mc_tasks.c ****   {
 722:Src/mc_tasks.c ****     FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 406              		.loc 1 722 5 is_stmt 1 view .LVU88
 407              		.loc 1 722 30 is_stmt 0 view .LVU89
 408 0014 064B     		ldr	r3, .L21+4
 409 0016 53F82000 		ldr	r0, [r3, r0, lsl #2]
 410              	.LVL31:
 411              		.loc 1 722 30 view .LVU90
 412 001a FFF7FEFF 		bl	STC_CalcTorqueReference
 413              	.LVL32:
 414              		.loc 1 722 28 view .LVU91
 415 001e 034B     		ldr	r3, .L21
 416 0020 2622     		movs	r2, #38
 417 0022 02FB0434 		mla	r4, r2, r4, r3
 418 0026 E083     		strh	r0, [r4, #30]	@ movhi
 723:Src/mc_tasks.c ****     FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 419              		.loc 1 723 5 is_stmt 1 view .LVU92
 420              		.loc 1 723 30 is_stmt 0 view .LVU93
 421 0028 2082     		strh	r0, [r4, #16]	@ movhi
 724:Src/mc_tasks.c **** 
 725:Src/mc_tasks.c ****   }
 726:Src/mc_tasks.c ****   else
 727:Src/mc_tasks.c ****   {
 728:Src/mc_tasks.c ****     /* Nothing to do */
 729:Src/mc_tasks.c ****   }
 422              		.loc 1 729 3 is_stmt 1 view .LVU94
 730:Src/mc_tasks.c ****   /* USER CODE BEGIN FOC_CalcCurrRef 1 */
 731:Src/mc_tasks.c **** 
 732:Src/mc_tasks.c ****   /* USER CODE END FOC_CalcCurrRef 1 */
ARM GAS  /tmp/ccxOD3Ta.s 			page 22


 733:Src/mc_tasks.c **** }
 423              		.loc 1 733 1 is_stmt 0 view .LVU95
 424 002a 10BD     		pop	{r4, pc}
 425              	.L22:
 426              		.align	2
 427              	.L21:
 428 002c 00000000 		.word	.LANCHOR0
 429 0030 00000000 		.word	pSTC
 430              		.cfi_endproc
 431              	.LFE1629:
 433              		.section	.text.TSK_SetChargeBootCapDelayM1,"ax",%progbits
 434              		.align	1
 435              		.weak	TSK_SetChargeBootCapDelayM1
 436              		.syntax unified
 437              		.thumb
 438              		.thumb_func
 439              		.fpu fpv4-sp-d16
 441              	TSK_SetChargeBootCapDelayM1:
 442              	.LVL33:
 443              	.LFB1630:
 734:Src/mc_tasks.c **** 
 735:Src/mc_tasks.c **** /**
 736:Src/mc_tasks.c ****   * @brief  It set a counter intended to be used for counting the delay required
 737:Src/mc_tasks.c ****   *         for drivers boot capacitors charging of motor 1
 738:Src/mc_tasks.c ****   * @param  hTickCount number of ticks to be counted
 739:Src/mc_tasks.c ****   * @retval void
 740:Src/mc_tasks.c ****   */
 741:Src/mc_tasks.c **** __weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
 742:Src/mc_tasks.c **** {
 444              		.loc 1 742 1 is_stmt 1 view -0
 445              		.cfi_startproc
 446              		@ args = 0, pretend = 0, frame = 0
 447              		@ frame_needed = 0, uses_anonymous_args = 0
 448              		@ link register save eliminated.
 743:Src/mc_tasks.c ****    hBootCapDelayCounterM1 = hTickCount;
 449              		.loc 1 743 4 view .LVU97
 450              		.loc 1 743 27 is_stmt 0 view .LVU98
 451 0000 014B     		ldr	r3, .L24
 452 0002 1880     		strh	r0, [r3]	@ movhi
 744:Src/mc_tasks.c **** }
 453              		.loc 1 744 1 view .LVU99
 454 0004 7047     		bx	lr
 455              	.L25:
 456 0006 00BF     		.align	2
 457              	.L24:
 458 0008 00000000 		.word	.LANCHOR5
 459              		.cfi_endproc
 460              	.LFE1630:
 462              		.section	.text.TSK_ChargeBootCapDelayHasElapsedM1,"ax",%progbits
 463              		.align	1
 464              		.weak	TSK_ChargeBootCapDelayHasElapsedM1
 465              		.syntax unified
 466              		.thumb
 467              		.thumb_func
 468              		.fpu fpv4-sp-d16
 470              	TSK_ChargeBootCapDelayHasElapsedM1:
 471              	.LFB1631:
ARM GAS  /tmp/ccxOD3Ta.s 			page 23


 745:Src/mc_tasks.c **** 
 746:Src/mc_tasks.c **** /**
 747:Src/mc_tasks.c ****   * @brief  Use this function to know whether the time required to charge boot
 748:Src/mc_tasks.c ****   *         capacitors of motor 1 has elapsed
 749:Src/mc_tasks.c ****   * @param  none
 750:Src/mc_tasks.c ****   * @retval bool true if time has elapsed, false otherwise
 751:Src/mc_tasks.c ****   */
 752:Src/mc_tasks.c **** __weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
 753:Src/mc_tasks.c **** {
 472              		.loc 1 753 1 is_stmt 1 view -0
 473              		.cfi_startproc
 474              		@ args = 0, pretend = 0, frame = 0
 475              		@ frame_needed = 0, uses_anonymous_args = 0
 476              		@ link register save eliminated.
 754:Src/mc_tasks.c ****   bool retVal = false;
 477              		.loc 1 754 3 view .LVU101
 478              	.LVL34:
 755:Src/mc_tasks.c ****   if (((uint16_t)0) == hBootCapDelayCounterM1)
 479              		.loc 1 755 3 view .LVU102
 480              		.loc 1 755 21 is_stmt 0 view .LVU103
 481 0000 034B     		ldr	r3, .L29
 482 0002 1B88     		ldrh	r3, [r3]
 483 0004 9BB2     		uxth	r3, r3
 484              		.loc 1 755 6 view .LVU104
 485 0006 0BB1     		cbz	r3, .L28
 754:Src/mc_tasks.c ****   bool retVal = false;
 486              		.loc 1 754 8 view .LVU105
 487 0008 0020     		movs	r0, #0
 488 000a 7047     		bx	lr
 489              	.L28:
 756:Src/mc_tasks.c ****   {
 757:Src/mc_tasks.c ****     retVal = true;
 490              		.loc 1 757 12 view .LVU106
 491 000c 0120     		movs	r0, #1
 492              	.LVL35:
 758:Src/mc_tasks.c ****   }
 759:Src/mc_tasks.c ****   return (retVal);
 493              		.loc 1 759 3 is_stmt 1 view .LVU107
 760:Src/mc_tasks.c **** }
 494              		.loc 1 760 1 is_stmt 0 view .LVU108
 495 000e 7047     		bx	lr
 496              	.L30:
 497              		.align	2
 498              	.L29:
 499 0010 00000000 		.word	.LANCHOR5
 500              		.cfi_endproc
 501              	.LFE1631:
 503              		.section	.text.TSK_SetStopPermanencyTimeM1,"ax",%progbits
 504              		.align	1
 505              		.weak	TSK_SetStopPermanencyTimeM1
 506              		.syntax unified
 507              		.thumb
 508              		.thumb_func
 509              		.fpu fpv4-sp-d16
 511              	TSK_SetStopPermanencyTimeM1:
 512              	.LVL36:
 513              	.LFB1632:
ARM GAS  /tmp/ccxOD3Ta.s 			page 24


 761:Src/mc_tasks.c **** 
 762:Src/mc_tasks.c **** /**
 763:Src/mc_tasks.c ****   * @brief  It set a counter intended to be used for counting the permanency
 764:Src/mc_tasks.c ****   *         time in STOP state of motor 1
 765:Src/mc_tasks.c ****   * @param  hTickCount number of ticks to be counted
 766:Src/mc_tasks.c ****   * @retval void
 767:Src/mc_tasks.c ****   */
 768:Src/mc_tasks.c **** __weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
 769:Src/mc_tasks.c **** {
 514              		.loc 1 769 1 is_stmt 1 view -0
 515              		.cfi_startproc
 516              		@ args = 0, pretend = 0, frame = 0
 517              		@ frame_needed = 0, uses_anonymous_args = 0
 518              		@ link register save eliminated.
 770:Src/mc_tasks.c ****   hStopPermanencyCounterM1 = hTickCount;
 519              		.loc 1 770 3 view .LVU110
 520              		.loc 1 770 28 is_stmt 0 view .LVU111
 521 0000 014B     		ldr	r3, .L32
 522 0002 1880     		strh	r0, [r3]	@ movhi
 771:Src/mc_tasks.c **** }
 523              		.loc 1 771 1 view .LVU112
 524 0004 7047     		bx	lr
 525              	.L33:
 526 0006 00BF     		.align	2
 527              	.L32:
 528 0008 00000000 		.word	.LANCHOR6
 529              		.cfi_endproc
 530              	.LFE1632:
 532              		.section	.text.TSK_MF_StopProcessing,"ax",%progbits
 533              		.align	1
 534              		.global	TSK_MF_StopProcessing
 535              		.syntax unified
 536              		.thumb
 537              		.thumb_func
 538              		.fpu fpv4-sp-d16
 540              	TSK_MF_StopProcessing:
 541              	.LVL37:
 542              	.LFB1624:
 245:Src/mc_tasks.c ****   R3_2_SwitchOffPWM(pwmcHandle[motor]);
 543              		.loc 1 245 1 is_stmt 1 view -0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 0
 546              		@ frame_needed = 0, uses_anonymous_args = 0
 245:Src/mc_tasks.c ****   R3_2_SwitchOffPWM(pwmcHandle[motor]);
 547              		.loc 1 245 1 is_stmt 0 view .LVU114
 548 0000 10B5     		push	{r4, lr}
 549              		.cfi_def_cfa_offset 8
 550              		.cfi_offset 4, -8
 551              		.cfi_offset 14, -4
 552 0002 0C46     		mov	r4, r1
 246:Src/mc_tasks.c **** 
 553              		.loc 1 246 3 is_stmt 1 view .LVU115
 554 0004 0B4B     		ldr	r3, .L36
 555 0006 53F82100 		ldr	r0, [r3, r1, lsl #2]
 556              	.LVL38:
 246:Src/mc_tasks.c **** 
 557              		.loc 1 246 3 is_stmt 0 view .LVU116
ARM GAS  /tmp/ccxOD3Ta.s 			page 25


 558 000a FFF7FEFF 		bl	R3_2_SwitchOffPWM
 559              	.LVL39:
 248:Src/mc_tasks.c ****   PQD_Clear(pMPM[motor]);
 560              		.loc 1 248 3 is_stmt 1 view .LVU117
 561 000e 2046     		mov	r0, r4
 562 0010 FFF7FEFF 		bl	FOC_Clear
 563              	.LVL40:
 249:Src/mc_tasks.c ****   TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 564              		.loc 1 249 3 view .LVU118
 565 0014 084B     		ldr	r3, .L36+4
 566 0016 53F82400 		ldr	r0, [r3, r4, lsl #2]
 567 001a FFF7FEFF 		bl	PQD_Clear
 568              	.LVL41:
 250:Src/mc_tasks.c ****   Mci[motor].State = STOP;
 569              		.loc 1 250 3 view .LVU119
 570 001e 4FF44870 		mov	r0, #800
 571 0022 FFF7FEFF 		bl	TSK_SetStopPermanencyTimeM1
 572              	.LVL42:
 251:Src/mc_tasks.c ****   return;
 573              		.loc 1 251 3 view .LVU120
 251:Src/mc_tasks.c ****   return;
 574              		.loc 1 251 20 is_stmt 0 view .LVU121
 575 0026 0549     		ldr	r1, .L36+8
 576 0028 01EB4414 		add	r4, r1, r4, lsl #5
 577 002c 0823     		movs	r3, #8
 578 002e 6376     		strb	r3, [r4, #25]
 252:Src/mc_tasks.c **** }
 579              		.loc 1 252 3 is_stmt 1 view .LVU122
 253:Src/mc_tasks.c **** 
 580              		.loc 1 253 1 is_stmt 0 view .LVU123
 581 0030 10BD     		pop	{r4, pc}
 582              	.L37:
 583 0032 00BF     		.align	2
 584              	.L36:
 585 0034 00000000 		.word	.LANCHOR1
 586 0038 00000000 		.word	pMPM
 587 003c 00000000 		.word	Mci
 588              		.cfi_endproc
 589              	.LFE1624:
 591              		.section	.text.TSK_StopPermanencyTimeHasElapsedM1,"ax",%progbits
 592              		.align	1
 593              		.weak	TSK_StopPermanencyTimeHasElapsedM1
 594              		.syntax unified
 595              		.thumb
 596              		.thumb_func
 597              		.fpu fpv4-sp-d16
 599              	TSK_StopPermanencyTimeHasElapsedM1:
 600              	.LFB1633:
 772:Src/mc_tasks.c **** 
 773:Src/mc_tasks.c **** /**
 774:Src/mc_tasks.c ****   * @brief  Use this function to know whether the permanency time in STOP state
 775:Src/mc_tasks.c ****   *         of motor 1 has elapsed
 776:Src/mc_tasks.c ****   * @param  none
 777:Src/mc_tasks.c ****   * @retval bool true if time is elapsed, false otherwise
 778:Src/mc_tasks.c ****   */
 779:Src/mc_tasks.c **** __weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
 780:Src/mc_tasks.c **** {
ARM GAS  /tmp/ccxOD3Ta.s 			page 26


 601              		.loc 1 780 1 is_stmt 1 view -0
 602              		.cfi_startproc
 603              		@ args = 0, pretend = 0, frame = 0
 604              		@ frame_needed = 0, uses_anonymous_args = 0
 605              		@ link register save eliminated.
 781:Src/mc_tasks.c ****   bool retVal = false;
 606              		.loc 1 781 3 view .LVU125
 607              	.LVL43:
 782:Src/mc_tasks.c ****   if (((uint16_t)0) == hStopPermanencyCounterM1)
 608              		.loc 1 782 3 view .LVU126
 609              		.loc 1 782 21 is_stmt 0 view .LVU127
 610 0000 034B     		ldr	r3, .L41
 611 0002 1B88     		ldrh	r3, [r3]
 612 0004 9BB2     		uxth	r3, r3
 613              		.loc 1 782 6 view .LVU128
 614 0006 0BB1     		cbz	r3, .L40
 781:Src/mc_tasks.c ****   bool retVal = false;
 615              		.loc 1 781 8 view .LVU129
 616 0008 0020     		movs	r0, #0
 617 000a 7047     		bx	lr
 618              	.L40:
 783:Src/mc_tasks.c ****   {
 784:Src/mc_tasks.c ****     retVal = true;
 619              		.loc 1 784 12 view .LVU130
 620 000c 0120     		movs	r0, #1
 621              	.LVL44:
 785:Src/mc_tasks.c ****   }
 786:Src/mc_tasks.c ****   return (retVal);
 622              		.loc 1 786 3 is_stmt 1 view .LVU131
 787:Src/mc_tasks.c **** }
 623              		.loc 1 787 1 is_stmt 0 view .LVU132
 624 000e 7047     		bx	lr
 625              	.L42:
 626              		.align	2
 627              	.L41:
 628 0010 00000000 		.word	.LANCHOR6
 629              		.cfi_endproc
 630              	.LFE1633:
 632              		.section	.text.TSK_MediumFrequencyTaskM1,"ax",%progbits
 633              		.align	1
 634              		.weak	TSK_MediumFrequencyTaskM1
 635              		.syntax unified
 636              		.thumb
 637              		.thumb_func
 638              		.fpu fpv4-sp-d16
 640              	TSK_MediumFrequencyTaskM1:
 641              	.LFB1626:
 332:Src/mc_tasks.c ****   /* USER CODE BEGIN MediumFrequencyTask M1 0 */
 642              		.loc 1 332 1 is_stmt 1 view -0
 643              		.cfi_startproc
 644              		@ args = 0, pretend = 0, frame = 16
 645              		@ frame_needed = 0, uses_anonymous_args = 0
 646 0000 30B5     		push	{r4, r5, lr}
 647              		.cfi_def_cfa_offset 12
 648              		.cfi_offset 4, -12
 649              		.cfi_offset 5, -8
 650              		.cfi_offset 14, -4
ARM GAS  /tmp/ccxOD3Ta.s 			page 27


 651 0002 85B0     		sub	sp, sp, #20
 652              		.cfi_def_cfa_offset 32
 337:Src/mc_tasks.c ****   (void)STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 653              		.loc 1 337 3 view .LVU134
 337:Src/mc_tasks.c ****   (void)STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 654              		.loc 1 337 11 is_stmt 0 view .LVU135
 655 0004 0023     		movs	r3, #0
 656 0006 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 338:Src/mc_tasks.c ****   bool IsSpeedReliable = STO_CR_CalcAvrgMecSpeedUnit(&STO_CR_M1, &wAux);
 657              		.loc 1 338 3 is_stmt 1 view .LVU136
 338:Src/mc_tasks.c ****   bool IsSpeedReliable = STO_CR_CalcAvrgMecSpeedUnit(&STO_CR_M1, &wAux);
 658              		.loc 1 338 9 is_stmt 0 view .LVU137
 659 000a 0DF10E01 		add	r1, sp, #14
 660 000e B448     		ldr	r0, .L81
 661 0010 FFF7FEFF 		bl	STO_PLL_CalcAvrgMecSpeedUnit
 662              	.LVL45:
 339:Src/mc_tasks.c ****   PQD_CalcElMotorPower(pMPM[M1]);
 663              		.loc 1 339 3 is_stmt 1 view .LVU138
 339:Src/mc_tasks.c ****   PQD_CalcElMotorPower(pMPM[M1]);
 664              		.loc 1 339 26 is_stmt 0 view .LVU139
 665 0014 0DF10E01 		add	r1, sp, #14
 666 0018 B248     		ldr	r0, .L81+4
 667 001a FFF7FEFF 		bl	STO_CR_CalcAvrgMecSpeedUnit
 668              	.LVL46:
 669 001e 0446     		mov	r4, r0
 670              	.LVL47:
 340:Src/mc_tasks.c **** 
 671              		.loc 1 340 3 is_stmt 1 view .LVU140
 672 0020 B14B     		ldr	r3, .L81+8
 673 0022 1868     		ldr	r0, [r3]
 674 0024 FFF7FEFF 		bl	PQD_CalcElMotorPower
 675              	.LVL48:
 342:Src/mc_tasks.c ****   {
 676              		.loc 1 342 3 view .LVU141
 342:Src/mc_tasks.c ****   {
 677              		.loc 1 342 7 is_stmt 0 view .LVU142
 678 0028 B048     		ldr	r0, .L81+12
 679 002a FFF7FEFF 		bl	MCI_GetCurrentFaults
 680              	.LVL49:
 342:Src/mc_tasks.c ****   {
 681              		.loc 1 342 6 view .LVU143
 682 002e 20B1     		cbz	r0, .L74
 635:Src/mc_tasks.c ****   }
 683              		.loc 1 635 5 is_stmt 1 view .LVU144
 635:Src/mc_tasks.c ****   }
 684              		.loc 1 635 19 is_stmt 0 view .LVU145
 685 0030 AE4B     		ldr	r3, .L81+12
 686 0032 0A22     		movs	r2, #10
 687 0034 5A76     		strb	r2, [r3, #25]
 688              	.LVL50:
 689              	.L43:
 641:Src/mc_tasks.c **** 
 690              		.loc 1 641 1 view .LVU146
 691 0036 05B0     		add	sp, sp, #20
 692              		.cfi_remember_state
 693              		.cfi_def_cfa_offset 12
 694              		@ sp needed
ARM GAS  /tmp/ccxOD3Ta.s 			page 28


 695 0038 30BD     		pop	{r4, r5, pc}
 696              	.LVL51:
 697              	.L74:
 698              		.cfi_restore_state
 344:Src/mc_tasks.c ****     {
 699              		.loc 1 344 5 is_stmt 1 view .LVU147
 344:Src/mc_tasks.c ****     {
 700              		.loc 1 344 9 is_stmt 0 view .LVU148
 701 003a AC48     		ldr	r0, .L81+12
 702 003c FFF7FEFF 		bl	MCI_GetOccurredFaults
 703              	.LVL52:
 344:Src/mc_tasks.c ****     {
 704              		.loc 1 344 8 view .LVU149
 705 0040 0028     		cmp	r0, #0
 706 0042 40F09C81 		bne	.L45
 346:Src/mc_tasks.c ****       {
 707              		.loc 1 346 7 is_stmt 1 view .LVU150
 346:Src/mc_tasks.c ****       {
 708              		.loc 1 346 22 is_stmt 0 view .LVU151
 709 0046 A94B     		ldr	r3, .L81+12
 710 0048 5B7E     		ldrb	r3, [r3, #25]	@ zero_extendqisi2
 711 004a 132B     		cmp	r3, #19
 712 004c F3D8     		bhi	.L43
 713 004e 01A2     		adr	r2, .L48
 714 0050 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 715              		.p2align 2
 716              	.L48:
 717 0054 A5000000 		.word	.L56+1
 718 0058 37000000 		.word	.L43+1
 719 005c 37000000 		.word	.L43+1
 720 0060 37000000 		.word	.L43+1
 721 0064 A3010000 		.word	.L55+1
 722 0068 37000000 		.word	.L43+1
 723 006c 0D030000 		.word	.L54+1
 724 0070 37000000 		.word	.L43+1
 725 0074 3D030000 		.word	.L53+1
 726 0078 37000000 		.word	.L43+1
 727 007c 77030000 		.word	.L52+1
 728 0080 63030000 		.word	.L51+1
 729 0084 37000000 		.word	.L43+1
 730 0088 37000000 		.word	.L43+1
 731 008c 37000000 		.word	.L43+1
 732 0090 37000000 		.word	.L43+1
 733 0094 4D010000 		.word	.L50+1
 734 0098 F7000000 		.word	.L49+1
 735 009c 37000000 		.word	.L43+1
 736 00a0 4F020000 		.word	.L47+1
 737              		.p2align 1
 738              	.L56:
 350:Src/mc_tasks.c ****           {
 739              		.loc 1 350 11 is_stmt 1 view .LVU152
 350:Src/mc_tasks.c ****           {
 740              		.loc 1 350 36 is_stmt 0 view .LVU153
 741 00a4 914B     		ldr	r3, .L81+12
 742 00a6 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 350:Src/mc_tasks.c ****           {
 743              		.loc 1 350 14 view .LVU154
ARM GAS  /tmp/ccxOD3Ta.s 			page 29


 744 00a8 012B     		cmp	r3, #1
 745 00aa 01D0     		beq	.L57
 350:Src/mc_tasks.c ****           {
 746              		.loc 1 350 52 discriminator 1 view .LVU155
 747 00ac 032B     		cmp	r3, #3
 748 00ae C2D1     		bne	.L43
 749              	.L57:
 353:Src/mc_tasks.c ****             }
 750              		.loc 1 353 15 is_stmt 1 view .LVU156
 751 00b0 8E48     		ldr	r0, .L81+12
 752 00b2 FFF7FEFF 		bl	MCI_GetImposedMotorDirection
 753              	.LVL53:
 754 00b6 0146     		mov	r1, r0
 755 00b8 8D48     		ldr	r0, .L81+16
 756 00ba FFF7FEFF 		bl	RUC_Clear
 757              	.LVL54:
 356:Src/mc_tasks.c ****            {
 758              		.loc 1 356 12 view .LVU157
 356:Src/mc_tasks.c ****            {
 759              		.loc 1 356 26 is_stmt 0 view .LVU158
 760 00be 8D4B     		ldr	r3, .L81+20
 761 00c0 1868     		ldr	r0, [r3]
 356:Src/mc_tasks.c ****            {
 762              		.loc 1 356 30 view .LVU159
 763 00c2 90F86E30 		ldrb	r3, [r0, #110]	@ zero_extendqisi2
 356:Src/mc_tasks.c ****            {
 764              		.loc 1 356 15 view .LVU160
 765 00c6 33B9     		cbnz	r3, .L58
 358:Src/mc_tasks.c ****              Mci[M1].State = OFFSET_CALIB;
 766              		.loc 1 358 14 is_stmt 1 view .LVU161
 767 00c8 0021     		movs	r1, #0
 768 00ca FFF7FEFF 		bl	PWMC_CurrentReadingCalibr
 769              	.LVL55:
 359:Src/mc_tasks.c ****            }
 770              		.loc 1 359 14 view .LVU162
 359:Src/mc_tasks.c ****            }
 771              		.loc 1 359 28 is_stmt 0 view .LVU163
 772 00ce 874B     		ldr	r3, .L81+12
 773 00d0 1122     		movs	r2, #17
 774 00d2 5A76     		strb	r2, [r3, #25]
 775 00d4 AFE7     		b	.L43
 776              	.L58:
 364:Src/mc_tasks.c ****              PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 777              		.loc 1 364 14 is_stmt 1 view .LVU164
 364:Src/mc_tasks.c ****              PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 778              		.loc 1 364 55 is_stmt 0 view .LVU165
 779 00d6 0121     		movs	r1, #1
 780 00d8 A0F84E10 		strh	r1, [r0, #78]	@ movhi
 365:Src/mc_tasks.c ****              R3_2_TurnOnLowSides(pwmcHandle[M1]);
 781              		.loc 1 365 14 is_stmt 1 view .LVU166
 782 00dc FFF7FEFF 		bl	PWMC_CurrentReadingCalibr
 783              	.LVL56:
 366:Src/mc_tasks.c ****              TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 784              		.loc 1 366 14 view .LVU167
 785 00e0 844B     		ldr	r3, .L81+20
 786 00e2 1868     		ldr	r0, [r3]
 787 00e4 FFF7FEFF 		bl	R3_2_TurnOnLowSides
ARM GAS  /tmp/ccxOD3Ta.s 			page 30


 788              	.LVL57:
 367:Src/mc_tasks.c ****              Mci[M1].State = CHARGE_BOOT_CAP;
 789              		.loc 1 367 14 view .LVU168
 790 00e8 1420     		movs	r0, #20
 791 00ea FFF7FEFF 		bl	TSK_SetChargeBootCapDelayM1
 792              	.LVL58:
 368:Src/mc_tasks.c **** 
 793              		.loc 1 368 14 view .LVU169
 368:Src/mc_tasks.c **** 
 794              		.loc 1 368 28 is_stmt 0 view .LVU170
 795 00ee 7F4B     		ldr	r3, .L81+12
 796 00f0 1022     		movs	r2, #16
 797 00f2 5A76     		strb	r2, [r3, #25]
 798 00f4 9FE7     		b	.L43
 799              	.L49:
 382:Src/mc_tasks.c ****             {
 800              		.loc 1 382 13 is_stmt 1 view .LVU171
 382:Src/mc_tasks.c ****             {
 801              		.loc 1 382 36 is_stmt 0 view .LVU172
 802 00f6 7D4B     		ldr	r3, .L81+12
 803 00f8 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 382:Src/mc_tasks.c ****             {
 804              		.loc 1 382 16 view .LVU173
 805 00fa 052B     		cmp	r3, #5
 806 00fc 15D0     		beq	.L75
 388:Src/mc_tasks.c ****               {
 807              		.loc 1 388 15 is_stmt 1 view .LVU174
 388:Src/mc_tasks.c ****               {
 808              		.loc 1 388 19 is_stmt 0 view .LVU175
 809 00fe 0121     		movs	r1, #1
 810 0100 7C4B     		ldr	r3, .L81+20
 811 0102 1868     		ldr	r0, [r3]
 812 0104 FFF7FEFF 		bl	PWMC_CurrentReadingCalibr
 813              	.LVL59:
 388:Src/mc_tasks.c ****               {
 814              		.loc 1 388 18 view .LVU176
 815 0108 0028     		cmp	r0, #0
 816 010a 94D0     		beq	.L43
 390:Src/mc_tasks.c ****                 {
 817              		.loc 1 390 17 is_stmt 1 view .LVU177
 390:Src/mc_tasks.c ****                 {
 818              		.loc 1 390 51 is_stmt 0 view .LVU178
 819 010c 774B     		ldr	r3, .L81+12
 820 010e 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 390:Src/mc_tasks.c ****                 {
 821              		.loc 1 390 20 view .LVU179
 822 0110 032B     		cmp	r3, #3
 823 0112 0FD0     		beq	.L76
 399:Src/mc_tasks.c ****                   TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 824              		.loc 1 399 19 is_stmt 1 view .LVU180
 825 0114 774B     		ldr	r3, .L81+20
 826 0116 1868     		ldr	r0, [r3]
 827 0118 FFF7FEFF 		bl	R3_2_TurnOnLowSides
 828              	.LVL60:
 400:Src/mc_tasks.c ****                   Mci[M1].State = CHARGE_BOOT_CAP;
 829              		.loc 1 400 19 view .LVU181
 830 011c 1420     		movs	r0, #20
ARM GAS  /tmp/ccxOD3Ta.s 			page 31


 831 011e FFF7FEFF 		bl	TSK_SetChargeBootCapDelayM1
 832              	.LVL61:
 401:Src/mc_tasks.c **** 
 833              		.loc 1 401 19 view .LVU182
 401:Src/mc_tasks.c **** 
 834              		.loc 1 401 33 is_stmt 0 view .LVU183
 835 0122 724B     		ldr	r3, .L81+12
 836 0124 1022     		movs	r2, #16
 837 0126 5A76     		strb	r2, [r3, #25]
 838 0128 85E7     		b	.L43
 839              	.L75:
 384:Src/mc_tasks.c ****             }
 840              		.loc 1 384 15 is_stmt 1 view .LVU184
 841 012a 0021     		movs	r1, #0
 842 012c 6F48     		ldr	r0, .L81+12
 843 012e FFF7FEFF 		bl	TSK_MF_StopProcessing
 844              	.LVL62:
 845 0132 80E7     		b	.L43
 846              	.L76:
 392:Src/mc_tasks.c ****                   PQD_Clear(pMPM[M1]);
 847              		.loc 1 392 19 view .LVU185
 848 0134 0020     		movs	r0, #0
 849 0136 FFF7FEFF 		bl	FOC_Clear
 850              	.LVL63:
 393:Src/mc_tasks.c ****                   Mci[M1].DirectCommand = MCI_NO_COMMAND;
 851              		.loc 1 393 19 view .LVU186
 852 013a 6B4B     		ldr	r3, .L81+8
 853 013c 1868     		ldr	r0, [r3]
 854 013e FFF7FEFF 		bl	PQD_Clear
 855              	.LVL64:
 394:Src/mc_tasks.c ****                   Mci[M1].State = IDLE;
 856              		.loc 1 394 19 view .LVU187
 394:Src/mc_tasks.c ****                   Mci[M1].State = IDLE;
 857              		.loc 1 394 41 is_stmt 0 view .LVU188
 858 0142 6A4B     		ldr	r3, .L81+12
 859 0144 0022     		movs	r2, #0
 860 0146 1A76     		strb	r2, [r3, #24]
 395:Src/mc_tasks.c ****                 }
 861              		.loc 1 395 19 is_stmt 1 view .LVU189
 395:Src/mc_tasks.c ****                 }
 862              		.loc 1 395 33 is_stmt 0 view .LVU190
 863 0148 5A76     		strb	r2, [r3, #25]
 864 014a 74E7     		b	.L43
 865              	.L50:
 415:Src/mc_tasks.c ****           {
 866              		.loc 1 415 11 is_stmt 1 view .LVU191
 415:Src/mc_tasks.c ****           {
 867              		.loc 1 415 34 is_stmt 0 view .LVU192
 868 014c 674B     		ldr	r3, .L81+12
 869 014e 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 415:Src/mc_tasks.c ****           {
 870              		.loc 1 415 14 view .LVU193
 871 0150 052B     		cmp	r3, #5
 872 0152 21D0     		beq	.L77
 421:Src/mc_tasks.c ****             {
 873              		.loc 1 421 13 is_stmt 1 view .LVU194
 421:Src/mc_tasks.c ****             {
ARM GAS  /tmp/ccxOD3Ta.s 			page 32


 874              		.loc 1 421 17 is_stmt 0 view .LVU195
 875 0154 FFF7FEFF 		bl	TSK_ChargeBootCapDelayHasElapsedM1
 876              	.LVL65:
 421:Src/mc_tasks.c ****             {
 877              		.loc 1 421 16 view .LVU196
 878 0158 0028     		cmp	r0, #0
 879 015a 3FF46CAF 		beq	.L43
 423:Src/mc_tasks.c ****               FOCVars[M1].bDriveInput = EXTERNAL;
 880              		.loc 1 423 15 is_stmt 1 view .LVU197
 881 015e 654C     		ldr	r4, .L81+20
 882              	.LVL66:
 423:Src/mc_tasks.c ****               FOCVars[M1].bDriveInput = EXTERNAL;
 883              		.loc 1 423 15 is_stmt 0 view .LVU198
 884 0160 2068     		ldr	r0, [r4]
 885 0162 FFF7FEFF 		bl	R3_2_SwitchOffPWM
 886              	.LVL67:
 424:Src/mc_tasks.c ****               STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 887              		.loc 1 424 15 is_stmt 1 view .LVU199
 424:Src/mc_tasks.c ****               STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 888              		.loc 1 424 39 is_stmt 0 view .LVU200
 889 0166 644B     		ldr	r3, .L81+24
 890 0168 0122     		movs	r2, #1
 891 016a 83F82420 		strb	r2, [r3, #36]
 425:Src/mc_tasks.c ****               STO_CR_Clear(&STO_CR_M1);
 892              		.loc 1 425 15 is_stmt 1 view .LVU201
 893 016e 6349     		ldr	r1, .L81+28
 894 0170 634B     		ldr	r3, .L81+32
 895 0172 1868     		ldr	r0, [r3]
 896 0174 FFF7FEFF 		bl	STC_SetSpeedSensor
 897              	.LVL68:
 426:Src/mc_tasks.c ****               STO_PLL_Clear(&STO_PLL_M1);
 898              		.loc 1 426 15 view .LVU202
 899 0178 5A48     		ldr	r0, .L81+4
 900 017a FFF7FEFF 		bl	STO_CR_Clear
 901              	.LVL69:
 427:Src/mc_tasks.c ****               FOC_Clear( M1 );
 902              		.loc 1 427 15 view .LVU203
 903 017e 5848     		ldr	r0, .L81
 904 0180 FFF7FEFF 		bl	STO_PLL_Clear
 905              	.LVL70:
 428:Src/mc_tasks.c **** 
 906              		.loc 1 428 15 view .LVU204
 907 0184 0020     		movs	r0, #0
 908 0186 FFF7FEFF 		bl	FOC_Clear
 909              	.LVL71:
 432:Src/mc_tasks.c ****               }
 910              		.loc 1 432 17 view .LVU205
 432:Src/mc_tasks.c ****               }
 911              		.loc 1 432 31 is_stmt 0 view .LVU206
 912 018a 584B     		ldr	r3, .L81+12
 913 018c 0422     		movs	r2, #4
 914 018e 5A76     		strb	r2, [r3, #25]
 435:Src/mc_tasks.c ****             }
 915              		.loc 1 435 15 is_stmt 1 view .LVU207
 916 0190 2068     		ldr	r0, [r4]
 917 0192 FFF7FEFF 		bl	PWMC_SwitchOnPWM
 918              	.LVL72:
ARM GAS  /tmp/ccxOD3Ta.s 			page 33


 919 0196 4EE7     		b	.L43
 920              	.LVL73:
 921              	.L77:
 417:Src/mc_tasks.c ****           }
 922              		.loc 1 417 13 view .LVU208
 923 0198 0021     		movs	r1, #0
 924 019a 5448     		ldr	r0, .L81+12
 925 019c FFF7FEFF 		bl	TSK_MF_StopProcessing
 926              	.LVL74:
 927 01a0 49E7     		b	.L43
 928              	.L55:
 447:Src/mc_tasks.c ****           {
 929              		.loc 1 447 11 view .LVU209
 447:Src/mc_tasks.c ****           {
 930              		.loc 1 447 34 is_stmt 0 view .LVU210
 931 01a2 524B     		ldr	r3, .L81+12
 932 01a4 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 447:Src/mc_tasks.c ****           {
 933              		.loc 1 447 14 view .LVU211
 934 01a6 052B     		cmp	r3, #5
 935 01a8 3ED0     		beq	.L78
 936              	.LBB42:
 454:Src/mc_tasks.c ****             qd_t IqdRef;
 937              		.loc 1 454 13 is_stmt 1 view .LVU212
 455:Src/mc_tasks.c ****             bool ObserverConverged = false;
 938              		.loc 1 455 13 view .LVU213
 456:Src/mc_tasks.c **** 
 939              		.loc 1 456 13 view .LVU214
 940              	.LVL75:
 459:Src/mc_tasks.c **** 
 941              		.loc 1 459 13 view .LVU215
 459:Src/mc_tasks.c **** 
 942              		.loc 1 459 18 is_stmt 0 view .LVU216
 943 01aa 5148     		ldr	r0, .L81+16
 944 01ac FFF7FEFF 		bl	RUC_Exec
 945              	.LVL76:
 459:Src/mc_tasks.c **** 
 946              		.loc 1 459 15 view .LVU217
 947 01b0 0028     		cmp	r0, #0
 948 01b2 3ED1     		bne	.L63
 463:Src/mc_tasks.c **** 
 949              		.loc 1 463 15 is_stmt 1 view .LVU218
 950 01b4 0022     		movs	r2, #0
 951 01b6 1021     		movs	r1, #16
 952 01b8 4C48     		ldr	r0, .L81+12
 953 01ba FFF7FEFF 		bl	MCI_FaultProcessing
 954              	.LVL77:
 955              	.L64:
 476:Src/mc_tasks.c **** 
 956              		.loc 1 476 12 view .LVU219
 476:Src/mc_tasks.c **** 
 957              		.loc 1 476 19 is_stmt 0 view .LVU220
 958 01be 0DF10201 		add	r1, sp, #2
 959 01c2 4E48     		ldr	r0, .L81+28
 960 01c4 FFF7FEFF 		bl	VSS_CalcAvrgMecSpeedUnit
 961              	.LVL78:
 479:Src/mc_tasks.c **** 
ARM GAS  /tmp/ccxOD3Ta.s 			page 34


 962              		.loc 1 479 12 is_stmt 1 view .LVU221
 479:Src/mc_tasks.c **** 
 963              		.loc 1 479 24 is_stmt 0 view .LVU222
 964 01c8 4948     		ldr	r0, .L81+16
 965 01ca FFF7FEFF 		bl	RUC_FirstAccelerationStageReached
 966              	.LVL79:
 479:Src/mc_tasks.c **** 
 967              		.loc 1 479 15 view .LVU223
 968 01ce 0028     		cmp	r0, #0
 969 01d0 3FF431AF 		beq	.L43
 482:Src/mc_tasks.c **** 
 970              		.loc 1 482 14 is_stmt 1 view .LVU224
 482:Src/mc_tasks.c **** 
 971              		.loc 1 482 34 is_stmt 0 view .LVU225
 972 01d4 BDF90210 		ldrsh	r1, [sp, #2]
 973 01d8 4248     		ldr	r0, .L81+4
 974 01da FFF7FEFF 		bl	STO_CR_IsObserverConverged
 975              	.LVL80:
 976 01de 0446     		mov	r4, r0
 977              	.LVL81:
 484:Src/mc_tasks.c ****             }
 978              		.loc 1 484 15 is_stmt 1 view .LVU226
 484:Src/mc_tasks.c ****             }
 979              		.loc 1 484 21 is_stmt 0 view .LVU227
 980 01e0 0146     		mov	r1, r0
 981 01e2 4648     		ldr	r0, .L81+28
 982              	.LVL82:
 484:Src/mc_tasks.c ****             }
 983              		.loc 1 484 21 view .LVU228
 984 01e4 FFF7FEFF 		bl	VSS_SetStartTransition
 985              	.LVL83:
 487:Src/mc_tasks.c ****             {
 986              		.loc 1 487 13 is_stmt 1 view .LVU229
 487:Src/mc_tasks.c ****             {
 987              		.loc 1 487 16 is_stmt 0 view .LVU230
 988 01e8 002C     		cmp	r4, #0
 989 01ea 3FF424AF 		beq	.L43
 990              	.LBB43:
 489:Src/mc_tasks.c **** 
 991              		.loc 1 489 15 is_stmt 1 view .LVU231
 489:Src/mc_tasks.c **** 
 992              		.loc 1 489 36 is_stmt 0 view .LVU232
 993 01ee 3D48     		ldr	r0, .L81+4
 994 01f0 FFF7FEFF 		bl	SPD_GetElAngle
 995              	.LVL84:
 996 01f4 0146     		mov	r1, r0
 997 01f6 404D     		ldr	r5, .L81+24
 998 01f8 6868     		ldr	r0, [r5, #4]
 999 01fa FFF7FEFF 		bl	MCM_Park
 1000              	.LVL85:
 1001 01fe 0290     		str	r0, [sp, #8]
 492:Src/mc_tasks.c ****               (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 1002              		.loc 1 492 15 is_stmt 1 view .LVU233
 1003 0200 404C     		ldr	r4, .L81+36
 1004              	.LVL86:
 492:Src/mc_tasks.c ****               (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 1005              		.loc 1 492 15 is_stmt 0 view .LVU234
ARM GAS  /tmp/ccxOD3Ta.s 			page 35


 1006 0202 2068     		ldr	r0, [r4]
 1007 0204 FFF7FEFF 		bl	REMNG_Init
 1008              	.LVL87:
 493:Src/mc_tasks.c ****               (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 1009              		.loc 1 493 15 is_stmt 1 view .LVU235
 493:Src/mc_tasks.c ****               (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 1010              		.loc 1 493 21 is_stmt 0 view .LVU236
 1011 0208 0022     		movs	r2, #0
 1012 020a B5F91010 		ldrsh	r1, [r5, #16]
 1013 020e 2068     		ldr	r0, [r4]
 1014 0210 FFF7FEFF 		bl	REMNG_ExecRamp
 1015              	.LVL88:
 494:Src/mc_tasks.c ****               Mci[M1].State = SWITCH_OVER;
 1016              		.loc 1 494 15 is_stmt 1 view .LVU237
 494:Src/mc_tasks.c ****               Mci[M1].State = SWITCH_OVER;
 1017              		.loc 1 494 21 is_stmt 0 view .LVU238
 1018 0214 1922     		movs	r2, #25
 1019 0216 BDF90810 		ldrsh	r1, [sp, #8]
 1020 021a 2068     		ldr	r0, [r4]
 1021 021c FFF7FEFF 		bl	REMNG_ExecRamp
 1022              	.LVL89:
 495:Src/mc_tasks.c ****             }
 1023              		.loc 1 495 15 is_stmt 1 view .LVU239
 495:Src/mc_tasks.c ****             }
 1024              		.loc 1 495 29 is_stmt 0 view .LVU240
 1025 0220 324B     		ldr	r3, .L81+12
 1026 0222 1322     		movs	r2, #19
 1027 0224 5A76     		strb	r2, [r3, #25]
 495:Src/mc_tasks.c ****             }
 1028              		.loc 1 495 29 view .LVU241
 1029 0226 06E7     		b	.L43
 1030              	.LVL90:
 1031              	.L78:
 495:Src/mc_tasks.c ****             }
 1032              		.loc 1 495 29 view .LVU242
 1033              	.LBE43:
 1034              	.LBE42:
 449:Src/mc_tasks.c ****           }
 1035              		.loc 1 449 13 is_stmt 1 view .LVU243
 1036 0228 0021     		movs	r1, #0
 1037 022a 3048     		ldr	r0, .L81+12
 1038 022c FFF7FEFF 		bl	TSK_MF_StopProcessing
 1039              	.LVL91:
 1040 0230 01E7     		b	.L43
 1041              	.LVL92:
 1042              	.L63:
 1043              	.LBB44:
 470:Src/mc_tasks.c ****              IqdRef.d = FOCVars[M1].UserIdref;
 1044              		.loc 1 470 14 view .LVU244
 470:Src/mc_tasks.c ****              IqdRef.d = FOCVars[M1].UserIdref;
 1045              		.loc 1 470 25 is_stmt 0 view .LVU245
 1046 0232 334B     		ldr	r3, .L81+32
 1047 0234 1868     		ldr	r0, [r3]
 1048 0236 FFF7FEFF 		bl	STC_CalcTorqueReference
 1049              	.LVL93:
 470:Src/mc_tasks.c ****              IqdRef.d = FOCVars[M1].UserIdref;
 1050              		.loc 1 470 23 view .LVU246
ARM GAS  /tmp/ccxOD3Ta.s 			page 36


 1051 023a ADF80400 		strh	r0, [sp, #4]	@ movhi
 471:Src/mc_tasks.c ****              /* Iqd reference current used by the High Frequency Loop to generate the PWM output */
 1052              		.loc 1 471 14 is_stmt 1 view .LVU247
 471:Src/mc_tasks.c ****              /* Iqd reference current used by the High Frequency Loop to generate the PWM output */
 1053              		.loc 1 471 36 is_stmt 0 view .LVU248
 1054 023e 2E4B     		ldr	r3, .L81+24
 1055 0240 B3F91420 		ldrsh	r2, [r3, #20]
 471:Src/mc_tasks.c ****              /* Iqd reference current used by the High Frequency Loop to generate the PWM output */
 1056              		.loc 1 471 23 view .LVU249
 1057 0244 ADF80620 		strh	r2, [sp, #6]	@ movhi
 473:Src/mc_tasks.c ****            }
 1058              		.loc 1 473 14 is_stmt 1 view .LVU250
 473:Src/mc_tasks.c ****            }
 1059              		.loc 1 473 33 is_stmt 0 view .LVU251
 1060 0248 019A     		ldr	r2, [sp, #4]
 1061 024a 1A61     		str	r2, [r3, #16]
 1062 024c B7E7     		b	.L64
 1063              	.LVL94:
 1064              	.L47:
 473:Src/mc_tasks.c ****            }
 1065              		.loc 1 473 33 view .LVU252
 1066              	.LBE44:
 503:Src/mc_tasks.c ****           {
 1067              		.loc 1 503 11 is_stmt 1 view .LVU253
 503:Src/mc_tasks.c ****           {
 1068              		.loc 1 503 34 is_stmt 0 view .LVU254
 1069 024e 274B     		ldr	r3, .L81+12
 1070 0250 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 503:Src/mc_tasks.c ****           {
 1071              		.loc 1 503 14 view .LVU255
 1072 0252 052B     		cmp	r3, #5
 1073 0254 09D0     		beq	.L79
 1074              	.LBB45:
 509:Src/mc_tasks.c ****             int16_t hForcedMecSpeedUnit;
 1075              		.loc 1 509 13 is_stmt 1 view .LVU256
 510:Src/mc_tasks.c **** 
 1076              		.loc 1 510 13 view .LVU257
 512:Src/mc_tasks.c **** 
 1077              		.loc 1 512 13 view .LVU258
 512:Src/mc_tasks.c **** 
 1078              		.loc 1 512 18 is_stmt 0 view .LVU259
 1079 0256 2648     		ldr	r0, .L81+16
 1080 0258 FFF7FEFF 		bl	RUC_Exec
 1081              	.LVL95:
 512:Src/mc_tasks.c **** 
 1082              		.loc 1 512 15 view .LVU260
 1083 025c 50B9     		cbnz	r0, .L67
 516:Src/mc_tasks.c **** 
 1084              		.loc 1 516 15 is_stmt 1 view .LVU261
 1085 025e 0022     		movs	r2, #0
 1086 0260 1021     		movs	r1, #16
 1087 0262 2248     		ldr	r0, .L81+12
 1088 0264 FFF7FEFF 		bl	MCI_FaultProcessing
 1089              	.LVL96:
 1090 0268 E5E6     		b	.L43
 1091              	.L79:
 1092              	.LBE45:
ARM GAS  /tmp/ccxOD3Ta.s 			page 37


 505:Src/mc_tasks.c ****           }
 1093              		.loc 1 505 13 view .LVU262
 1094 026a 0021     		movs	r1, #0
 1095 026c 1F48     		ldr	r0, .L81+12
 1096 026e FFF7FEFF 		bl	TSK_MF_StopProcessing
 1097              	.LVL97:
 1098 0272 E0E6     		b	.L43
 1099              	.L67:
 1100              	.LBB47:
 1101              	.LBB46:
 524:Src/mc_tasks.c ****               /* Check if the transition ramp has completed. */
 1102              		.loc 1 524 15 view .LVU263
 524:Src/mc_tasks.c ****               /* Check if the transition ramp has completed. */
 1103              		.loc 1 524 28 is_stmt 0 view .LVU264
 1104 0274 214D     		ldr	r5, .L81+28
 1105 0276 02A9     		add	r1, sp, #8
 1106 0278 2846     		mov	r0, r5
 1107 027a FFF7FEFF 		bl	VSS_CalcAvrgMecSpeedUnit
 1108              	.LVL98:
 1109 027e 0446     		mov	r4, r0
 1110              	.LVL99:
 526:Src/mc_tasks.c ****               tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 1111              		.loc 1 526 15 is_stmt 1 view .LVU265
 527:Src/mc_tasks.c ****               LoopClosed = LoopClosed || tempBool;
 1112              		.loc 1 527 15 view .LVU266
 527:Src/mc_tasks.c ****               LoopClosed = LoopClosed || tempBool;
 1113              		.loc 1 527 26 is_stmt 0 view .LVU267
 1114 0280 2846     		mov	r0, r5
 1115 0282 FFF7FEFF 		bl	VSS_TransitionEnded
 1116              	.LVL100:
 528:Src/mc_tasks.c **** 
 1117              		.loc 1 528 15 is_stmt 1 view .LVU268
 528:Src/mc_tasks.c **** 
 1118              		.loc 1 528 39 is_stmt 0 view .LVU269
 1119 0286 14B9     		cbnz	r4, .L71
 528:Src/mc_tasks.c **** 
 1120              		.loc 1 528 39 discriminator 2 view .LVU270
 1121 0288 38B3     		cbz	r0, .L72
 528:Src/mc_tasks.c **** 
 1122              		.loc 1 528 39 view .LVU271
 1123 028a 0123     		movs	r3, #1
 1124 028c 00E0     		b	.L69
 1125              	.L71:
 1126 028e 0123     		movs	r3, #1
 1127              	.L69:
 1128              	.LVL101:
 532:Src/mc_tasks.c ****               {
 1129              		.loc 1 532 15 is_stmt 1 discriminator 6 view .LVU272
 532:Src/mc_tasks.c ****               {
 1130              		.loc 1 532 18 is_stmt 0 discriminator 6 view .LVU273
 1131 0290 002B     		cmp	r3, #0
 1132 0292 3FF4D0AE 		beq	.L43
 537:Src/mc_tasks.c ****                                     (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PI
 1133              		.loc 1 537 17 is_stmt 1 view .LVU274
 538:Src/mc_tasks.c ****                                     / PID_SPEED_INTEGRAL_INIT_DIV));
 1134              		.loc 1 538 66 is_stmt 0 view .LVU275
 1135 0296 184B     		ldr	r3, .L81+24
ARM GAS  /tmp/ccxOD3Ta.s 			page 38


 1136              	.LVL102:
 538:Src/mc_tasks.c ****                                     / PID_SPEED_INTEGRAL_INIT_DIV));
 1137              		.loc 1 538 66 view .LVU276
 1138 0298 B3F91050 		ldrsh	r5, [r3, #16]
 538:Src/mc_tasks.c ****                                     / PID_SPEED_INTEGRAL_INIT_DIV));
 1139              		.loc 1 538 80 view .LVU277
 1140 029c 1A4C     		ldr	r4, .L81+40
 1141 029e 2046     		mov	r0, r4
 1142              	.LVL103:
 538:Src/mc_tasks.c ****                                     / PID_SPEED_INTEGRAL_INIT_DIV));
 1143              		.loc 1 538 80 view .LVU278
 1144 02a0 FFF7FEFF 		bl	PID_GetKIDivisor
 1145              	.LVL104:
 538:Src/mc_tasks.c ****                                     / PID_SPEED_INTEGRAL_INIT_DIV));
 1146              		.loc 1 538 71 view .LVU279
 1147 02a4 01B2     		sxth	r1, r0
 537:Src/mc_tasks.c ****                                     (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PI
 1148              		.loc 1 537 17 view .LVU280
 1149 02a6 01FB05F1 		mul	r1, r1, r5
 1150 02aa 2046     		mov	r0, r4
 1151 02ac FFF7FEFF 		bl	PID_SetIntegralTerm
 1152              	.LVL105:
 545:Src/mc_tasks.c ****                 FOC_InitAdditionalMethods(M1);
 1153              		.loc 1 545 17 is_stmt 1 view .LVU281
 1154 02b0 134C     		ldr	r4, .L81+32
 1155 02b2 0C49     		ldr	r1, .L81+4
 1156 02b4 2068     		ldr	r0, [r4]
 1157 02b6 FFF7FEFF 		bl	STC_SetSpeedSensor
 1158              	.LVL106:
 546:Src/mc_tasks.c ****                 FOC_CalcCurrRef( M1 );
 1159              		.loc 1 546 17 view .LVU282
 1160 02ba 0020     		movs	r0, #0
 1161 02bc FFF7FEFF 		bl	FOC_InitAdditionalMethods
 1162              	.LVL107:
 547:Src/mc_tasks.c ****                 STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to cur
 1163              		.loc 1 547 17 view .LVU283
 1164 02c0 0020     		movs	r0, #0
 1165 02c2 FFF7FEFF 		bl	FOC_CalcCurrRef
 1166              	.LVL108:
 548:Src/mc_tasks.c ****                 MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the sp
 1167              		.loc 1 548 17 view .LVU284
 1168 02c6 2068     		ldr	r0, [r4]
 1169 02c8 FFF7FEFF 		bl	STC_ForceSpeedReferenceToCurrentSpeed
 1170              	.LVL109:
 549:Src/mc_tasks.c ****                 Mci[M1].State = RUN;
 1171              		.loc 1 549 17 view .LVU285
 1172 02cc 074C     		ldr	r4, .L81+12
 1173 02ce 2046     		mov	r0, r4
 1174 02d0 FFF7FEFF 		bl	MCI_ExecBufferedCommands
 1175              	.LVL110:
 550:Src/mc_tasks.c ****               }
 1176              		.loc 1 550 17 view .LVU286
 550:Src/mc_tasks.c ****               }
 1177              		.loc 1 550 31 is_stmt 0 view .LVU287
 1178 02d4 0623     		movs	r3, #6
 1179 02d6 6376     		strb	r3, [r4, #25]
 1180 02d8 ADE6     		b	.L43
ARM GAS  /tmp/ccxOD3Ta.s 			page 39


 1181              	.LVL111:
 1182              	.L72:
 528:Src/mc_tasks.c **** 
 1183              		.loc 1 528 39 view .LVU288
 1184 02da 0023     		movs	r3, #0
 1185 02dc D8E7     		b	.L69
 1186              	.L82:
 1187 02de 00BF     		.align	2
 1188              	.L81:
 1189 02e0 00000000 		.word	STO_PLL_M1
 1190 02e4 00000000 		.word	STO_CR_M1
 1191 02e8 00000000 		.word	pMPM
 1192 02ec 00000000 		.word	Mci
 1193 02f0 00000000 		.word	RevUpControlM1
 1194 02f4 00000000 		.word	.LANCHOR1
 1195 02f8 00000000 		.word	.LANCHOR0
 1196 02fc 00000000 		.word	VirtualSpeedSensorM1
 1197 0300 00000000 		.word	pSTC
 1198 0304 00000000 		.word	.LANCHOR4
 1199 0308 00000000 		.word	PIDSpeedHandle_M1
 1200              	.LVL112:
 1201              	.L54:
 528:Src/mc_tasks.c **** 
 1202              		.loc 1 528 39 view .LVU289
 1203              	.LBE46:
 1204              	.LBE47:
 559:Src/mc_tasks.c ****           {
 1205              		.loc 1 559 11 is_stmt 1 view .LVU290
 559:Src/mc_tasks.c ****           {
 1206              		.loc 1 559 34 is_stmt 0 view .LVU291
 1207 030c 1E4B     		ldr	r3, .L83
 1208 030e 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 559:Src/mc_tasks.c ****           {
 1209              		.loc 1 559 14 view .LVU292
 1210 0310 052B     		cmp	r3, #5
 1211 0312 0ED0     		beq	.L80
 569:Src/mc_tasks.c **** 
 1212              		.loc 1 569 13 is_stmt 1 view .LVU293
 1213 0314 1C48     		ldr	r0, .L83
 1214 0316 FFF7FEFF 		bl	MCI_ExecBufferedCommands
 1215              	.LVL113:
 571:Src/mc_tasks.c **** 
 1216              		.loc 1 571 15 view .LVU294
 1217 031a 0020     		movs	r0, #0
 1218 031c FFF7FEFF 		bl	FOC_CalcCurrRef
 1219              	.LVL114:
 573:Src/mc_tasks.c ****               {
 1220              		.loc 1 573 15 view .LVU295
 573:Src/mc_tasks.c ****               {
 1221              		.loc 1 573 17 is_stmt 0 view .LVU296
 1222 0320 002C     		cmp	r4, #0
 1223 0322 7FF488AE 		bne	.L43
 575:Src/mc_tasks.c ****               }
 1224              		.loc 1 575 17 is_stmt 1 view .LVU297
 1225 0326 0022     		movs	r2, #0
 1226 0328 2021     		movs	r1, #32
 1227 032a 1748     		ldr	r0, .L83
ARM GAS  /tmp/ccxOD3Ta.s 			page 40


 1228 032c FFF7FEFF 		bl	MCI_FaultProcessing
 1229              	.LVL115:
 1230 0330 81E6     		b	.L43
 1231              	.L80:
 561:Src/mc_tasks.c ****           }
 1232              		.loc 1 561 13 view .LVU298
 1233 0332 0021     		movs	r1, #0
 1234 0334 1448     		ldr	r0, .L83
 1235 0336 FFF7FEFF 		bl	TSK_MF_StopProcessing
 1236              	.LVL116:
 1237 033a 7CE6     		b	.L43
 1238              	.L53:
 584:Src/mc_tasks.c ****           {
 1239              		.loc 1 584 11 view .LVU299
 584:Src/mc_tasks.c ****           {
 1240              		.loc 1 584 15 is_stmt 0 view .LVU300
 1241 033c FFF7FEFF 		bl	TSK_StopPermanencyTimeHasElapsedM1
 1242              	.LVL117:
 584:Src/mc_tasks.c ****           {
 1243              		.loc 1 584 14 view .LVU301
 1244 0340 0028     		cmp	r0, #0
 1245 0342 3FF478AE 		beq	.L43
 587:Src/mc_tasks.c ****             VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 1246              		.loc 1 587 13 is_stmt 1 view .LVU302
 1247 0346 114C     		ldr	r4, .L83+4
 1248              	.LVL118:
 587:Src/mc_tasks.c ****             VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 1249              		.loc 1 587 13 is_stmt 0 view .LVU303
 1250 0348 2146     		mov	r1, r4
 1251 034a 114B     		ldr	r3, .L83+8
 1252 034c 1868     		ldr	r0, [r3]
 1253 034e FFF7FEFF 		bl	STC_SetSpeedSensor
 1254              	.LVL119:
 588:Src/mc_tasks.c **** 
 1255              		.loc 1 588 13 is_stmt 1 view .LVU304
 1256 0352 2046     		mov	r0, r4
 1257 0354 FFF7FEFF 		bl	VSS_Clear
 1258              	.LVL120:
 593:Src/mc_tasks.c ****             Mci[M1].State = IDLE;
 1259              		.loc 1 593 13 view .LVU305
 593:Src/mc_tasks.c ****             Mci[M1].State = IDLE;
 1260              		.loc 1 593 35 is_stmt 0 view .LVU306
 1261 0358 0B4B     		ldr	r3, .L83
 1262 035a 0022     		movs	r2, #0
 1263 035c 1A76     		strb	r2, [r3, #24]
 594:Src/mc_tasks.c **** 
 1264              		.loc 1 594 13 is_stmt 1 view .LVU307
 594:Src/mc_tasks.c **** 
 1265              		.loc 1 594 27 is_stmt 0 view .LVU308
 1266 035e 5A76     		strb	r2, [r3, #25]
 1267 0360 69E6     		b	.L43
 1268              	.LVL121:
 1269              	.L51:
 606:Src/mc_tasks.c ****           {
 1270              		.loc 1 606 11 is_stmt 1 view .LVU309
 606:Src/mc_tasks.c ****           {
 1271              		.loc 1 606 40 is_stmt 0 view .LVU310
ARM GAS  /tmp/ccxOD3Ta.s 			page 41


 1272 0362 094B     		ldr	r3, .L83
 1273 0364 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 606:Src/mc_tasks.c ****           {
 1274              		.loc 1 606 14 view .LVU311
 1275 0366 022B     		cmp	r3, #2
 1276 0368 7FF465AE 		bne	.L43
 608:Src/mc_tasks.c ****             Mci[M1].State = IDLE;
 1277              		.loc 1 608 13 is_stmt 1 view .LVU312
 608:Src/mc_tasks.c ****             Mci[M1].State = IDLE;
 1278              		.loc 1 608 35 is_stmt 0 view .LVU313
 1279 036c 064B     		ldr	r3, .L83
 1280 036e 0022     		movs	r2, #0
 1281 0370 1A76     		strb	r2, [r3, #24]
 609:Src/mc_tasks.c **** 
 1282              		.loc 1 609 13 is_stmt 1 view .LVU314
 609:Src/mc_tasks.c **** 
 1283              		.loc 1 609 27 is_stmt 0 view .LVU315
 1284 0372 5A76     		strb	r2, [r3, #25]
 1285 0374 5FE6     		b	.L43
 1286              	.L52:
 621:Src/mc_tasks.c ****         }
 1287              		.loc 1 621 11 is_stmt 1 view .LVU316
 621:Src/mc_tasks.c ****         }
 1288              		.loc 1 621 25 is_stmt 0 view .LVU317
 1289 0376 044B     		ldr	r3, .L83
 1290 0378 0B22     		movs	r2, #11
 1291 037a 5A76     		strb	r2, [r3, #25]
 1292 037c 5BE6     		b	.L43
 1293              	.L45:
 630:Src/mc_tasks.c ****     }
 1294              		.loc 1 630 7 is_stmt 1 view .LVU318
 630:Src/mc_tasks.c ****     }
 1295              		.loc 1 630 21 is_stmt 0 view .LVU319
 1296 037e 024B     		ldr	r3, .L83
 1297 0380 0B22     		movs	r2, #11
 1298 0382 5A76     		strb	r2, [r3, #25]
 1299 0384 57E6     		b	.L43
 1300              	.L84:
 1301 0386 00BF     		.align	2
 1302              	.L83:
 1303 0388 00000000 		.word	Mci
 1304 038c 00000000 		.word	VirtualSpeedSensorM1
 1305 0390 00000000 		.word	pSTC
 1306              		.cfi_endproc
 1307              	.LFE1626:
 1309              		.section	.text.MC_Scheduler,"ax",%progbits
 1310              		.align	1
 1311              		.weak	MC_Scheduler
 1312              		.syntax unified
 1313              		.thumb
 1314              		.thumb_func
 1315              		.fpu fpv4-sp-d16
 1317              	MC_Scheduler:
 1318              	.LFB1625:
 261:Src/mc_tasks.c **** /* USER CODE BEGIN MC_Scheduler 0 */
 1319              		.loc 1 261 1 is_stmt 1 view -0
 1320              		.cfi_startproc
ARM GAS  /tmp/ccxOD3Ta.s 			page 42


 1321              		@ args = 0, pretend = 0, frame = 0
 1322              		@ frame_needed = 0, uses_anonymous_args = 0
 1323 0000 38B5     		push	{r3, r4, r5, lr}
 1324              		.cfi_def_cfa_offset 16
 1325              		.cfi_offset 3, -16
 1326              		.cfi_offset 4, -12
 1327              		.cfi_offset 5, -8
 1328              		.cfi_offset 14, -4
 266:Src/mc_tasks.c ****   {
 1329              		.loc 1 266 3 view .LVU321
 266:Src/mc_tasks.c ****   {
 1330              		.loc 1 266 20 is_stmt 0 view .LVU322
 1331 0002 204B     		ldr	r3, .L94
 1332 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1333 0006 DBB2     		uxtb	r3, r3
 266:Src/mc_tasks.c ****   {
 1334              		.loc 1 266 6 view .LVU323
 1335 0008 012B     		cmp	r3, #1
 1336 000a 00D0     		beq	.L92
 1337              	.L85:
 321:Src/mc_tasks.c **** 
 1338              		.loc 1 321 1 view .LVU324
 1339 000c 38BD     		pop	{r3, r4, r5, pc}
 1340              	.L92:
 268:Src/mc_tasks.c ****     {
 1341              		.loc 1 268 5 is_stmt 1 view .LVU325
 268:Src/mc_tasks.c ****     {
 1342              		.loc 1 268 25 is_stmt 0 view .LVU326
 1343 000e 1E4B     		ldr	r3, .L94+4
 1344 0010 1B88     		ldrh	r3, [r3]
 268:Src/mc_tasks.c ****     {
 1345              		.loc 1 268 7 view .LVU327
 1346 0012 C3B1     		cbz	r3, .L87
 270:Src/mc_tasks.c ****     }
 1347              		.loc 1 270 7 is_stmt 1 view .LVU328
 270:Src/mc_tasks.c ****     }
 1348              		.loc 1 270 23 is_stmt 0 view .LVU329
 1349 0014 013B     		subs	r3, r3, #1
 1350 0016 1C4A     		ldr	r2, .L94+4
 1351 0018 1380     		strh	r3, [r2]	@ movhi
 1352              	.L88:
 305:Src/mc_tasks.c ****     {
 1353              		.loc 1 305 5 is_stmt 1 view .LVU330
 305:Src/mc_tasks.c ****     {
 1354              		.loc 1 305 31 is_stmt 0 view .LVU331
 1355 001a 1C4B     		ldr	r3, .L94+8
 1356 001c 1B88     		ldrh	r3, [r3]
 1357 001e 9BB2     		uxth	r3, r3
 305:Src/mc_tasks.c ****     {
 1358              		.loc 1 305 7 view .LVU332
 1359 0020 2BB1     		cbz	r3, .L90
 307:Src/mc_tasks.c ****     }
 1360              		.loc 1 307 7 is_stmt 1 view .LVU333
 307:Src/mc_tasks.c ****     }
 1361              		.loc 1 307 29 is_stmt 0 view .LVU334
 1362 0022 1A4A     		ldr	r2, .L94+8
 1363 0024 1388     		ldrh	r3, [r2]
ARM GAS  /tmp/ccxOD3Ta.s 			page 43


 1364 0026 9BB2     		uxth	r3, r3
 1365 0028 013B     		subs	r3, r3, #1
 1366 002a 9BB2     		uxth	r3, r3
 1367 002c 1380     		strh	r3, [r2]	@ movhi
 1368              	.L90:
 309:Src/mc_tasks.c ****     {
 1369              		.loc 1 309 5 is_stmt 1 view .LVU335
 309:Src/mc_tasks.c ****     {
 1370              		.loc 1 309 33 is_stmt 0 view .LVU336
 1371 002e 184B     		ldr	r3, .L94+12
 1372 0030 1B88     		ldrh	r3, [r3]
 1373 0032 9BB2     		uxth	r3, r3
 309:Src/mc_tasks.c ****     {
 1374              		.loc 1 309 7 view .LVU337
 1375 0034 002B     		cmp	r3, #0
 1376 0036 E9D0     		beq	.L85
 311:Src/mc_tasks.c ****     }
 1377              		.loc 1 311 7 is_stmt 1 view .LVU338
 311:Src/mc_tasks.c ****     }
 1378              		.loc 1 311 31 is_stmt 0 view .LVU339
 1379 0038 154A     		ldr	r2, .L94+12
 1380 003a 1388     		ldrh	r3, [r2]
 1381 003c 9BB2     		uxth	r3, r3
 1382 003e 013B     		subs	r3, r3, #1
 1383 0040 9BB2     		uxth	r3, r3
 1384 0042 1380     		strh	r3, [r2]	@ movhi
 317:Src/mc_tasks.c ****   /* USER CODE BEGIN MC_Scheduler 2 */
 1385              		.loc 1 317 3 is_stmt 1 view .LVU340
 321:Src/mc_tasks.c **** 
 1386              		.loc 1 321 1 is_stmt 0 view .LVU341
 1387 0044 E2E7     		b	.L85
 1388              	.L87:
 274:Src/mc_tasks.c **** 
 1389              		.loc 1 274 7 is_stmt 1 view .LVU342
 1390 0046 FFF7FEFF 		bl	TSK_MediumFrequencyTaskM1
 1391              	.LVL122:
 276:Src/mc_tasks.c ****                                                                                 &MCP_Over_UartA.rxL
 1392              		.loc 1 276 7 view .LVU343
 276:Src/mc_tasks.c ****                                                                                 &MCP_Over_UartA.rxL
 1393              		.loc 1 276 47 is_stmt 0 view .LVU344
 1394 004a 124C     		ldr	r4, .L94+16
 1395 004c 2146     		mov	r1, r4
 1396 004e 51F80C0B 		ldr	r0, [r1], #12
 276:Src/mc_tasks.c ****                                                                                 &MCP_Over_UartA.rxL
 1397              		.loc 1 276 63 view .LVU345
 1398 0052 8368     		ldr	r3, [r0, #8]
 276:Src/mc_tasks.c ****                                                                                 &MCP_Over_UartA.rxL
 1399              		.loc 1 276 33 view .LVU346
 1400 0054 9847     		blx	r3
 1401              	.LVL123:
 276:Src/mc_tasks.c ****                                                                                 &MCP_Over_UartA.rxL
 1402              		.loc 1 276 31 view .LVU347
 1403 0056 6060     		str	r0, [r4, #4]
 278:Src/mc_tasks.c ****       {
 1404              		.loc 1 278 7 is_stmt 1 view .LVU348
 278:Src/mc_tasks.c ****       {
 1405              		.loc 1 278 10 is_stmt 0 view .LVU349
ARM GAS  /tmp/ccxOD3Ta.s 			page 44


 1406 0058 30B1     		cbz	r0, .L89
 285:Src/mc_tasks.c ****                                                      (void **) &MCP_Over_UartA.txBuffer, //cstat !M
 1407              		.loc 1 285 9 is_stmt 1 view .LVU350
 285:Src/mc_tasks.c ****                                                      (void **) &MCP_Over_UartA.txBuffer, //cstat !M
 1408              		.loc 1 285 33 is_stmt 0 view .LVU351
 1409 005a 2146     		mov	r1, r4
 1410 005c 51F8080B 		ldr	r0, [r1], #8
 285:Src/mc_tasks.c ****                                                      (void **) &MCP_Over_UartA.txBuffer, //cstat !M
 1411              		.loc 1 285 49 view .LVU352
 1412 0060 0368     		ldr	r3, [r0]
 285:Src/mc_tasks.c ****                                                      (void **) &MCP_Over_UartA.txBuffer, //cstat !M
 1413              		.loc 1 285 19 view .LVU353
 1414 0062 0A22     		movs	r2, #10
 1415 0064 9847     		blx	r3
 1416              	.LVL124:
 285:Src/mc_tasks.c ****                                                      (void **) &MCP_Over_UartA.txBuffer, //cstat !M
 1417              		.loc 1 285 12 view .LVU354
 1418 0066 18B9     		cbnz	r0, .L93
 1419              	.L89:
 303:Src/mc_tasks.c ****     }
 1420              		.loc 1 303 7 is_stmt 1 view .LVU355
 303:Src/mc_tasks.c ****     }
 1421              		.loc 1 303 24 is_stmt 0 view .LVU356
 1422 0068 074B     		ldr	r3, .L94+4
 1423 006a 0122     		movs	r2, #1
 1424 006c 1A80     		strh	r2, [r3]	@ movhi
 1425 006e D4E7     		b	.L88
 1426              	.L93:
 293:Src/mc_tasks.c ****           MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_Uart
 1427              		.loc 1 293 11 is_stmt 1 view .LVU357
 1428 0070 2046     		mov	r0, r4
 1429 0072 FFF7FEFF 		bl	MCP_ReceivedPacket
 1430              	.LVL125:
 294:Src/mc_tasks.c ****                                                       MCP_Over_UartA.txLength, MCTL_SYNC);
 1431              		.loc 1 294 11 view .LVU358
 294:Src/mc_tasks.c ****                                                       MCP_Over_UartA.txLength, MCTL_SYNC);
 1432              		.loc 1 294 25 is_stmt 0 view .LVU359
 1433 0076 2068     		ldr	r0, [r4]
 294:Src/mc_tasks.c ****                                                       MCP_Over_UartA.txLength, MCTL_SYNC);
 1434              		.loc 1 294 41 view .LVU360
 1435 0078 4568     		ldr	r5, [r0, #4]
 294:Src/mc_tasks.c ****                                                       MCP_Over_UartA.txLength, MCTL_SYNC);
 1436              		.loc 1 294 11 view .LVU361
 1437 007a 0A23     		movs	r3, #10
 1438 007c E289     		ldrh	r2, [r4, #14]
 1439 007e A168     		ldr	r1, [r4, #8]
 1440 0080 A847     		blx	r5
 1441              	.LVL126:
 1442 0082 F1E7     		b	.L89
 1443              	.L95:
 1444              		.align	2
 1445              	.L94:
 1446 0084 00000000 		.word	.LANCHOR2
 1447 0088 00000000 		.word	.LANCHOR7
 1448 008c 00000000 		.word	.LANCHOR5
 1449 0090 00000000 		.word	.LANCHOR6
 1450 0094 00000000 		.word	MCP_Over_UartA
ARM GAS  /tmp/ccxOD3Ta.s 			page 45


 1451              		.cfi_endproc
 1452              	.LFE1625:
 1454              		.section	.text.TSK_HighFrequencyTask,"ax",%progbits
 1455              		.align	1
 1456              		.weak	TSK_HighFrequencyTask
 1457              		.syntax unified
 1458              		.thumb
 1459              		.thumb_func
 1460              		.fpu fpv4-sp-d16
 1462              	TSK_HighFrequencyTask:
 1463              	.LFB1634:
 788:Src/mc_tasks.c **** 
 789:Src/mc_tasks.c **** #if defined (CCMRAM)
 790:Src/mc_tasks.c **** #if defined (__ICCARM__)
 791:Src/mc_tasks.c **** #pragma location = ".ccmram"
 792:Src/mc_tasks.c **** #elif defined (__CC_ARM) || defined(__GNUC__)
 793:Src/mc_tasks.c **** __attribute__((section (".ccmram")))
 794:Src/mc_tasks.c **** #endif
 795:Src/mc_tasks.c **** #endif
 796:Src/mc_tasks.c **** 
 797:Src/mc_tasks.c **** /**
 798:Src/mc_tasks.c ****   * @brief  Executes the Motor Control duties that require a high frequency rate and a precise timi
 799:Src/mc_tasks.c ****   *
 800:Src/mc_tasks.c ****   *  This is mainly the FOC current control loop. It is executed depending on the state of the Moto
 801:Src/mc_tasks.c ****   * subsystem (see the state machine(s)).
 802:Src/mc_tasks.c ****   *
 803:Src/mc_tasks.c ****   * @retval Number of the  motor instance which FOC loop was executed.
 804:Src/mc_tasks.c ****   */
 805:Src/mc_tasks.c **** __weak uint8_t TSK_HighFrequencyTask(void)
 806:Src/mc_tasks.c **** {
 1464              		.loc 1 806 1 is_stmt 1 view -0
 1465              		.cfi_startproc
 1466              		@ args = 0, pretend = 0, frame = 48
 1467              		@ frame_needed = 0, uses_anonymous_args = 0
 1468 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1469              		.cfi_def_cfa_offset 20
 1470              		.cfi_offset 4, -20
 1471              		.cfi_offset 5, -16
 1472              		.cfi_offset 6, -12
 1473              		.cfi_offset 7, -8
 1474              		.cfi_offset 14, -4
 1475 0002 8DB0     		sub	sp, sp, #52
 1476              		.cfi_def_cfa_offset 72
 807:Src/mc_tasks.c ****   /* USER CODE BEGIN HighFrequencyTask 0 */
 808:Src/mc_tasks.c **** 
 809:Src/mc_tasks.c ****   /* USER CODE END HighFrequencyTask 0 */
 810:Src/mc_tasks.c **** 
 811:Src/mc_tasks.c ****   uint16_t hFOCreturn;
 1477              		.loc 1 811 3 view .LVU363
 812:Src/mc_tasks.c ****   uint8_t bMotorNbr = 0;
 1478              		.loc 1 812 3 view .LVU364
 1479              	.LVL127:
 813:Src/mc_tasks.c **** 
 814:Src/mc_tasks.c ****   Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/
 1480              		.loc 1 814 3 view .LVU365
 815:Src/mc_tasks.c ****   Observer_Inputs_t STO_aux_Inputs; /*  only if sensorless aux*/
 1481              		.loc 1 815 3 view .LVU366
ARM GAS  /tmp/ccxOD3Ta.s 			page 46


 816:Src/mc_tasks.c ****   STO_aux_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 1482              		.loc 1 816 3 view .LVU367
 1483              		.loc 1 816 29 is_stmt 0 view .LVU368
 1484 0004 574B     		ldr	r3, .L107
 1485 0006 1868     		ldr	r0, [r3]	@ unaligned
 1486 0008 0690     		str	r0, [sp, #24]
 817:Src/mc_tasks.c **** 
 818:Src/mc_tasks.c ****   STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 1487              		.loc 1 818 3 is_stmt 1 view .LVU369
 1488              		.loc 1 818 25 is_stmt 0 view .LVU370
 1489 000a 0990     		str	r0, [sp, #36]
 819:Src/mc_tasks.c ****   if (SWITCH_OVER == Mci[M1].State)
 1490              		.loc 1 819 3 is_stmt 1 view .LVU371
 1491              		.loc 1 819 29 is_stmt 0 view .LVU372
 1492 000c 564B     		ldr	r3, .L107+4
 1493 000e 5B7E     		ldrb	r3, [r3, #25]	@ zero_extendqisi2
 1494              		.loc 1 819 6 view .LVU373
 1495 0010 132B     		cmp	r3, #19
 1496 0012 00F08580 		beq	.L104
 1497              	.L97:
 820:Src/mc_tasks.c ****   {
 821:Src/mc_tasks.c ****     if (!REMNG_RampCompleted(pREMNG[M1]))
 822:Src/mc_tasks.c ****     {
 823:Src/mc_tasks.c ****       FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
 824:Src/mc_tasks.c ****     }
 825:Src/mc_tasks.c ****   }
 826:Src/mc_tasks.c ****   /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_1 */
 827:Src/mc_tasks.c **** 
 828:Src/mc_tasks.c ****   /* USER CODE END HighFrequencyTask SINGLEDRIVE_1 */
 829:Src/mc_tasks.c ****   hFOCreturn = FOC_CurrControllerM1();
 1498              		.loc 1 829 3 is_stmt 1 view .LVU374
 1499              	.LBB51:
 1500              	.LBI51:
 830:Src/mc_tasks.c ****   /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_2 */
 831:Src/mc_tasks.c **** 
 832:Src/mc_tasks.c ****   /* USER CODE END HighFrequencyTask SINGLEDRIVE_2 */
 833:Src/mc_tasks.c ****   if(hFOCreturn == MC_DURATION)
 834:Src/mc_tasks.c ****   {
 835:Src/mc_tasks.c ****     MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 836:Src/mc_tasks.c ****   }
 837:Src/mc_tasks.c ****   else
 838:Src/mc_tasks.c ****   {
 839:Src/mc_tasks.c ****     STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 840:Src/mc_tasks.c ****     STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless
 841:Src/mc_tasks.c ****     (void)STO_CR_CalcElAngle(&STO_CR_M1, &STO_Inputs);
 842:Src/mc_tasks.c ****     STO_CR_CalcAvrgElSpeedDpp(&STO_CR_M1); /*  Only in case of Sensor-less */
 843:Src/mc_tasks.c ****     /*  only for sensor-less */
 844:Src/mc_tasks.c ****     if(((uint16_t)START == Mci[M1].State) || ((uint16_t)SWITCH_OVER == Mci[M1].State))
 845:Src/mc_tasks.c ****     {
 846:Src/mc_tasks.c ****       int16_t hObsAngle = SPD_GetElAngle(&STO_CR_M1._Super);
 847:Src/mc_tasks.c ****       (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 848:Src/mc_tasks.c ****     }
 849:Src/mc_tasks.c ****     STO_aux_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 850:Src/mc_tasks.c ****     STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensor
 851:Src/mc_tasks.c ****     (void)( void )STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_aux_Inputs);
 852:Src/mc_tasks.c **** 	STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1);
 853:Src/mc_tasks.c ****     /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_3 */
ARM GAS  /tmp/ccxOD3Ta.s 			page 47


 854:Src/mc_tasks.c **** 
 855:Src/mc_tasks.c ****     /* USER CODE END HighFrequencyTask SINGLEDRIVE_3 */
 856:Src/mc_tasks.c ****   }
 857:Src/mc_tasks.c ****   /* USER CODE BEGIN HighFrequencyTask 1 */
 858:Src/mc_tasks.c **** 
 859:Src/mc_tasks.c ****   /* USER CODE END HighFrequencyTask 1 */
 860:Src/mc_tasks.c **** 
 861:Src/mc_tasks.c ****   GLOBAL_TIMESTAMP++;
 862:Src/mc_tasks.c ****   if (0U == MCPA_UART_A.Mark)
 863:Src/mc_tasks.c ****   {
 864:Src/mc_tasks.c ****     /* Nothing to do */
 865:Src/mc_tasks.c ****   }
 866:Src/mc_tasks.c ****   else
 867:Src/mc_tasks.c ****   {
 868:Src/mc_tasks.c ****     MCPA_dataLog (&MCPA_UART_A);
 869:Src/mc_tasks.c ****   }
 870:Src/mc_tasks.c **** 
 871:Src/mc_tasks.c ****   return (bMotorNbr);
 872:Src/mc_tasks.c **** }
 873:Src/mc_tasks.c **** 
 874:Src/mc_tasks.c **** #if defined (CCMRAM)
 875:Src/mc_tasks.c **** #if defined (__ICCARM__)
 876:Src/mc_tasks.c **** #pragma location = ".ccmram"
 877:Src/mc_tasks.c **** #elif defined (__CC_ARM) || defined(__GNUC__)
 878:Src/mc_tasks.c **** __attribute__((section (".ccmram")))
 879:Src/mc_tasks.c **** #endif
 880:Src/mc_tasks.c **** #endif
 881:Src/mc_tasks.c **** /**
 882:Src/mc_tasks.c ****   * @brief It executes the core of FOC drive that is the controllers for Iqd
 883:Src/mc_tasks.c ****   *        currents regulation. Reference frame transformations are carried out
 884:Src/mc_tasks.c ****   *        accordingly to the active speed sensor. It must be called periodically
 885:Src/mc_tasks.c ****   *        when new motor currents have been converted
 886:Src/mc_tasks.c ****   * @param this related object of class CFOC.
 887:Src/mc_tasks.c ****   * @retval int16_t It returns MC_NO_FAULTS if the FOC has been ended before
 888:Src/mc_tasks.c ****   *         next PWM Update event, MC_DURATION otherwise
 889:Src/mc_tasks.c ****   */
 890:Src/mc_tasks.c **** inline uint16_t FOC_CurrControllerM1(void)
 1501              		.loc 1 890 17 view .LVU375
 1502              	.LBB52:
 891:Src/mc_tasks.c **** {
 892:Src/mc_tasks.c ****   qd_t Iqd, Vqd;
 1503              		.loc 1 892 3 view .LVU376
 893:Src/mc_tasks.c ****   ab_t Iab;
 1504              		.loc 1 893 3 view .LVU377
 894:Src/mc_tasks.c ****   alphabeta_t Ialphabeta, Valphabeta;
 1505              		.loc 1 894 3 view .LVU378
 895:Src/mc_tasks.c ****   int16_t hElAngle;
 1506              		.loc 1 895 3 view .LVU379
 896:Src/mc_tasks.c ****   uint16_t hCodeError;
 1507              		.loc 1 896 3 view .LVU380
 897:Src/mc_tasks.c ****   SpeednPosFdbk_Handle_t *speedHandle;
 1508              		.loc 1 897 3 view .LVU381
 898:Src/mc_tasks.c ****   speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 1509              		.loc 1 898 3 view .LVU382
 1510              		.loc 1 898 17 is_stmt 0 view .LVU383
 1511 0016 554B     		ldr	r3, .L107+8
 1512 0018 1868     		ldr	r0, [r3]
ARM GAS  /tmp/ccxOD3Ta.s 			page 48


 1513 001a FFF7FEFF 		bl	STC_GetSpeedSensor
 1514              	.LVL128:
 1515 001e 0746     		mov	r7, r0
 1516              	.LVL129:
 899:Src/mc_tasks.c ****   hElAngle = SPD_GetElAngle(speedHandle);
 1517              		.loc 1 899 3 is_stmt 1 view .LVU384
 1518              		.loc 1 899 14 is_stmt 0 view .LVU385
 1519 0020 FFF7FEFF 		bl	SPD_GetElAngle
 1520              	.LVL130:
 1521              		.loc 1 899 14 view .LVU386
 1522 0024 0546     		mov	r5, r0
 1523              	.LVL131:
 900:Src/mc_tasks.c ****   hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 1524              		.loc 1 900 3 is_stmt 1 view .LVU387
 1525              		.loc 1 900 15 is_stmt 0 view .LVU388
 1526 0026 3846     		mov	r0, r7
 1527 0028 FFF7FEFF 		bl	SPD_GetInstElSpeedDpp
 1528              	.LVL132:
 901:Src/mc_tasks.c ****   PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 1529              		.loc 1 901 3 is_stmt 1 view .LVU389
 1530 002c 504E     		ldr	r6, .L107+12
 1531 002e 03A9     		add	r1, sp, #12
 1532 0030 3068     		ldr	r0, [r6]
 1533 0032 FFF7FEFF 		bl	PWMC_GetPhaseCurrents
 1534              	.LVL133:
 902:Src/mc_tasks.c ****   RCM_ReadOngoingConv();
 1535              		.loc 1 902 3 view .LVU390
 1536 0036 FFF7FEFF 		bl	RCM_ReadOngoingConv
 1537              	.LVL134:
 903:Src/mc_tasks.c ****   RCM_ExecNextConv();
 1538              		.loc 1 903 3 view .LVU391
 1539 003a FFF7FEFF 		bl	RCM_ExecNextConv
 1540              	.LVL135:
 904:Src/mc_tasks.c ****   Ialphabeta = MCM_Clarke(Iab);
 1541              		.loc 1 904 3 view .LVU392
 1542              		.loc 1 904 16 is_stmt 0 view .LVU393
 1543 003e 0398     		ldr	r0, [sp, #12]
 1544 0040 FFF7FEFF 		bl	MCM_Clarke
 1545              	.LVL136:
 1546 0044 0490     		str	r0, [sp, #16]
 905:Src/mc_tasks.c ****   Iqd = MCM_Park(Ialphabeta, hElAngle);
 1547              		.loc 1 905 3 is_stmt 1 view .LVU394
 1548              		.loc 1 905 9 is_stmt 0 view .LVU395
 1549 0046 2946     		mov	r1, r5
 1550 0048 FFF7FEFF 		bl	MCM_Park
 1551              	.LVL137:
 1552 004c 0190     		str	r0, [sp, #4]
 906:Src/mc_tasks.c ****   Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 1553              		.loc 1 906 3 is_stmt 1 view .LVU396
 1554              		.loc 1 906 65 is_stmt 0 view .LVU397
 1555 004e 494C     		ldr	r4, .L107+16
 1556 0050 B4F91030 		ldrsh	r3, [r4, #16]
 1557              		.loc 1 906 74 view .LVU398
 1558 0054 01B2     		sxth	r1, r0
 1559              		.loc 1 906 11 view .LVU399
 1560 0056 591A     		subs	r1, r3, r1
 1561 0058 474B     		ldr	r3, .L107+20
ARM GAS  /tmp/ccxOD3Ta.s 			page 49


 1562 005a 1868     		ldr	r0, [r3]
 1563 005c FFF7FEFF 		bl	PI_Controller
 1564              	.LVL138:
 1565              		.loc 1 906 9 view .LVU400
 1566 0060 ADF80800 		strh	r0, [sp, #8]	@ movhi
 907:Src/mc_tasks.c ****   Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 1567              		.loc 1 907 3 is_stmt 1 view .LVU401
 1568              		.loc 1 907 65 is_stmt 0 view .LVU402
 1569 0064 B4F91210 		ldrsh	r1, [r4, #18]
 1570              		.loc 1 907 74 view .LVU403
 1571 0068 BDF90630 		ldrsh	r3, [sp, #6]
 1572              		.loc 1 907 11 view .LVU404
 1573 006c C91A     		subs	r1, r1, r3
 1574 006e 434B     		ldr	r3, .L107+24
 1575 0070 1868     		ldr	r0, [r3]
 1576 0072 FFF7FEFF 		bl	PI_Controller
 1577              	.LVL139:
 1578              		.loc 1 907 9 view .LVU405
 1579 0076 ADF80A00 		strh	r0, [sp, #10]	@ movhi
 908:Src/mc_tasks.c ****   Vqd = Circle_Limitation(pCLM[M1], Vqd);
 1580              		.loc 1 908 3 is_stmt 1 view .LVU406
 1581              		.loc 1 908 9 is_stmt 0 view .LVU407
 1582 007a 0299     		ldr	r1, [sp, #8]
 1583 007c 404B     		ldr	r3, .L107+28
 1584 007e 1868     		ldr	r0, [r3]
 1585 0080 FFF7FEFF 		bl	Circle_Limitation
 1586              	.LVL140:
 1587 0084 0290     		str	r0, [sp, #8]
 909:Src/mc_tasks.c ****   hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 1588              		.loc 1 909 3 is_stmt 1 view .LVU408
 1589              		.loc 1 909 15 is_stmt 0 view .LVU409
 1590 0086 3846     		mov	r0, r7
 1591 0088 FFF7FEFF 		bl	SPD_GetInstElSpeedDpp
 1592              	.LVL141:
 910:Src/mc_tasks.c ****   Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 1593              		.loc 1 910 3 is_stmt 1 view .LVU410
 1594              		.loc 1 910 16 is_stmt 0 view .LVU411
 1595 008c 2946     		mov	r1, r5
 1596 008e 0298     		ldr	r0, [sp, #8]
 1597 0090 FFF7FEFF 		bl	MCM_Rev_Park
 1598              	.LVL142:
 1599 0094 0146     		mov	r1, r0
 1600 0096 0590     		str	r0, [sp, #20]
 911:Src/mc_tasks.c ****   hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 1601              		.loc 1 911 3 is_stmt 1 view .LVU412
 1602              		.loc 1 911 16 is_stmt 0 view .LVU413
 1603 0098 3068     		ldr	r0, [r6]
 1604 009a FFF7FEFF 		bl	PWMC_SetPhaseVoltage
 1605              	.LVL143:
 1606 009e 0346     		mov	r3, r0
 1607              	.LVL144:
 912:Src/mc_tasks.c **** 
 913:Src/mc_tasks.c ****   FOCVars[M1].Vqd = Vqd;
 1608              		.loc 1 913 3 is_stmt 1 view .LVU414
 1609              		.loc 1 913 19 is_stmt 0 view .LVU415
 1610 00a0 0298     		ldr	r0, [sp, #8]
 1611 00a2 C4F81600 		str	r0, [r4, #22]	@ unaligned
ARM GAS  /tmp/ccxOD3Ta.s 			page 50


 914:Src/mc_tasks.c ****   FOCVars[M1].Iab = Iab;
 1612              		.loc 1 914 3 is_stmt 1 view .LVU416
 1613              		.loc 1 914 19 is_stmt 0 view .LVU417
 1614 00a6 039A     		ldr	r2, [sp, #12]
 1615 00a8 2260     		str	r2, [r4]
 915:Src/mc_tasks.c ****   FOCVars[M1].Ialphabeta = Ialphabeta;
 1616              		.loc 1 915 3 is_stmt 1 view .LVU418
 1617              		.loc 1 915 26 is_stmt 0 view .LVU419
 1618 00aa 049A     		ldr	r2, [sp, #16]
 1619 00ac 6260     		str	r2, [r4, #4]
 916:Src/mc_tasks.c ****   FOCVars[M1].Iqd = Iqd;
 1620              		.loc 1 916 3 is_stmt 1 view .LVU420
 1621              		.loc 1 916 19 is_stmt 0 view .LVU421
 1622 00ae 019A     		ldr	r2, [sp, #4]
 1623 00b0 E260     		str	r2, [r4, #12]
 917:Src/mc_tasks.c ****   FOCVars[M1].Valphabeta = Valphabeta;
 1624              		.loc 1 917 3 is_stmt 1 view .LVU422
 1625              		.loc 1 917 26 is_stmt 0 view .LVU423
 1626 00b2 0598     		ldr	r0, [sp, #20]
 1627 00b4 C4F81A00 		str	r0, [r4, #26]	@ unaligned
 918:Src/mc_tasks.c ****   FOCVars[M1].hElAngle = hElAngle;
 1628              		.loc 1 918 3 is_stmt 1 view .LVU424
 1629              		.loc 1 918 24 is_stmt 0 view .LVU425
 1630 00b8 2584     		strh	r5, [r4, #32]	@ movhi
 919:Src/mc_tasks.c **** 
 920:Src/mc_tasks.c ****   return(hCodeError);
 1631              		.loc 1 920 3 is_stmt 1 view .LVU426
 1632              	.LVL145:
 1633              		.loc 1 920 3 is_stmt 0 view .LVU427
 1634              	.LBE52:
 1635              	.LBE51:
 833:Src/mc_tasks.c ****   {
 1636              		.loc 1 833 3 is_stmt 1 view .LVU428
 833:Src/mc_tasks.c ****   {
 1637              		.loc 1 833 5 is_stmt 0 view .LVU429
 1638 00ba 012B     		cmp	r3, #1
 1639 00bc 3ED0     		beq	.L105
 839:Src/mc_tasks.c ****     STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless
 1640              		.loc 1 839 5 is_stmt 1 view .LVU430
 839:Src/mc_tasks.c ****     STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless
 1641              		.loc 1 839 27 is_stmt 0 view .LVU431
 1642 00be 2D4B     		ldr	r3, .L107+16
 1643              	.LVL146:
 839:Src/mc_tasks.c ****     STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless
 1644              		.loc 1 839 27 view .LVU432
 1645 00c0 5B68     		ldr	r3, [r3, #4]
 1646 00c2 0A93     		str	r3, [sp, #40]
 840:Src/mc_tasks.c ****     (void)STO_CR_CalcElAngle(&STO_CR_M1, &STO_Inputs);
 1647              		.loc 1 840 5 is_stmt 1 view .LVU433
 840:Src/mc_tasks.c ****     (void)STO_CR_CalcElAngle(&STO_CR_M1, &STO_Inputs);
 1648              		.loc 1 840 23 is_stmt 0 view .LVU434
 1649 00c4 2F48     		ldr	r0, .L107+32
 1650 00c6 FFF7FEFF 		bl	VBS_GetAvBusVoltage_d
 1651              	.LVL147:
 840:Src/mc_tasks.c ****     (void)STO_CR_CalcElAngle(&STO_CR_M1, &STO_Inputs);
 1652              		.loc 1 840 21 view .LVU435
 1653 00ca ADF82C00 		strh	r0, [sp, #44]	@ movhi
ARM GAS  /tmp/ccxOD3Ta.s 			page 51


 841:Src/mc_tasks.c ****     STO_CR_CalcAvrgElSpeedDpp(&STO_CR_M1); /*  Only in case of Sensor-less */
 1654              		.loc 1 841 5 is_stmt 1 view .LVU436
 841:Src/mc_tasks.c ****     STO_CR_CalcAvrgElSpeedDpp(&STO_CR_M1); /*  Only in case of Sensor-less */
 1655              		.loc 1 841 11 is_stmt 0 view .LVU437
 1656 00ce 2E4C     		ldr	r4, .L107+36
 1657 00d0 09A9     		add	r1, sp, #36
 1658 00d2 2046     		mov	r0, r4
 1659 00d4 FFF7FEFF 		bl	STO_CR_CalcElAngle
 1660              	.LVL148:
 842:Src/mc_tasks.c ****     /*  only for sensor-less */
 1661              		.loc 1 842 5 is_stmt 1 view .LVU438
 1662 00d8 2046     		mov	r0, r4
 1663 00da FFF7FEFF 		bl	STO_CR_CalcAvrgElSpeedDpp
 1664              	.LVL149:
 844:Src/mc_tasks.c ****     {
 1665              		.loc 1 844 5 view .LVU439
 844:Src/mc_tasks.c ****     {
 1666              		.loc 1 844 35 is_stmt 0 view .LVU440
 1667 00de 224B     		ldr	r3, .L107+4
 1668 00e0 5B7E     		ldrb	r3, [r3, #25]	@ zero_extendqisi2
 844:Src/mc_tasks.c ****     {
 1669              		.loc 1 844 7 view .LVU441
 1670 00e2 042B     		cmp	r3, #4
 1671 00e4 30D0     		beq	.L100
 844:Src/mc_tasks.c ****     {
 1672              		.loc 1 844 43 discriminator 1 view .LVU442
 1673 00e6 132B     		cmp	r3, #19
 1674 00e8 2ED0     		beq	.L100
 1675              	.L101:
 849:Src/mc_tasks.c ****     STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensor
 1676              		.loc 1 849 5 is_stmt 1 view .LVU443
 849:Src/mc_tasks.c ****     STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensor
 1677              		.loc 1 849 31 is_stmt 0 view .LVU444
 1678 00ea 224B     		ldr	r3, .L107+16
 1679 00ec 5B68     		ldr	r3, [r3, #4]
 1680 00ee 0793     		str	r3, [sp, #28]
 850:Src/mc_tasks.c ****     (void)( void )STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_aux_Inputs);
 1681              		.loc 1 850 5 is_stmt 1 view .LVU445
 850:Src/mc_tasks.c ****     (void)( void )STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_aux_Inputs);
 1682              		.loc 1 850 27 is_stmt 0 view .LVU446
 1683 00f0 2448     		ldr	r0, .L107+32
 1684 00f2 FFF7FEFF 		bl	VBS_GetAvBusVoltage_d
 1685              	.LVL150:
 850:Src/mc_tasks.c ****     (void)( void )STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_aux_Inputs);
 1686              		.loc 1 850 25 view .LVU447
 1687 00f6 ADF82000 		strh	r0, [sp, #32]	@ movhi
 851:Src/mc_tasks.c **** 	STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1);
 1688              		.loc 1 851 5 is_stmt 1 view .LVU448
 851:Src/mc_tasks.c **** 	STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1);
 1689              		.loc 1 851 19 is_stmt 0 view .LVU449
 1690 00fa 244C     		ldr	r4, .L107+40
 1691 00fc 06A9     		add	r1, sp, #24
 1692 00fe 2046     		mov	r0, r4
 1693 0100 FFF7FEFF 		bl	STO_PLL_CalcElAngle
 1694              	.LVL151:
 852:Src/mc_tasks.c ****     /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_3 */
 1695              		.loc 1 852 2 is_stmt 1 view .LVU450
ARM GAS  /tmp/ccxOD3Ta.s 			page 52


 1696 0104 2046     		mov	r0, r4
 1697 0106 FFF7FEFF 		bl	STO_PLL_CalcAvrgElSpeedDpp
 1698              	.LVL152:
 1699              	.L99:
 861:Src/mc_tasks.c ****   if (0U == MCPA_UART_A.Mark)
 1700              		.loc 1 861 3 view .LVU451
 861:Src/mc_tasks.c ****   if (0U == MCPA_UART_A.Mark)
 1701              		.loc 1 861 19 is_stmt 0 view .LVU452
 1702 010a 214A     		ldr	r2, .L107+44
 1703 010c 1368     		ldr	r3, [r2]
 1704 010e 0133     		adds	r3, r3, #1
 1705 0110 1360     		str	r3, [r2]
 862:Src/mc_tasks.c ****   {
 1706              		.loc 1 862 3 is_stmt 1 view .LVU453
 862:Src/mc_tasks.c ****   {
 1707              		.loc 1 862 24 is_stmt 0 view .LVU454
 1708 0112 204B     		ldr	r3, .L107+48
 1709 0114 93F82930 		ldrb	r3, [r3, #41]	@ zero_extendqisi2
 862:Src/mc_tasks.c ****   {
 1710              		.loc 1 862 6 view .LVU455
 1711 0118 03BB     		cbnz	r3, .L106
 1712              	.L102:
 871:Src/mc_tasks.c **** }
 1713              		.loc 1 871 3 is_stmt 1 view .LVU456
 872:Src/mc_tasks.c **** 
 1714              		.loc 1 872 1 is_stmt 0 view .LVU457
 1715 011a 0020     		movs	r0, #0
 1716 011c 0DB0     		add	sp, sp, #52
 1717              		.cfi_remember_state
 1718              		.cfi_def_cfa_offset 20
 1719              		@ sp needed
 1720 011e F0BD     		pop	{r4, r5, r6, r7, pc}
 1721              	.L104:
 1722              		.cfi_restore_state
 821:Src/mc_tasks.c ****     {
 1723              		.loc 1 821 5 is_stmt 1 view .LVU458
 821:Src/mc_tasks.c ****     {
 1724              		.loc 1 821 10 is_stmt 0 view .LVU459
 1725 0120 1D4B     		ldr	r3, .L107+52
 1726 0122 1868     		ldr	r0, [r3]
 1727 0124 FFF7FEFF 		bl	REMNG_RampCompleted
 1728              	.LVL153:
 821:Src/mc_tasks.c ****     {
 1729              		.loc 1 821 8 view .LVU460
 1730 0128 0028     		cmp	r0, #0
 1731 012a 7FF474AF 		bne	.L97
 823:Src/mc_tasks.c ****     }
 1732              		.loc 1 823 7 is_stmt 1 view .LVU461
 823:Src/mc_tasks.c ****     }
 1733              		.loc 1 823 39 is_stmt 0 view .LVU462
 1734 012e 1A4B     		ldr	r3, .L107+52
 1735 0130 1868     		ldr	r0, [r3]
 1736 0132 FFF7FEFF 		bl	REMNG_Calc
 1737              	.LVL154:
 823:Src/mc_tasks.c ****     }
 1738              		.loc 1 823 28 view .LVU463
 1739 0136 0F4B     		ldr	r3, .L107+16
ARM GAS  /tmp/ccxOD3Ta.s 			page 53


 1740 0138 1882     		strh	r0, [r3, #16]	@ movhi
 1741 013a 6CE7     		b	.L97
 1742              	.LVL155:
 1743              	.L105:
 835:Src/mc_tasks.c ****   }
 1744              		.loc 1 835 5 is_stmt 1 view .LVU464
 1745 013c 0022     		movs	r2, #0
 1746 013e 0121     		movs	r1, #1
 1747 0140 0948     		ldr	r0, .L107+4
 1748 0142 FFF7FEFF 		bl	MCI_FaultProcessing
 1749              	.LVL156:
 835:Src/mc_tasks.c ****   }
 1750              		.loc 1 835 5 is_stmt 0 view .LVU465
 1751 0146 E0E7     		b	.L99
 1752              	.L100:
 1753              	.LBB53:
 846:Src/mc_tasks.c ****       (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 1754              		.loc 1 846 7 is_stmt 1 view .LVU466
 846:Src/mc_tasks.c ****       (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 1755              		.loc 1 846 27 is_stmt 0 view .LVU467
 1756 0148 0F48     		ldr	r0, .L107+36
 1757 014a FFF7FEFF 		bl	SPD_GetElAngle
 1758              	.LVL157:
 846:Src/mc_tasks.c ****       (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 1759              		.loc 1 846 15 view .LVU468
 1760 014e ADF81400 		strh	r0, [sp, #20]	@ movhi
 847:Src/mc_tasks.c ****     }
 1761              		.loc 1 847 7 is_stmt 1 view .LVU469
 847:Src/mc_tasks.c ****     }
 1762              		.loc 1 847 13 is_stmt 0 view .LVU470
 1763 0152 05A9     		add	r1, sp, #20
 1764 0154 1148     		ldr	r0, .L107+56
 1765 0156 FFF7FEFF 		bl	VSS_CalcElAngle
 1766              	.LVL158:
 1767 015a C6E7     		b	.L101
 1768              	.L106:
 1769              	.LBE53:
 868:Src/mc_tasks.c ****   }
 1770              		.loc 1 868 5 is_stmt 1 view .LVU471
 1771 015c 0D48     		ldr	r0, .L107+48
 1772 015e FFF7FEFF 		bl	MCPA_dataLog
 1773              	.LVL159:
 1774 0162 DAE7     		b	.L102
 1775              	.L108:
 1776              		.align	2
 1777              	.L107:
 1778 0164 1A000000 		.word	.LANCHOR0+26
 1779 0168 00000000 		.word	Mci
 1780 016c 00000000 		.word	pSTC
 1781 0170 00000000 		.word	.LANCHOR1
 1782 0174 00000000 		.word	.LANCHOR0
 1783 0178 00000000 		.word	pPIDIq
 1784 017c 00000000 		.word	pPIDId
 1785 0180 00000000 		.word	.LANCHOR3
 1786 0184 00000000 		.word	BusVoltageSensor_M1
 1787 0188 00000000 		.word	STO_CR_M1
 1788 018c 00000000 		.word	STO_PLL_M1
ARM GAS  /tmp/ccxOD3Ta.s 			page 54


 1789 0190 00000000 		.word	GLOBAL_TIMESTAMP
 1790 0194 00000000 		.word	MCPA_UART_A
 1791 0198 00000000 		.word	.LANCHOR4
 1792 019c 00000000 		.word	VirtualSpeedSensorM1
 1793              		.cfi_endproc
 1794              	.LFE1634:
 1796              		.section	.text.TSK_SafetyTask_PWMOFF,"ax",%progbits
 1797              		.align	1
 1798              		.weak	TSK_SafetyTask_PWMOFF
 1799              		.syntax unified
 1800              		.thumb
 1801              		.thumb_func
 1802              		.fpu fpv4-sp-d16
 1804              	TSK_SafetyTask_PWMOFF:
 1805              	.LVL160:
 1806              	.LFB1637:
 921:Src/mc_tasks.c **** }
 922:Src/mc_tasks.c **** 
 923:Src/mc_tasks.c **** /**
 924:Src/mc_tasks.c ****   * @brief  Executes safety checks (e.g. bus voltage and temperature) for all drive instances.
 925:Src/mc_tasks.c ****   *
 926:Src/mc_tasks.c ****   * Faults flags are updated here.
 927:Src/mc_tasks.c ****   */
 928:Src/mc_tasks.c **** __weak void TSK_SafetyTask(void)
 929:Src/mc_tasks.c **** {
 930:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_SafetyTask 0 */
 931:Src/mc_tasks.c **** 
 932:Src/mc_tasks.c ****   /* USER CODE END TSK_SafetyTask 0 */
 933:Src/mc_tasks.c ****   if (1U == bMCBootCompleted)
 934:Src/mc_tasks.c ****   {
 935:Src/mc_tasks.c ****     TSK_SafetyTask_PWMOFF(M1);
 936:Src/mc_tasks.c ****     /* User conversion execution */
 937:Src/mc_tasks.c ****     RCM_ExecUserConv();
 938:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_SafetyTask 1 */
 939:Src/mc_tasks.c **** 
 940:Src/mc_tasks.c ****   /* USER CODE END TSK_SafetyTask 1 */
 941:Src/mc_tasks.c ****   }
 942:Src/mc_tasks.c **** }
 943:Src/mc_tasks.c **** 
 944:Src/mc_tasks.c **** /**
 945:Src/mc_tasks.c ****   * @brief  Safety task implementation if  MC.ON_OVER_VOLTAGE == TURN_OFF_PWM
 946:Src/mc_tasks.c ****   * @param  bMotor Motor reference number defined
 947:Src/mc_tasks.c ****   *         \link Motors_reference_number here \endlink
 948:Src/mc_tasks.c ****   * @retval None
 949:Src/mc_tasks.c ****   */
 950:Src/mc_tasks.c **** __weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
 951:Src/mc_tasks.c **** {
 1807              		.loc 1 951 1 view -0
 1808              		.cfi_startproc
 1809              		@ args = 0, pretend = 0, frame = 0
 1810              		@ frame_needed = 0, uses_anonymous_args = 0
 1811              		.loc 1 951 1 is_stmt 0 view .LVU473
 1812 0000 70B5     		push	{r4, r5, r6, lr}
 1813              		.cfi_def_cfa_offset 16
 1814              		.cfi_offset 4, -16
 1815              		.cfi_offset 5, -12
 1816              		.cfi_offset 6, -8
ARM GAS  /tmp/ccxOD3Ta.s 			page 55


 1817              		.cfi_offset 14, -4
 1818 0002 0546     		mov	r5, r0
 952:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 0 */
 953:Src/mc_tasks.c **** 
 954:Src/mc_tasks.c ****   /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
 955:Src/mc_tasks.c ****   uint16_t CodeReturn = MC_NO_ERROR;
 1819              		.loc 1 955 3 is_stmt 1 view .LVU474
 1820              	.LVL161:
 956:Src/mc_tasks.c ****   uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
 1821              		.loc 1 956 3 view .LVU475
 957:Src/mc_tasks.c **** 
 958:Src/mc_tasks.c ****   CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if
 1822              		.loc 1 958 3 view .LVU476
 1823              		.loc 1 958 35 is_stmt 0 view .LVU477
 1824 0004 1C4B     		ldr	r3, .L117
 1825 0006 53F82000 		ldr	r0, [r3, r0, lsl #2]
 1826              	.LVL162:
 1827              		.loc 1 958 35 view .LVU478
 1828 000a FFF7FEFF 		bl	NTC_CalcAvTemp
 1829              	.LVL163:
 1830              		.loc 1 958 33 view .LVU479
 1831 000e 00F00E04 		and	r4, r0, #14
 1832              	.LVL164:
 959:Src/mc_tasks.c ****   CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. I
 1833              		.loc 1 959 3 is_stmt 1 view .LVU480
 1834              		.loc 1 959 17 is_stmt 0 view .LVU481
 1835 0012 1A4B     		ldr	r3, .L117+4
 1836 0014 53F82500 		ldr	r0, [r3, r5, lsl #2]
 1837 0018 FFF7FEFF 		bl	PWMC_CheckOverCurrent
 1838              	.LVL165:
 1839              		.loc 1 959 14 view .LVU482
 1840 001c 0443     		orrs	r4, r4, r0
 1841              	.LVL166:
 1842              		.loc 1 959 14 view .LVU483
 1843 001e A4B2     		uxth	r4, r4
 1844              	.LVL167:
 960:Src/mc_tasks.c ****                                                                                  (for STM32F30x can
 961:Src/mc_tasks.c ****   if(M1 == bMotor)
 1845              		.loc 1 961 3 is_stmt 1 view .LVU484
 1846              		.loc 1 961 5 is_stmt 0 view .LVU485
 1847 0020 6DB1     		cbz	r5, .L114
 1848              	.L110:
 962:Src/mc_tasks.c ****   {
 963:Src/mc_tasks.c ****     CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
 964:Src/mc_tasks.c ****   }
 965:Src/mc_tasks.c ****   MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* process faults */
 1849              		.loc 1 965 3 is_stmt 1 view .LVU486
 1850 0022 174E     		ldr	r6, .L117+8
 1851 0024 06EB4516 		add	r6, r6, r5, lsl #5
 1852 0028 E243     		mvns	r2, r4
 1853 002a 92B2     		uxth	r2, r2
 1854 002c 2146     		mov	r1, r4
 1855 002e 3046     		mov	r0, r6
 1856 0030 FFF7FEFF 		bl	MCI_FaultProcessing
 1857              	.LVL168:
 966:Src/mc_tasks.c ****   if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 1858              		.loc 1 966 3 view .LVU487
ARM GAS  /tmp/ccxOD3Ta.s 			page 56


 1859              		.loc 1 966 7 is_stmt 0 view .LVU488
 1860 0034 3046     		mov	r0, r6
 1861 0036 FFF7FEFF 		bl	MCI_GetFaultState
 1862              	.LVL169:
 1863              		.loc 1 966 6 view .LVU489
 1864 003a 38B9     		cbnz	r0, .L115
 1865              	.L109:
 967:Src/mc_tasks.c ****   {
 968:Src/mc_tasks.c ****     PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 969:Src/mc_tasks.c ****     if (MCPA_UART_A.Mark != 0)
 970:Src/mc_tasks.c ****     {
 971:Src/mc_tasks.c ****       MCPA_flushDataLog (&MCPA_UART_A);
 972:Src/mc_tasks.c ****     }
 973:Src/mc_tasks.c ****     FOC_Clear(bMotor);
 974:Src/mc_tasks.c ****     PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 975:Src/mc_tasks.c ****     /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 1 */
 976:Src/mc_tasks.c **** 
 977:Src/mc_tasks.c ****     /* USER CODE END TSK_SafetyTask_PWMOFF 1 */
 978:Src/mc_tasks.c ****   }
 979:Src/mc_tasks.c ****   else
 980:Src/mc_tasks.c ****   {
 981:Src/mc_tasks.c ****     /* no errors */
 982:Src/mc_tasks.c ****   }
 983:Src/mc_tasks.c **** 
 984:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */
 985:Src/mc_tasks.c **** 
 986:Src/mc_tasks.c ****   /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
 987:Src/mc_tasks.c **** }
 1866              		.loc 1 987 1 view .LVU490
 1867 003c 70BD     		pop	{r4, r5, r6, pc}
 1868              	.LVL170:
 1869              	.L114:
 963:Src/mc_tasks.c ****   }
 1870              		.loc 1 963 5 is_stmt 1 view .LVU491
 963:Src/mc_tasks.c ****   }
 1871              		.loc 1 963 37 is_stmt 0 view .LVU492
 1872 003e 1148     		ldr	r0, .L117+12
 1873 0040 FFF7FEFF 		bl	RVBS_CalcAvVbus
 1874              	.LVL171:
 963:Src/mc_tasks.c ****   }
 1875              		.loc 1 963 35 view .LVU493
 1876 0044 00F00E00 		and	r0, r0, #14
 963:Src/mc_tasks.c ****   }
 1877              		.loc 1 963 16 view .LVU494
 1878 0048 0443     		orrs	r4, r4, r0
 1879              	.LVL172:
 963:Src/mc_tasks.c ****   }
 1880              		.loc 1 963 16 view .LVU495
 1881 004a EAE7     		b	.L110
 1882              	.L115:
 968:Src/mc_tasks.c ****     if (MCPA_UART_A.Mark != 0)
 1883              		.loc 1 968 5 is_stmt 1 view .LVU496
 1884 004c 0B4B     		ldr	r3, .L117+4
 1885 004e 53F82500 		ldr	r0, [r3, r5, lsl #2]
 1886 0052 FFF7FEFF 		bl	PWMC_SwitchOffPWM
 1887              	.LVL173:
 969:Src/mc_tasks.c ****     {
ARM GAS  /tmp/ccxOD3Ta.s 			page 57


 1888              		.loc 1 969 5 view .LVU497
 969:Src/mc_tasks.c ****     {
 1889              		.loc 1 969 20 is_stmt 0 view .LVU498
 1890 0056 0C4B     		ldr	r3, .L117+16
 1891 0058 93F82930 		ldrb	r3, [r3, #41]	@ zero_extendqisi2
 969:Src/mc_tasks.c ****     {
 1892              		.loc 1 969 8 view .LVU499
 1893 005c 43B9     		cbnz	r3, .L116
 1894              	.L112:
 973:Src/mc_tasks.c ****     PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 1895              		.loc 1 973 5 is_stmt 1 view .LVU500
 1896 005e 2846     		mov	r0, r5
 1897 0060 FFF7FEFF 		bl	FOC_Clear
 1898              	.LVL174:
 974:Src/mc_tasks.c ****     /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 1 */
 1899              		.loc 1 974 5 view .LVU501
 1900 0064 094B     		ldr	r3, .L117+20
 1901 0066 53F82500 		ldr	r0, [r3, r5, lsl #2]
 1902 006a FFF7FEFF 		bl	PQD_Clear
 1903              	.LVL175:
 982:Src/mc_tasks.c **** 
 1904              		.loc 1 982 3 view .LVU502
 1905              		.loc 1 987 1 is_stmt 0 view .LVU503
 1906 006e E5E7     		b	.L109
 1907              	.L116:
 971:Src/mc_tasks.c ****     }
 1908              		.loc 1 971 7 is_stmt 1 view .LVU504
 1909 0070 0548     		ldr	r0, .L117+16
 1910 0072 FFF7FEFF 		bl	MCPA_flushDataLog
 1911              	.LVL176:
 1912 0076 F2E7     		b	.L112
 1913              	.L118:
 1914              		.align	2
 1915              	.L117:
 1916 0078 00000000 		.word	pTemperatureSensor
 1917 007c 00000000 		.word	.LANCHOR1
 1918 0080 00000000 		.word	Mci
 1919 0084 00000000 		.word	BusVoltageSensor_M1
 1920 0088 00000000 		.word	MCPA_UART_A
 1921 008c 00000000 		.word	pMPM
 1922              		.cfi_endproc
 1923              	.LFE1637:
 1925              		.section	.text.TSK_SafetyTask,"ax",%progbits
 1926              		.align	1
 1927              		.weak	TSK_SafetyTask
 1928              		.syntax unified
 1929              		.thumb
 1930              		.thumb_func
 1931              		.fpu fpv4-sp-d16
 1933              	TSK_SafetyTask:
 1934              	.LFB1636:
 929:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_SafetyTask 0 */
 1935              		.loc 1 929 1 view -0
 1936              		.cfi_startproc
 1937              		@ args = 0, pretend = 0, frame = 0
 1938              		@ frame_needed = 0, uses_anonymous_args = 0
 1939 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/ccxOD3Ta.s 			page 58


 1940              		.cfi_def_cfa_offset 8
 1941              		.cfi_offset 3, -8
 1942              		.cfi_offset 14, -4
 933:Src/mc_tasks.c ****   {
 1943              		.loc 1 933 3 view .LVU506
 933:Src/mc_tasks.c ****   {
 1944              		.loc 1 933 10 is_stmt 0 view .LVU507
 1945 0002 064B     		ldr	r3, .L123
 1946 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1947 0006 DBB2     		uxtb	r3, r3
 933:Src/mc_tasks.c ****   {
 1948              		.loc 1 933 6 view .LVU508
 1949 0008 012B     		cmp	r3, #1
 1950 000a 00D0     		beq	.L122
 1951              	.L119:
 942:Src/mc_tasks.c **** 
 1952              		.loc 1 942 1 view .LVU509
 1953 000c 08BD     		pop	{r3, pc}
 1954              	.L122:
 935:Src/mc_tasks.c ****     /* User conversion execution */
 1955              		.loc 1 935 5 is_stmt 1 view .LVU510
 1956 000e 0020     		movs	r0, #0
 1957 0010 FFF7FEFF 		bl	TSK_SafetyTask_PWMOFF
 1958              	.LVL177:
 937:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_SafetyTask 1 */
 1959              		.loc 1 937 5 view .LVU511
 1960 0014 FFF7FEFF 		bl	RCM_ExecUserConv
 1961              	.LVL178:
 942:Src/mc_tasks.c **** 
 1962              		.loc 1 942 1 is_stmt 0 view .LVU512
 1963 0018 F8E7     		b	.L119
 1964              	.L124:
 1965 001a 00BF     		.align	2
 1966              	.L123:
 1967 001c 00000000 		.word	.LANCHOR2
 1968              		.cfi_endproc
 1969              	.LFE1636:
 1971              		.section	.text.MC_RunMotorControlTasks,"ax",%progbits
 1972              		.align	1
 1973              		.weak	MC_RunMotorControlTasks
 1974              		.syntax unified
 1975              		.thumb
 1976              		.thumb_func
 1977              		.fpu fpv4-sp-d16
 1979              	MC_RunMotorControlTasks:
 1980              	.LFB1623:
 223:Src/mc_tasks.c ****   if (0U == bMCBootCompleted)
 1981              		.loc 1 223 1 is_stmt 1 view -0
 1982              		.cfi_startproc
 1983              		@ args = 0, pretend = 0, frame = 0
 1984              		@ frame_needed = 0, uses_anonymous_args = 0
 1985 0000 08B5     		push	{r3, lr}
 1986              		.cfi_def_cfa_offset 8
 1987              		.cfi_offset 3, -8
 1988              		.cfi_offset 14, -4
 224:Src/mc_tasks.c ****   {
 1989              		.loc 1 224 3 view .LVU514
ARM GAS  /tmp/ccxOD3Ta.s 			page 59


 224:Src/mc_tasks.c ****   {
 1990              		.loc 1 224 10 is_stmt 0 view .LVU515
 1991 0002 044B     		ldr	r3, .L129
 1992 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 224:Src/mc_tasks.c ****   {
 1993              		.loc 1 224 6 view .LVU516
 1994 0006 03B9     		cbnz	r3, .L128
 1995              	.L125:
 238:Src/mc_tasks.c **** 
 1996              		.loc 1 238 1 view .LVU517
 1997 0008 08BD     		pop	{r3, pc}
 1998              	.L128:
 231:Src/mc_tasks.c **** 
 1999              		.loc 1 231 5 is_stmt 1 view .LVU518
 2000 000a FFF7FEFF 		bl	MC_Scheduler
 2001              	.LVL179:
 235:Src/mc_tasks.c **** 
 2002              		.loc 1 235 5 view .LVU519
 2003 000e FFF7FEFF 		bl	TSK_SafetyTask
 2004              	.LVL180:
 238:Src/mc_tasks.c **** 
 2005              		.loc 1 238 1 is_stmt 0 view .LVU520
 2006 0012 F9E7     		b	.L125
 2007              	.L130:
 2008              		.align	2
 2009              	.L129:
 2010 0014 00000000 		.word	.LANCHOR2
 2011              		.cfi_endproc
 2012              	.LFE1623:
 2014              		.section	.text.GetMCI,"ax",%progbits
 2015              		.align	1
 2016              		.weak	GetMCI
 2017              		.syntax unified
 2018              		.thumb
 2019              		.thumb_func
 2020              		.fpu fpv4-sp-d16
 2022              	GetMCI:
 2023              	.LVL181:
 2024              	.LFB1638:
 988:Src/mc_tasks.c **** 
 989:Src/mc_tasks.c **** /**
 990:Src/mc_tasks.c ****   * @brief  This function returns the reference of the MCInterface relative to
 991:Src/mc_tasks.c ****   *         the selected drive.
 992:Src/mc_tasks.c ****   * @param  bMotor Motor reference number defined
 993:Src/mc_tasks.c ****   *         \link Motors_reference_number here \endlink
 994:Src/mc_tasks.c ****   * @retval MCI_Handle_t * Reference to MCInterface relative to the selected drive.
 995:Src/mc_tasks.c ****   *         Note: it can be MC_NULL if MCInterface of selected drive is not
 996:Src/mc_tasks.c ****   *         allocated.
 997:Src/mc_tasks.c ****   */
 998:Src/mc_tasks.c **** __weak MCI_Handle_t * GetMCI(uint8_t bMotor)
 999:Src/mc_tasks.c **** {
 2025              		.loc 1 999 1 is_stmt 1 view -0
 2026              		.cfi_startproc
 2027              		@ args = 0, pretend = 0, frame = 0
 2028              		@ frame_needed = 0, uses_anonymous_args = 0
 2029              		@ link register save eliminated.
1000:Src/mc_tasks.c ****   MCI_Handle_t * retVal = MC_NULL;
ARM GAS  /tmp/ccxOD3Ta.s 			page 60


 2030              		.loc 1 1000 3 view .LVU522
1001:Src/mc_tasks.c ****   if (bMotor < (uint8_t)NBR_OF_MOTORS)
 2031              		.loc 1 1001 3 view .LVU523
 2032              		.loc 1 1001 6 is_stmt 0 view .LVU524
 2033 0000 0346     		mov	r3, r0
 2034 0002 18B9     		cbnz	r0, .L133
1002:Src/mc_tasks.c ****   {
1003:Src/mc_tasks.c ****     retVal = &Mci[bMotor];
 2035              		.loc 1 1003 5 is_stmt 1 view .LVU525
 2036              		.loc 1 1003 12 is_stmt 0 view .LVU526
 2037 0004 0248     		ldr	r0, .L134
 2038              	.LVL182:
 2039              		.loc 1 1003 12 view .LVU527
 2040 0006 00EB4310 		add	r0, r0, r3, lsl #5
 2041              	.LVL183:
 2042              		.loc 1 1003 12 view .LVU528
 2043 000a 7047     		bx	lr
 2044              	.LVL184:
 2045              	.L133:
1000:Src/mc_tasks.c ****   if (bMotor < (uint8_t)NBR_OF_MOTORS)
 2046              		.loc 1 1000 18 view .LVU529
 2047 000c 0020     		movs	r0, #0
 2048              	.LVL185:
1004:Src/mc_tasks.c ****   }
1005:Src/mc_tasks.c ****   return (retVal);
 2049              		.loc 1 1005 3 is_stmt 1 view .LVU530
1006:Src/mc_tasks.c **** }
 2050              		.loc 1 1006 1 is_stmt 0 view .LVU531
 2051 000e 7047     		bx	lr
 2052              	.L135:
 2053              		.align	2
 2054              	.L134:
 2055 0010 00000000 		.word	Mci
 2056              		.cfi_endproc
 2057              	.LFE1638:
 2059              		.section	.text.TSK_HardwareFaultTask,"ax",%progbits
 2060              		.align	1
 2061              		.weak	TSK_HardwareFaultTask
 2062              		.syntax unified
 2063              		.thumb
 2064              		.thumb_func
 2065              		.fpu fpv4-sp-d16
 2067              	TSK_HardwareFaultTask:
 2068              	.LFB1639:
1007:Src/mc_tasks.c **** 
1008:Src/mc_tasks.c **** /**
1009:Src/mc_tasks.c ****   * @brief  Puts the Motor Control subsystem in in safety conditions on a Hard Fault
1010:Src/mc_tasks.c ****   *
1011:Src/mc_tasks.c ****   *  This function is to be executed when a general hardware failure has been detected
1012:Src/mc_tasks.c ****   * by the microcontroller and is used to put the system in safety condition.
1013:Src/mc_tasks.c ****   */
1014:Src/mc_tasks.c **** __weak void TSK_HardwareFaultTask(void)
1015:Src/mc_tasks.c **** {
 2069              		.loc 1 1015 1 is_stmt 1 view -0
 2070              		.cfi_startproc
 2071              		@ args = 0, pretend = 0, frame = 0
 2072              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccxOD3Ta.s 			page 61


 2073 0000 08B5     		push	{r3, lr}
 2074              		.cfi_def_cfa_offset 8
 2075              		.cfi_offset 3, -8
 2076              		.cfi_offset 14, -4
1016:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_HardwareFaultTask 0 */
1017:Src/mc_tasks.c **** 
1018:Src/mc_tasks.c ****   /* USER CODE END TSK_HardwareFaultTask 0 */
1019:Src/mc_tasks.c ****   R3_2_SwitchOffPWM(pwmcHandle[M1]);
 2077              		.loc 1 1019 3 view .LVU533
 2078 0002 054B     		ldr	r3, .L138
 2079 0004 1868     		ldr	r0, [r3]
 2080 0006 FFF7FEFF 		bl	R3_2_SwitchOffPWM
 2081              	.LVL186:
1020:Src/mc_tasks.c ****   MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 2082              		.loc 1 1020 3 view .LVU534
 2083 000a 0022     		movs	r2, #0
 2084 000c 8021     		movs	r1, #128
 2085 000e 0348     		ldr	r0, .L138+4
 2086 0010 FFF7FEFF 		bl	MCI_FaultProcessing
 2087              	.LVL187:
1021:Src/mc_tasks.c **** 
1022:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_HardwareFaultTask 1 */
1023:Src/mc_tasks.c **** 
1024:Src/mc_tasks.c ****   /* USER CODE END TSK_HardwareFaultTask 1 */
1025:Src/mc_tasks.c **** }
 2088              		.loc 1 1025 1 is_stmt 0 view .LVU535
 2089 0014 08BD     		pop	{r3, pc}
 2090              	.L139:
 2091 0016 00BF     		.align	2
 2092              	.L138:
 2093 0018 00000000 		.word	.LANCHOR1
 2094 001c 00000000 		.word	Mci
 2095              		.cfi_endproc
 2096              	.LFE1639:
 2098              		.section	.text.UI_HandleStartStopButton_cb,"ax",%progbits
 2099              		.align	1
 2100              		.weak	UI_HandleStartStopButton_cb
 2101              		.syntax unified
 2102              		.thumb
 2103              		.thumb_func
 2104              		.fpu fpv4-sp-d16
 2106              	UI_HandleStartStopButton_cb:
 2107              	.LFB1640:
1026:Src/mc_tasks.c **** 
1027:Src/mc_tasks.c **** __weak void UI_HandleStartStopButton_cb (void)
1028:Src/mc_tasks.c **** {
 2108              		.loc 1 1028 1 is_stmt 1 view -0
 2109              		.cfi_startproc
 2110              		@ args = 0, pretend = 0, frame = 0
 2111              		@ frame_needed = 0, uses_anonymous_args = 0
 2112 0000 08B5     		push	{r3, lr}
 2113              		.cfi_def_cfa_offset 8
 2114              		.cfi_offset 3, -8
 2115              		.cfi_offset 14, -4
1029:Src/mc_tasks.c **** /* USER CODE BEGIN START_STOP_BTN */
1030:Src/mc_tasks.c ****   if (IDLE == MC_GetSTMStateMotor1())
 2116              		.loc 1 1030 3 view .LVU537
ARM GAS  /tmp/ccxOD3Ta.s 			page 62


 2117              		.loc 1 1030 15 is_stmt 0 view .LVU538
 2118 0002 FFF7FEFF 		bl	MC_GetSTMStateMotor1
 2119              	.LVL188:
 2120              		.loc 1 1030 6 view .LVU539
 2121 0006 10B9     		cbnz	r0, .L141
1031:Src/mc_tasks.c ****   {
1032:Src/mc_tasks.c ****     /* Ramp parameters should be tuned for the actual motor */
1033:Src/mc_tasks.c ****     (void)MC_StartMotor1();
 2122              		.loc 1 1033 5 is_stmt 1 view .LVU540
 2123              		.loc 1 1033 11 is_stmt 0 view .LVU541
 2124 0008 FFF7FEFF 		bl	MC_StartMotor1
 2125              	.LVL189:
 2126              	.L140:
1034:Src/mc_tasks.c ****   }
1035:Src/mc_tasks.c ****   else
1036:Src/mc_tasks.c ****   {
1037:Src/mc_tasks.c ****     (void)MC_StopMotor1();
1038:Src/mc_tasks.c ****   }
1039:Src/mc_tasks.c **** /* USER CODE END START_STOP_BTN */
1040:Src/mc_tasks.c **** }
 2127              		.loc 1 1040 1 view .LVU542
 2128 000c 08BD     		pop	{r3, pc}
 2129              	.L141:
1037:Src/mc_tasks.c ****   }
 2130              		.loc 1 1037 5 is_stmt 1 view .LVU543
1037:Src/mc_tasks.c ****   }
 2131              		.loc 1 1037 11 is_stmt 0 view .LVU544
 2132 000e FFF7FEFF 		bl	MC_StopMotor1
 2133              	.LVL190:
 2134              		.loc 1 1040 1 view .LVU545
 2135 0012 FBE7     		b	.L140
 2136              		.cfi_endproc
 2137              	.LFE1640:
 2139              		.section	.text.mc_lock_pins,"ax",%progbits
 2140              		.align	1
 2141              		.weak	mc_lock_pins
 2142              		.syntax unified
 2143              		.thumb
 2144              		.thumb_func
 2145              		.fpu fpv4-sp-d16
 2147              	mc_lock_pins:
 2148              	.LFB1641:
1041:Src/mc_tasks.c **** 
1042:Src/mc_tasks.c ****  /**
1043:Src/mc_tasks.c ****   * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
1044:Src/mc_tasks.c ****   */
1045:Src/mc_tasks.c **** __weak void mc_lock_pins (void)
1046:Src/mc_tasks.c **** {
 2149              		.loc 1 1046 1 is_stmt 1 view -0
 2150              		.cfi_startproc
 2151              		@ args = 0, pretend = 0, frame = 80
 2152              		@ frame_needed = 0, uses_anonymous_args = 0
 2153 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2154              		.cfi_def_cfa_offset 24
 2155              		.cfi_offset 4, -24
 2156              		.cfi_offset 5, -20
 2157              		.cfi_offset 6, -16
ARM GAS  /tmp/ccxOD3Ta.s 			page 63


 2158              		.cfi_offset 7, -12
 2159              		.cfi_offset 8, -8
 2160              		.cfi_offset 14, -4
 2161 0004 94B0     		sub	sp, sp, #80
 2162              		.cfi_def_cfa_offset 104
1047:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_OPAMP3_INT_GAIN_GPIO_Port, M1_OPAMP3_INT_GAIN_Pin);
 2163              		.loc 1 1047 1 view .LVU547
 2164              	.LVL191:
 2165              	.LBB54:
 2166              	.LBI54:
 2167              		.file 2 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h"
   1:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
   2:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   ******************************************************************************
   3:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @file    stm32g4xx_ll_gpio.h
   4:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @author  MCD Application Team
   5:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief   Header file of GPIO LL module.
   6:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   ******************************************************************************
   7:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @attention
   8:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *
   9:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * Copyright (c) 2019 STMicroelectronics.
  10:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * All rights reserved.
  11:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *
  12:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * in the root directory of this software component.
  14:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *
  16:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   ******************************************************************************
  17:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  18:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  19:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #ifndef STM32G4xx_LL_GPIO_H
  21:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define STM32G4xx_LL_GPIO_H
  22:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  23:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #ifdef __cplusplus
  24:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** extern "C" {
  25:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #endif
  26:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  27:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #include "stm32g4xx.h"
  29:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  30:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @addtogroup STM32G4xx_LL_Driver
  31:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
  32:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  33:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  34:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #if defined (GPIOA) || defined (GPIOB) || defined (GPIOC) || defined (GPIOD) || defined (GPIOE) || 
  35:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  36:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL GPIO
  37:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
  38:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  39:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** MISRA C:2012 deviation rule has been granted for following rules:
  40:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * Rule-18.1_d - Medium: Array pointer `GPIOx' is accessed with index [..,..]
  41:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * which may be out of array bounds [..,UNKNOWN] in following APIs:
  42:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * LL_GPIO_GetAFPin_0_7
  43:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * LL_GPIO_SetAFPin_0_7
  44:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * LL_GPIO_SetAFPin_8_15
  45:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * LL_GPIO_GetAFPin_8_15
  46:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
ARM GAS  /tmp/ccxOD3Ta.s 			page 64


  47:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  48:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Private types -------------------------------------------------------------*/
  49:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Private variables ---------------------------------------------------------*/
  50:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Private constants ---------------------------------------------------------*/
  51:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Private macros ------------------------------------------------------------*/
  52:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #if defined(USE_FULL_LL_DRIVER)
  53:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_Private_Macros GPIO Private Macros
  54:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
  55:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  56:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  57:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
  58:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
  59:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  60:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #endif /*USE_FULL_LL_DRIVER*/
  61:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  62:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Exported types ------------------------------------------------------------*/
  63:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #if defined(USE_FULL_LL_DRIVER)
  64:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_ES_INIT GPIO Exported Init structures
  65:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
  66:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  67:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  68:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
  69:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief LL GPIO Init Structure definition
  70:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  71:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** typedef struct
  72:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
  73:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   uint32_t Pin;          /*!< Specifies the GPIO pins to be configured.
  74:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               This parameter can be any value of @ref GPIO_LL_EC_PIN */
  75:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  76:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   uint32_t Mode;         /*!< Specifies the operating mode for the selected pins.
  77:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_MODE.
  78:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  79:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  80:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  81:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   uint32_t Speed;        /*!< Specifies the speed for the selected pins.
  82:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_SPEED.
  83:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  84:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  85:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  86:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   uint32_t OutputType;   /*!< Specifies the operating output type for the selected pins.
  87:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_OUTPUT.
  88:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  89:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  90:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  91:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   uint32_t Pull;         /*!< Specifies the operating Pull-up/Pull down for the selected pins.
  92:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_PULL.
  93:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  94:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  95:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  96:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   uint32_t Alternate;    /*!< Specifies the Peripheral to be connected to the selected pins.
  97:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_AF.
  98:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  99:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
 100:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** } LL_GPIO_InitTypeDef;
 101:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 102:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 103:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
ARM GAS  /tmp/ccxOD3Ta.s 			page 65


 104:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 105:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #endif /* USE_FULL_LL_DRIVER */
 106:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 107:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Exported constants --------------------------------------------------------*/
 108:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_Exported_Constants GPIO Exported Constants
 109:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 110:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 111:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 112:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_PIN PIN
 113:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 114:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 115:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_0                      GPIO_BSRR_BS0 /*!< Select pin 0 */
 116:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_1                      GPIO_BSRR_BS1 /*!< Select pin 1 */
 117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_2                      GPIO_BSRR_BS2 /*!< Select pin 2 */
 118:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_3                      GPIO_BSRR_BS3 /*!< Select pin 3 */
 119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_4                      GPIO_BSRR_BS4 /*!< Select pin 4 */
 120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_5                      GPIO_BSRR_BS5 /*!< Select pin 5 */
 121:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_6                      GPIO_BSRR_BS6 /*!< Select pin 6 */
 122:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_7                      GPIO_BSRR_BS7 /*!< Select pin 7 */
 123:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_8                      GPIO_BSRR_BS8 /*!< Select pin 8 */
 124:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_9                      GPIO_BSRR_BS9 /*!< Select pin 9 */
 125:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_10                     GPIO_BSRR_BS10 /*!< Select pin 10 */
 126:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_11                     GPIO_BSRR_BS11 /*!< Select pin 11 */
 127:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_12                     GPIO_BSRR_BS12 /*!< Select pin 12 */
 128:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_13                     GPIO_BSRR_BS13 /*!< Select pin 13 */
 129:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_14                     GPIO_BSRR_BS14 /*!< Select pin 14 */
 130:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_15                     GPIO_BSRR_BS15 /*!< Select pin 15 */
 131:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_ALL                    (GPIO_BSRR_BS0 | GPIO_BSRR_BS1  | GPIO_BSRR_BS2  | \
 132:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                                            GPIO_BSRR_BS3  | GPIO_BSRR_BS4  | GPIO_BSRR_BS5  | \
 133:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                                            GPIO_BSRR_BS6  | GPIO_BSRR_BS7  | GPIO_BSRR_BS8  | \
 134:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                                            GPIO_BSRR_BS9  | GPIO_BSRR_BS10 | GPIO_BSRR_BS11 | \
 135:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                                            GPIO_BSRR_BS12 | GPIO_BSRR_BS13 | GPIO_BSRR_BS14 | \
 136:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                                            GPIO_BSRR_BS15) /*!< Select all pins */
 137:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 138:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 139:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 140:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 141:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_MODE Mode
 142:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 143:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 144:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_MODE_INPUT                 (0x00000000U) /*!< Select input mode */
 145:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_MODE_OUTPUT                GPIO_MODER_MODE0_0  /*!< Select output mode */
 146:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_MODE_ALTERNATE             GPIO_MODER_MODE0_1  /*!< Select alternate function mode 
 147:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_MODE_ANALOG                GPIO_MODER_MODE0    /*!< Select analog mode */
 148:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 149:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 150:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 151:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 152:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_OUTPUT Output Type
 153:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 154:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 155:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_OUTPUT_PUSHPULL            (0x00000000U) /*!< Select push-pull as output type */
 156:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_OUTPUT_OPENDRAIN           GPIO_OTYPER_OT0 /*!< Select open-drain as output type */
 157:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 158:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 159:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 160:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
ARM GAS  /tmp/ccxOD3Ta.s 			page 66


 161:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_SPEED Output Speed
 162:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 163:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 164:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_LOW             (0x00000000U) /*!< Select I/O low output speed    */
 165:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_MEDIUM          GPIO_OSPEEDR_OSPEED0_0 /*!< Select I/O medium output spe
 166:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_HIGH            GPIO_OSPEEDR_OSPEED0_1 /*!< Select I/O fast output speed
 167:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_VERY_HIGH       GPIO_OSPEEDR_OSPEED0   /*!< Select I/O high output speed
 168:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 169:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 170:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 171:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_LOW                  LL_GPIO_SPEED_FREQ_LOW
 172:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_MEDIUM               LL_GPIO_SPEED_FREQ_MEDIUM
 173:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FAST                 LL_GPIO_SPEED_FREQ_HIGH
 174:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_HIGH                 LL_GPIO_SPEED_FREQ_VERY_HIGH
 175:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 176:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_PULL Pull Up Pull Down
 177:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 178:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 179:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PULL_NO                    (0x00000000U) /*!< Select I/O no pull */
 180:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PULL_UP                    GPIO_PUPDR_PUPD0_0 /*!< Select I/O pull up */
 181:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PULL_DOWN                  GPIO_PUPDR_PUPD0_1 /*!< Select I/O pull down */
 182:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 183:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 184:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 185:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 186:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_AF Alternate Function
 187:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 188:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 189:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_0                       (0x0000000U) /*!< Select alternate function 0 */
 190:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_1                       (0x0000001U) /*!< Select alternate function 1 */
 191:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_2                       (0x0000002U) /*!< Select alternate function 2 */
 192:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_3                       (0x0000003U) /*!< Select alternate function 3 */
 193:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_4                       (0x0000004U) /*!< Select alternate function 4 */
 194:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_5                       (0x0000005U) /*!< Select alternate function 5 */
 195:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_6                       (0x0000006U) /*!< Select alternate function 6 */
 196:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_7                       (0x0000007U) /*!< Select alternate function 7 */
 197:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_8                       (0x0000008U) /*!< Select alternate function 8 */
 198:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_9                       (0x0000009U) /*!< Select alternate function 9 */
 199:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_10                      (0x000000AU) /*!< Select alternate function 10 */
 200:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_11                      (0x000000BU) /*!< Select alternate function 11 */
 201:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_12                      (0x000000CU) /*!< Select alternate function 12 */
 202:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_13                      (0x000000DU) /*!< Select alternate function 13 */
 203:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_14                      (0x000000EU) /*!< Select alternate function 14 */
 204:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_15                      (0x000000FU) /*!< Select alternate function 15 */
 205:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 206:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 207:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 208:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 209:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 210:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 211:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 212:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 213:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Exported macro ------------------------------------------------------------*/
 214:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_Exported_Macros GPIO Exported Macros
 215:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 216:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 217:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
ARM GAS  /tmp/ccxOD3Ta.s 			page 67


 218:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EM_WRITE_READ Common Write and read registers Macros
 219:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 220:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 221:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 222:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 223:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Write a value in GPIO register
 224:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  __INSTANCE__ GPIO Instance
 225:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  __REG__ Register to be written
 226:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  __VALUE__ Value to be written in the register
 227:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 228:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 229:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALU
 230:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 231:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 232:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Read a value in GPIO register
 233:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  __INSTANCE__ GPIO Instance
 234:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  __REG__ Register to be read
 235:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Register value
 236:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 237:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 238:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 239:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 240:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 241:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 242:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 243:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 244:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 245:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 246:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Exported functions --------------------------------------------------------*/
 247:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_Exported_Functions GPIO Exported Functions
 248:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 249:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 250:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 251:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EF_Port_Configuration Port Configuration
 252:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 253:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 254:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 255:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 256:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Configure gpio mode for a dedicated pin on dedicated port.
 257:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   I/O mode can be Input mode, General purpose output, Alternate function mode or Analog.
 258:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 259:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll MODER        MODEy         LL_GPIO_SetPinMode
 260:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 261:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 262:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 263:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 264:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 265:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 266:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 267:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 268:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 269:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 270:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 271:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 272:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 273:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 274:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
ARM GAS  /tmp/ccxOD3Ta.s 			page 68


 275:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 276:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 277:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 278:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Mode This parameter can be one of the following values:
 279:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_INPUT
 280:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_OUTPUT
 281:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ALTERNATE
 282:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ANALOG
 283:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 284:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 285:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
 286:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 287:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(P
 288:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 289:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 290:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return gpio mode for a dedicated pin on dedicated port.
 292:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   I/O mode can be Input mode, General purpose output, Alternate function mode or Analog.
 293:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 294:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll MODER        MODEy         LL_GPIO_GetPinMode
 295:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 296:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 297:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 298:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 299:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 300:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 301:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 303:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 304:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 305:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 306:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 307:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 308:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 309:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 310:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 311:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 312:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 314:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_INPUT
 315:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_OUTPUT
 316:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ALTERNATE
 317:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ANALOG
 318:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 319:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin)
 320:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 321:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->MODER,
 322:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                              (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U))) >> (POSITION_VAL(Pin) 
 323:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 325:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 326:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Configure gpio output type for several pins on dedicated port.
 327:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Output type as to be set when gpio pin is in output or
 328:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         alternate modes. Possible type are Push-pull or Open-drain.
 329:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll OTYPER       OTy           LL_GPIO_SetPinOutputType
 330:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 331:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
ARM GAS  /tmp/ccxOD3Ta.s 			page 69


 332:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 333:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 334:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 335:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 336:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 337:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 338:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 339:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 340:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 341:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 342:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 343:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 344:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 345:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 346:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 347:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 348:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 349:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  OutputType This parameter can be one of the following values:
 350:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
 351:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
 352:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 353:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 354:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t Outpu
 355:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 356:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 357:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 358:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 359:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 360:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return gpio output type for several pins on dedicated port.
 361:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Output type as to be set when gpio pin is in output or
 362:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         alternate modes. Possible type are Push-pull or Open-drain.
 363:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 364:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll OTYPER       OTy           LL_GPIO_GetPinOutputType
 365:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 366:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 367:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 368:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 369:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 370:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 371:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 372:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 373:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 374:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 375:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 376:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 377:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 378:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 379:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 380:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 381:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 382:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 383:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 384:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 385:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
 386:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
 387:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 388:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin)
ARM GAS  /tmp/ccxOD3Ta.s 			page 70


 389:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 390:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->OTYPER, Pin) >> POSITION_VAL(Pin));
 391:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 392:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 393:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 394:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Configure gpio speed for a dedicated pin on dedicated port.
 395:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   I/O speed can be Low, Medium, Fast or High speed.
 396:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 397:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Refer to datasheet for frequency specifications and the power
 398:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         supply and load conditions for each speed.
 399:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll OSPEEDR      OSPEEDy       LL_GPIO_SetPinSpeed
 400:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 401:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 402:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 403:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 404:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 405:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 406:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 407:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 408:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 409:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 410:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 411:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 412:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 413:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 414:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 415:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 416:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 417:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 418:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Speed This parameter can be one of the following values:
 419:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_LOW
 420:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
 421:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
 422:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
 423:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 424:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 425:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
 426:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 427:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 428:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****              (Speed << (POSITION_VAL(Pin) * 2U)));
 429:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 430:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 431:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 432:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return gpio speed for a dedicated pin on dedicated port.
 433:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   I/O speed can be Low, Medium, Fast or High speed.
 434:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 435:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Refer to datasheet for frequency specifications and the power
 436:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         supply and load conditions for each speed.
 437:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll OSPEEDR      OSPEEDy       LL_GPIO_GetPinSpeed
 438:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 439:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 440:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 441:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 442:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 443:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 444:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 445:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
ARM GAS  /tmp/ccxOD3Ta.s 			page 71


 446:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 447:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 448:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 449:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 450:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 451:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 452:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 453:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 454:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 455:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 456:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 457:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_LOW
 458:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
 459:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
 460:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
 461:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 462:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin)
 463:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 464:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->OSPEEDR,
 465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                              (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U))) >> (POSITION_VAL(P
 466:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 467:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 468:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 469:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Configure gpio pull-up or pull-down for a dedicated pin on a dedicated port.
 470:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 471:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll PUPDR        PUPDy         LL_GPIO_SetPinPull
 472:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 473:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 474:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 475:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 476:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 477:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 478:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 479:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 480:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 481:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 482:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 483:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 484:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 485:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 486:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 487:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 488:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 489:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 490:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pull This parameter can be one of the following values:
 491:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_NO
 492:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_UP
 493:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_DOWN
 494:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 495:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 496:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
 497:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 498:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(P
 499:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 500:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 501:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 502:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return gpio pull-up or pull-down for a dedicated pin on a dedicated port
ARM GAS  /tmp/ccxOD3Ta.s 			page 72


 503:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 504:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll PUPDR        PUPDy         LL_GPIO_GetPinPull
 505:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 506:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 507:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 508:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 509:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 510:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 511:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 512:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 513:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 514:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 515:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 516:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 517:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 518:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 519:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 521:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 522:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 523:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 524:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_NO
 525:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_UP
 526:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_DOWN
 527:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 528:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin)
 529:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 530:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->PUPDR,
 531:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                              (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U))) >> (POSITION_VAL(Pin) 
 532:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 533:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 534:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 535:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Configure gpio alternate function of a dedicated pin from 0 to 7 for a dedicated port.
 536:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Possible values are from AF0 to AF15 depending on target.
 537:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 538:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll AFRL         AFSELy        LL_GPIO_SetAFPin_0_7
 539:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 540:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 541:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 543:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 544:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 545:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 546:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 547:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 548:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 549:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Alternate This parameter can be one of the following values:
 550:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 551:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
 552:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 553:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 554:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 555:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 556:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
 557:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
 558:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_8
 559:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_9
ARM GAS  /tmp/ccxOD3Ta.s 			page 73


 560:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_10
 561:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_11
 562:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_12
 563:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_13
 564:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_14
 565:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_15
 566:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 567:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 568:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
 569:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 570:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 571:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****              (Alternate << (POSITION_VAL(Pin) * 4U)));
 572:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 573:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 574:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 575:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return gpio alternate function of a dedicated pin from 0 to 7 for a dedicated port.
 576:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll AFRL         AFSELy        LL_GPIO_GetAFPin_0_7
 577:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 578:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 579:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 580:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 581:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 582:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 583:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 584:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 585:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 586:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 587:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 588:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 589:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
 590:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 591:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 592:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 593:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 594:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
 595:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
 596:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_8
 597:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_9
 598:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_10
 599:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_11
 600:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_12
 601:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_13
 602:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_14
 603:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_15
 604:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 605:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin)
 606:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 607:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->AFR[0],
 608:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                              (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U))) >> (POSITION_VAL(Pin) 
 609:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 610:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 611:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 612:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Configure gpio alternate function of a dedicated pin from 8 to 15 for a dedicated port.
 613:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Possible values are from AF0 to AF15 depending on target.
 614:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 615:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll AFRH         AFSELy        LL_GPIO_SetAFPin_8_15
 616:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
ARM GAS  /tmp/ccxOD3Ta.s 			page 74


 617:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 618:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 619:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 620:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 621:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 622:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 623:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 624:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 625:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 626:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Alternate This parameter can be one of the following values:
 627:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 628:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
 629:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 630:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 631:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 632:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 633:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
 634:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
 635:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_8
 636:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_9
 637:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_10
 638:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_11
 639:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_12
 640:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_13
 641:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_14
 642:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_15
 643:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 644:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 645:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
 646:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 647:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 648:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****              (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
 649:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 650:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 651:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 652:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return gpio alternate function of a dedicated pin from 8 to 15 for a dedicated port.
 653:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Possible values are from AF0 to AF15 depending on target.
 654:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll AFRH         AFSELy        LL_GPIO_GetAFPin_8_15
 655:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 656:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 657:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 658:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 659:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 660:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 661:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 662:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 663:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 664:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 665:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 666:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 667:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
 668:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 669:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 670:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 671:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 672:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
 673:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
ARM GAS  /tmp/ccxOD3Ta.s 			page 75


 674:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_8
 675:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_9
 676:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_10
 677:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_11
 678:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_12
 679:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_13
 680:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_14
 681:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_15
 682:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 683:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin)
 684:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 685:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->AFR[1],
 686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                              (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U))) >> (POSITION_VAL
 687:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 688:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 689:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 690:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 691:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Lock configuration of several pins for a dedicated port.
 692:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   When the lock sequence has been applied on a port bit, the
 693:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         value of this port bit can no longer be modified until the
 694:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         next reset.
 695:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Each lock bit freezes a specific configuration register
 696:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         (control and alternate function registers).
 697:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll LCKR         LCKK          LL_GPIO_LockPin
 698:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 699:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 700:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 701:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 702:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 703:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 704:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 705:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 706:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 707:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 708:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 709:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 710:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 711:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 713:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 715:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 716:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 717:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 718:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
 2168              		.loc 2 719 22 view .LVU548
 2169              	.LBB55:
 720:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   __IO uint32_t temp;
 2170              		.loc 2 721 3 view .LVU549
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2171              		.loc 2 722 3 view .LVU550
 2172 0006 594A     		ldr	r2, .L146
 2173 0008 5948     		ldr	r0, .L146+4
 2174 000a D061     		str	r0, [r2, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
ARM GAS  /tmp/ccxOD3Ta.s 			page 76


 2175              		.loc 2 723 3 view .LVU551
 2176 000c 0427     		movs	r7, #4
 2177 000e D761     		str	r7, [r2, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2178              		.loc 2 724 3 view .LVU552
 2179 0010 D061     		str	r0, [r2, #28]
 725:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   temp = READ_REG(GPIOx->LCKR);
 2180              		.loc 2 726 3 view .LVU553
 2181              		.loc 2 726 10 is_stmt 0 view .LVU554
 2182 0012 D369     		ldr	r3, [r2, #28]
 2183              		.loc 2 726 8 view .LVU555
 2184 0014 1393     		str	r3, [sp, #76]
 727:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2185              		.loc 2 727 3 is_stmt 1 view .LVU556
 2186 0016 139B     		ldr	r3, [sp, #76]
 2187              	.LVL192:
 2188              		.loc 2 727 3 is_stmt 0 view .LVU557
 2189              	.LBE55:
 2190              	.LBE54:
1048:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_CURR_SHUNT_W_GPIO_Port, M1_CURR_SHUNT_W_Pin);
 2191              		.loc 1 1048 1 is_stmt 1 view .LVU558
 2192              	.LBB56:
 2193              	.LBI56:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2194              		.loc 2 719 22 view .LVU559
 2195              	.LBB57:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2196              		.loc 2 721 3 view .LVU560
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2197              		.loc 2 722 3 view .LVU561
 2198 0018 4FF00115 		mov	r5, #65537
 2199 001c D561     		str	r5, [r2, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2200              		.loc 2 723 3 view .LVU562
 2201 001e 4FF0010E 		mov	lr, #1
 2202 0022 C2F81CE0 		str	lr, [r2, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2203              		.loc 2 724 3 view .LVU563
 2204 0026 D561     		str	r5, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2205              		.loc 2 726 3 view .LVU564
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2206              		.loc 2 726 10 is_stmt 0 view .LVU565
 2207 0028 D369     		ldr	r3, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2208              		.loc 2 726 8 view .LVU566
 2209 002a 1293     		str	r3, [sp, #72]
 2210              		.loc 2 727 3 is_stmt 1 view .LVU567
 2211 002c 129B     		ldr	r3, [sp, #72]
 2212              	.LVL193:
 2213              		.loc 2 727 3 is_stmt 0 view .LVU568
 2214              	.LBE57:
 2215              	.LBE56:
1049:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_OPAMP3_OUT_GPIO_Port, M1_OPAMP3_OUT_Pin);
 2216              		.loc 1 1049 1 is_stmt 1 view .LVU569
 2217              	.LBB58:
ARM GAS  /tmp/ccxOD3Ta.s 			page 77


 2218              	.LBI58:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2219              		.loc 2 719 22 view .LVU570
 2220              	.LBB59:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2221              		.loc 2 721 3 view .LVU571
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2222              		.loc 2 722 3 view .LVU572
 2223 002e 514C     		ldr	r4, .L146+8
 2224 0030 D461     		str	r4, [r2, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2225              		.loc 2 723 3 view .LVU573
 2226 0032 4FF0020C 		mov	ip, #2
 2227 0036 C2F81CC0 		str	ip, [r2, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2228              		.loc 2 724 3 view .LVU574
 2229 003a D461     		str	r4, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2230              		.loc 2 726 3 view .LVU575
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2231              		.loc 2 726 10 is_stmt 0 view .LVU576
 2232 003c D369     		ldr	r3, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2233              		.loc 2 726 8 view .LVU577
 2234 003e 1193     		str	r3, [sp, #68]
 2235              		.loc 2 727 3 is_stmt 1 view .LVU578
 2236 0040 119B     		ldr	r3, [sp, #68]
 2237              	.LVL194:
 2238              		.loc 2 727 3 is_stmt 0 view .LVU579
 2239              	.LBE59:
 2240              	.LBE58:
1050:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_ENCODER_I_GPIO_Port, M1_ENCODER_I_Pin);
 2241              		.loc 1 1050 1 is_stmt 1 view .LVU580
 2242              	.LBB60:
 2243              	.LBI60:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2244              		.loc 2 719 22 view .LVU581
 2245              	.LBB61:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2246              		.loc 2 721 3 view .LVU582
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2247              		.loc 2 722 3 view .LVU583
 2248 0042 4D49     		ldr	r1, .L146+12
 2249 0044 D161     		str	r1, [r2, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2250              		.loc 2 723 3 view .LVU584
 2251 0046 4FF48076 		mov	r6, #256
 2252 004a D661     		str	r6, [r2, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2253              		.loc 2 724 3 view .LVU585
 2254 004c D161     		str	r1, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2255              		.loc 2 726 3 view .LVU586
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2256              		.loc 2 726 10 is_stmt 0 view .LVU587
 2257 004e D369     		ldr	r3, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
ARM GAS  /tmp/ccxOD3Ta.s 			page 78


 2258              		.loc 2 726 8 view .LVU588
 2259 0050 1093     		str	r3, [sp, #64]
 2260              		.loc 2 727 3 is_stmt 1 view .LVU589
 2261 0052 109B     		ldr	r3, [sp, #64]
 2262              	.LVL195:
 2263              		.loc 2 727 3 is_stmt 0 view .LVU590
 2264              	.LBE61:
 2265              	.LBE60:
1051:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
 2266              		.loc 1 1051 1 is_stmt 1 view .LVU591
 2267              	.LBB62:
 2268              	.LBI62:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2269              		.loc 2 719 22 view .LVU592
 2270              	.LBB63:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2271              		.loc 2 721 3 view .LVU593
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2272              		.loc 2 722 3 view .LVU594
 2273 0054 4FF4A033 		mov	r3, #81920
 2274 0058 D361     		str	r3, [r2, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2275              		.loc 2 723 3 view .LVU595
 2276 005a 4FF48048 		mov	r8, #16384
 2277 005e C2F81C80 		str	r8, [r2, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2278              		.loc 2 724 3 view .LVU596
 2279 0062 D361     		str	r3, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2280              		.loc 2 726 3 view .LVU597
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2281              		.loc 2 726 10 is_stmt 0 view .LVU598
 2282 0064 D369     		ldr	r3, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2283              		.loc 2 726 8 view .LVU599
 2284 0066 0F93     		str	r3, [sp, #60]
 2285              		.loc 2 727 3 is_stmt 1 view .LVU600
 2286 0068 0F9B     		ldr	r3, [sp, #60]
 2287              	.LVL196:
 2288              		.loc 2 727 3 is_stmt 0 view .LVU601
 2289              	.LBE63:
 2290              	.LBE62:
1052:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
 2291              		.loc 1 1052 1 is_stmt 1 view .LVU602
 2292              	.LBB64:
 2293              	.LBI64:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2294              		.loc 2 719 22 view .LVU603
 2295              	.LBB65:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2296              		.loc 2 721 3 view .LVU604
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2297              		.loc 2 722 3 view .LVU605
 2298 006a 4FF09043 		mov	r3, #1207959552
 2299 006e DD61     		str	r5, [r3, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2300              		.loc 2 723 3 view .LVU606
ARM GAS  /tmp/ccxOD3Ta.s 			page 79


 2301 0070 C3F81CE0 		str	lr, [r3, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2302              		.loc 2 724 3 view .LVU607
 2303 0074 DD61     		str	r5, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2304              		.loc 2 726 3 view .LVU608
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2305              		.loc 2 726 10 is_stmt 0 view .LVU609
 2306 0076 DD69     		ldr	r5, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2307              		.loc 2 726 8 view .LVU610
 2308 0078 0E95     		str	r5, [sp, #56]
 2309              		.loc 2 727 3 is_stmt 1 view .LVU611
 2310 007a 0E9D     		ldr	r5, [sp, #56]
 2311              	.LVL197:
 2312              		.loc 2 727 3 is_stmt 0 view .LVU612
 2313              	.LBE65:
 2314              	.LBE64:
1053:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_CURR_SHUNT_U_GPIO_Port, M1_CURR_SHUNT_U_Pin);
 2315              		.loc 1 1053 1 is_stmt 1 view .LVU613
 2316              	.LBB66:
 2317              	.LBI66:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2318              		.loc 2 719 22 view .LVU614
 2319              	.LBB67:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2320              		.loc 2 721 3 view .LVU615
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2321              		.loc 2 722 3 view .LVU616
 2322 007c DC61     		str	r4, [r3, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2323              		.loc 2 723 3 view .LVU617
 2324 007e C3F81CC0 		str	ip, [r3, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2325              		.loc 2 724 3 view .LVU618
 2326 0082 DC61     		str	r4, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2327              		.loc 2 726 3 view .LVU619
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2328              		.loc 2 726 10 is_stmt 0 view .LVU620
 2329 0084 DC69     		ldr	r4, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2330              		.loc 2 726 8 view .LVU621
 2331 0086 0D94     		str	r4, [sp, #52]
 2332              		.loc 2 727 3 is_stmt 1 view .LVU622
 2333 0088 0D9C     		ldr	r4, [sp, #52]
 2334              	.LVL198:
 2335              		.loc 2 727 3 is_stmt 0 view .LVU623
 2336              	.LBE67:
 2337              	.LBE66:
1054:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_OPAMP1_INT_GAIN_GPIO_Port, M1_OPAMP1_INT_GAIN_Pin);
 2338              		.loc 1 1054 1 is_stmt 1 view .LVU624
 2339              	.LBB68:
 2340              	.LBI68:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2341              		.loc 2 719 22 view .LVU625
 2342              	.LBB69:
ARM GAS  /tmp/ccxOD3Ta.s 			page 80


 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2343              		.loc 2 721 3 view .LVU626
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2344              		.loc 2 722 3 view .LVU627
 2345 008a 3C4C     		ldr	r4, .L146+16
 2346 008c DC61     		str	r4, [r3, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2347              		.loc 2 723 3 view .LVU628
 2348 008e 0825     		movs	r5, #8
 2349 0090 DD61     		str	r5, [r3, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2350              		.loc 2 724 3 view .LVU629
 2351 0092 DC61     		str	r4, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2352              		.loc 2 726 3 view .LVU630
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2353              		.loc 2 726 10 is_stmt 0 view .LVU631
 2354 0094 DC69     		ldr	r4, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2355              		.loc 2 726 8 view .LVU632
 2356 0096 0C94     		str	r4, [sp, #48]
 2357              		.loc 2 727 3 is_stmt 1 view .LVU633
 2358 0098 0C9C     		ldr	r4, [sp, #48]
 2359              	.LVL199:
 2360              		.loc 2 727 3 is_stmt 0 view .LVU634
 2361              	.LBE69:
 2362              	.LBE68:
1055:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_OPAMP1_OUT_GPIO_Port, M1_OPAMP1_OUT_Pin);
 2363              		.loc 1 1055 1 is_stmt 1 view .LVU635
 2364              	.LBB70:
 2365              	.LBI70:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2366              		.loc 2 719 22 view .LVU636
 2367              	.LBB71:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2368              		.loc 2 721 3 view .LVU637
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2369              		.loc 2 722 3 view .LVU638
 2370 009a D861     		str	r0, [r3, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2371              		.loc 2 723 3 view .LVU639
 2372 009c DF61     		str	r7, [r3, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2373              		.loc 2 724 3 view .LVU640
 2374 009e D861     		str	r0, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2375              		.loc 2 726 3 view .LVU641
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2376              		.loc 2 726 10 is_stmt 0 view .LVU642
 2377 00a0 D869     		ldr	r0, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2378              		.loc 2 726 8 view .LVU643
 2379 00a2 0B90     		str	r0, [sp, #44]
 2380              		.loc 2 727 3 is_stmt 1 view .LVU644
 2381 00a4 0B98     		ldr	r0, [sp, #44]
 2382              	.LVL200:
 2383              		.loc 2 727 3 is_stmt 0 view .LVU645
ARM GAS  /tmp/ccxOD3Ta.s 			page 81


 2384              	.LBE71:
 2385              	.LBE70:
1056:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_OPAMP2_OUT_GPIO_Port, M1_OPAMP2_OUT_Pin);
 2386              		.loc 1 1056 1 is_stmt 1 view .LVU646
 2387              	.LBB72:
 2388              	.LBI72:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2389              		.loc 2 719 22 view .LVU647
 2390              	.LBB73:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2391              		.loc 2 721 3 view .LVU648
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2392              		.loc 2 722 3 view .LVU649
 2393 00a6 364C     		ldr	r4, .L146+20
 2394 00a8 DC61     		str	r4, [r3, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2395              		.loc 2 723 3 view .LVU650
 2396 00aa 4027     		movs	r7, #64
 2397 00ac DF61     		str	r7, [r3, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2398              		.loc 2 724 3 view .LVU651
 2399 00ae DC61     		str	r4, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2400              		.loc 2 726 3 view .LVU652
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2401              		.loc 2 726 10 is_stmt 0 view .LVU653
 2402 00b0 D869     		ldr	r0, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2403              		.loc 2 726 8 view .LVU654
 2404 00b2 0A90     		str	r0, [sp, #40]
 2405              		.loc 2 727 3 is_stmt 1 view .LVU655
 2406 00b4 0A98     		ldr	r0, [sp, #40]
 2407              	.LVL201:
 2408              		.loc 2 727 3 is_stmt 0 view .LVU656
 2409              	.LBE73:
 2410              	.LBE72:
1057:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_OPAMP2_INT_GAIN_GPIO_Port, M1_OPAMP2_INT_GAIN_Pin);
 2411              		.loc 1 1057 1 is_stmt 1 view .LVU657
 2412              	.LBB74:
 2413              	.LBI74:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2414              		.loc 2 719 22 view .LVU658
 2415              	.LBB75:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2416              		.loc 2 721 3 view .LVU659
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2417              		.loc 2 722 3 view .LVU660
 2418 00b6 3348     		ldr	r0, .L146+24
 2419 00b8 D861     		str	r0, [r3, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2420              		.loc 2 723 3 view .LVU661
 2421 00ba 2025     		movs	r5, #32
 2422 00bc DD61     		str	r5, [r3, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2423              		.loc 2 724 3 view .LVU662
 2424 00be D861     		str	r0, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
ARM GAS  /tmp/ccxOD3Ta.s 			page 82


 2425              		.loc 2 726 3 view .LVU663
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2426              		.loc 2 726 10 is_stmt 0 view .LVU664
 2427 00c0 D869     		ldr	r0, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2428              		.loc 2 726 8 view .LVU665
 2429 00c2 0990     		str	r0, [sp, #36]
 2430              		.loc 2 727 3 is_stmt 1 view .LVU666
 2431 00c4 0998     		ldr	r0, [sp, #36]
 2432              	.LVL202:
 2433              		.loc 2 727 3 is_stmt 0 view .LVU667
 2434              	.LBE75:
 2435              	.LBE74:
1058:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_CURR_SHUNT_V_GPIO_Port, M1_CURR_SHUNT_V_Pin);
 2436              		.loc 1 1058 1 is_stmt 1 view .LVU668
 2437              	.LBB76:
 2438              	.LBI76:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2439              		.loc 2 719 22 view .LVU669
 2440              	.LBB77:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2441              		.loc 2 721 3 view .LVU670
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2442              		.loc 2 722 3 view .LVU671
 2443 00c6 3048     		ldr	r0, .L146+28
 2444 00c8 D861     		str	r0, [r3, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2445              		.loc 2 723 3 view .LVU672
 2446 00ca 8025     		movs	r5, #128
 2447 00cc DD61     		str	r5, [r3, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2448              		.loc 2 724 3 view .LVU673
 2449 00ce D861     		str	r0, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2450              		.loc 2 726 3 view .LVU674
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2451              		.loc 2 726 10 is_stmt 0 view .LVU675
 2452 00d0 D3F81CC0 		ldr	ip, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2453              		.loc 2 726 8 view .LVU676
 2454 00d4 CDF820C0 		str	ip, [sp, #32]
 2455              		.loc 2 727 3 is_stmt 1 view .LVU677
 2456 00d8 DDF820C0 		ldr	ip, [sp, #32]
 2457              	.LVL203:
 2458              		.loc 2 727 3 is_stmt 0 view .LVU678
 2459              	.LBE77:
 2460              	.LBE76:
1059:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_ENCODER_A_GPIO_Port, M1_ENCODER_A_Pin);
 2461              		.loc 1 1059 1 is_stmt 1 view .LVU679
 2462              	.LBB78:
 2463              	.LBI78:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2464              		.loc 2 719 22 view .LVU680
 2465              	.LBB79:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2466              		.loc 2 721 3 view .LVU681
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
ARM GAS  /tmp/ccxOD3Ta.s 			page 83


 2467              		.loc 2 722 3 view .LVU682
 2468 00dc D461     		str	r4, [r2, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2469              		.loc 2 723 3 view .LVU683
 2470 00de D761     		str	r7, [r2, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2471              		.loc 2 724 3 view .LVU684
 2472 00e0 D461     		str	r4, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2473              		.loc 2 726 3 view .LVU685
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2474              		.loc 2 726 10 is_stmt 0 view .LVU686
 2475 00e2 D469     		ldr	r4, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2476              		.loc 2 726 8 view .LVU687
 2477 00e4 0794     		str	r4, [sp, #28]
 2478              		.loc 2 727 3 is_stmt 1 view .LVU688
 2479 00e6 079C     		ldr	r4, [sp, #28]
 2480              	.LVL204:
 2481              		.loc 2 727 3 is_stmt 0 view .LVU689
 2482              	.LBE79:
 2483              	.LBE78:
1060:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_ENCODER_B_GPIO_Port, M1_ENCODER_B_Pin);
 2484              		.loc 1 1060 1 is_stmt 1 view .LVU690
 2485              	.LBB80:
 2486              	.LBI80:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2487              		.loc 2 719 22 view .LVU691
 2488              	.LBB81:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2489              		.loc 2 721 3 view .LVU692
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2490              		.loc 2 722 3 view .LVU693
 2491 00e8 D061     		str	r0, [r2, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2492              		.loc 2 723 3 view .LVU694
 2493 00ea D561     		str	r5, [r2, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2494              		.loc 2 724 3 view .LVU695
 2495 00ec D061     		str	r0, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2496              		.loc 2 726 3 view .LVU696
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2497              		.loc 2 726 10 is_stmt 0 view .LVU697
 2498 00ee D069     		ldr	r0, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2499              		.loc 2 726 8 view .LVU698
 2500 00f0 0690     		str	r0, [sp, #24]
 2501              		.loc 2 727 3 is_stmt 1 view .LVU699
 2502 00f2 0698     		ldr	r0, [sp, #24]
 2503              	.LVL205:
 2504              		.loc 2 727 3 is_stmt 0 view .LVU700
 2505              	.LBE81:
 2506              	.LBE80:
1061:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_UH_GPIO_Port, M1_PWM_UH_Pin);
 2507              		.loc 1 1061 1 is_stmt 1 view .LVU701
 2508              	.LBB82:
ARM GAS  /tmp/ccxOD3Ta.s 			page 84


 2509              	.LBI82:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2510              		.loc 2 719 22 view .LVU702
 2511              	.LBB83:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2512              		.loc 2 721 3 view .LVU703
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2513              		.loc 2 722 3 view .LVU704
 2514 00f4 D961     		str	r1, [r3, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2515              		.loc 2 723 3 view .LVU705
 2516 00f6 DE61     		str	r6, [r3, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2517              		.loc 2 724 3 view .LVU706
 2518 00f8 D961     		str	r1, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2519              		.loc 2 726 3 view .LVU707
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2520              		.loc 2 726 10 is_stmt 0 view .LVU708
 2521 00fa D969     		ldr	r1, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2522              		.loc 2 726 8 view .LVU709
 2523 00fc 0591     		str	r1, [sp, #20]
 2524              		.loc 2 727 3 is_stmt 1 view .LVU710
 2525 00fe 0599     		ldr	r1, [sp, #20]
 2526              	.LVL206:
 2527              		.loc 2 727 3 is_stmt 0 view .LVU711
 2528              	.LBE83:
 2529              	.LBE82:
1062:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
 2530              		.loc 1 1062 1 is_stmt 1 view .LVU712
 2531              	.LBB84:
 2532              	.LBI84:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2533              		.loc 2 719 22 view .LVU713
 2534              	.LBB85:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2535              		.loc 2 721 3 view .LVU714
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2536              		.loc 2 722 3 view .LVU715
 2537 0100 4FF48131 		mov	r1, #66048
 2538 0104 D961     		str	r1, [r3, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2539              		.loc 2 723 3 view .LVU716
 2540 0106 4FF40070 		mov	r0, #512
 2541 010a D861     		str	r0, [r3, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2542              		.loc 2 724 3 view .LVU717
 2543 010c D961     		str	r1, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2544              		.loc 2 726 3 view .LVU718
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2545              		.loc 2 726 10 is_stmt 0 view .LVU719
 2546 010e D969     		ldr	r1, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2547              		.loc 2 726 8 view .LVU720
 2548 0110 0491     		str	r1, [sp, #16]
ARM GAS  /tmp/ccxOD3Ta.s 			page 85


 2549              		.loc 2 727 3 is_stmt 1 view .LVU721
 2550 0112 0499     		ldr	r1, [sp, #16]
 2551              	.LVL207:
 2552              		.loc 2 727 3 is_stmt 0 view .LVU722
 2553              	.LBE85:
 2554              	.LBE84:
1063:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
 2555              		.loc 1 1063 1 is_stmt 1 view .LVU723
 2556              	.LBB86:
 2557              	.LBI86:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2558              		.loc 2 719 22 view .LVU724
 2559              	.LBB87:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2560              		.loc 2 721 3 view .LVU725
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2561              		.loc 2 722 3 view .LVU726
 2562 0114 4FF48231 		mov	r1, #66560
 2563 0118 D961     		str	r1, [r3, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2564              		.loc 2 723 3 view .LVU727
 2565 011a 4FF48060 		mov	r0, #1024
 2566 011e D861     		str	r0, [r3, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2567              		.loc 2 724 3 view .LVU728
 2568 0120 D961     		str	r1, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2569              		.loc 2 726 3 view .LVU729
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2570              		.loc 2 726 10 is_stmt 0 view .LVU730
 2571 0122 D969     		ldr	r1, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2572              		.loc 2 726 8 view .LVU731
 2573 0124 0391     		str	r1, [sp, #12]
 2574              		.loc 2 727 3 is_stmt 1 view .LVU732
 2575 0126 0399     		ldr	r1, [sp, #12]
 2576              	.LVL208:
 2577              		.loc 2 727 3 is_stmt 0 view .LVU733
 2578              	.LBE87:
 2579              	.LBE86:
1064:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
 2580              		.loc 1 1064 1 is_stmt 1 view .LVU734
 2581              	.LBB88:
 2582              	.LBI88:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2583              		.loc 2 719 22 view .LVU735
 2584              	.LBB89:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2585              		.loc 2 721 3 view .LVU736
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2586              		.loc 2 722 3 view .LVU737
 2587 0128 4FF48831 		mov	r1, #69632
 2588 012c D961     		str	r1, [r3, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2589              		.loc 2 723 3 view .LVU738
 2590 012e 4FF48050 		mov	r0, #4096
 2591 0132 D861     		str	r0, [r3, #28]
ARM GAS  /tmp/ccxOD3Ta.s 			page 86


 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2592              		.loc 2 724 3 view .LVU739
 2593 0134 D961     		str	r1, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2594              		.loc 2 726 3 view .LVU740
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2595              		.loc 2 726 10 is_stmt 0 view .LVU741
 2596 0136 DB69     		ldr	r3, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2597              		.loc 2 726 8 view .LVU742
 2598 0138 0293     		str	r3, [sp, #8]
 2599              		.loc 2 727 3 is_stmt 1 view .LVU743
 2600 013a 029B     		ldr	r3, [sp, #8]
 2601              	.LVL209:
 2602              		.loc 2 727 3 is_stmt 0 view .LVU744
 2603              	.LBE89:
 2604              	.LBE88:
1065:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
 2605              		.loc 1 1065 1 is_stmt 1 view .LVU745
 2606              	.LBB90:
 2607              	.LBI90:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2608              		.loc 2 719 22 view .LVU746
 2609              	.LBB91:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2610              		.loc 2 721 3 view .LVU747
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2611              		.loc 2 722 3 view .LVU748
 2612 013c 4FF4C033 		mov	r3, #98304
 2613 0140 D361     		str	r3, [r2, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2614              		.loc 2 723 3 view .LVU749
 2615 0142 4FF40041 		mov	r1, #32768
 2616 0146 D161     		str	r1, [r2, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2617              		.loc 2 724 3 view .LVU750
 2618 0148 D361     		str	r3, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2619              		.loc 2 726 3 view .LVU751
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2620              		.loc 2 726 10 is_stmt 0 view .LVU752
 2621 014a D369     		ldr	r3, [r2, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2622              		.loc 2 726 8 view .LVU753
 2623 014c 0193     		str	r3, [sp, #4]
 2624              		.loc 2 727 3 is_stmt 1 view .LVU754
 2625 014e 019B     		ldr	r3, [sp, #4]
 2626              	.LVL210:
 2627              		.loc 2 727 3 is_stmt 0 view .LVU755
 2628              	.LBE91:
 2629              	.LBE90:
1066:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
 2630              		.loc 1 1066 1 is_stmt 1 view .LVU756
 2631              	.LBB92:
 2632              	.LBI92:
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 2633              		.loc 2 719 22 view .LVU757
ARM GAS  /tmp/ccxOD3Ta.s 			page 87


 2634              	.LBB93:
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2635              		.loc 2 721 3 view .LVU758
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 2636              		.loc 2 722 3 view .LVU759
 2637 0150 0E4B     		ldr	r3, .L146+32
 2638 0152 4FF49032 		mov	r2, #73728
 2639 0156 DA61     		str	r2, [r3, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 2640              		.loc 2 723 3 view .LVU760
 2641 0158 4FF40051 		mov	r1, #8192
 2642 015c D961     		str	r1, [r3, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 2643              		.loc 2 724 3 view .LVU761
 2644 015e DA61     		str	r2, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2645              		.loc 2 726 3 view .LVU762
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2646              		.loc 2 726 10 is_stmt 0 view .LVU763
 2647 0160 DB69     		ldr	r3, [r3, #28]
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 2648              		.loc 2 726 8 view .LVU764
 2649 0162 0093     		str	r3, [sp]
 2650              		.loc 2 727 3 is_stmt 1 view .LVU765
 2651 0164 009B     		ldr	r3, [sp]
 2652              	.LVL211:
 2653              		.loc 2 727 3 is_stmt 0 view .LVU766
 2654              	.LBE93:
 2655              	.LBE92:
1067:Src/mc_tasks.c **** }
 2656              		.loc 1 1067 1 view .LVU767
 2657 0166 14B0     		add	sp, sp, #80
 2658              		.cfi_def_cfa_offset 24
 2659              		@ sp needed
 2660 0168 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2661              	.L147:
 2662              		.align	2
 2663              	.L146:
 2664 016c 00040048 		.word	1207960576
 2665 0170 04000100 		.word	65540
 2666 0174 02000100 		.word	65538
 2667 0178 00010100 		.word	65792
 2668 017c 08000100 		.word	65544
 2669 0180 40000100 		.word	65600
 2670 0184 20000100 		.word	65568
 2671 0188 80000100 		.word	65664
 2672 018c 00080048 		.word	1207961600
 2673              		.cfi_endproc
 2674              	.LFE1641:
 2676              		.section	.bss.FOCVars,"aw",%nobits
 2677              		.align	2
 2678              		.set	.LANCHOR0,. + 0
 2681              	FOCVars:
 2682 0000 00000000 		.space	38
 2682      00000000 
 2682      00000000 
 2682      00000000 
ARM GAS  /tmp/ccxOD3Ta.s 			page 88


 2682      00000000 
 2683              		.section	.bss.bMCBootCompleted,"aw",%nobits
 2684              		.set	.LANCHOR2,. + 0
 2687              	bMCBootCompleted:
 2688 0000 00       		.space	1
 2689              		.section	.bss.hBootCapDelayCounterM1,"aw",%nobits
 2690              		.align	1
 2691              		.set	.LANCHOR5,. + 0
 2694              	hBootCapDelayCounterM1:
 2695 0000 0000     		.space	2
 2696              		.section	.bss.hMFTaskCounterM1,"aw",%nobits
 2697              		.align	1
 2698              		.set	.LANCHOR7,. + 0
 2701              	hMFTaskCounterM1:
 2702 0000 0000     		.space	2
 2703              		.section	.bss.hStopPermanencyCounterM1,"aw",%nobits
 2704              		.align	1
 2705              		.set	.LANCHOR6,. + 0
 2708              	hStopPermanencyCounterM1:
 2709 0000 0000     		.space	2
 2710              		.section	.bss.pCLM,"aw",%nobits
 2711              		.align	2
 2712              		.set	.LANCHOR3,. + 0
 2715              	pCLM:
 2716 0000 00000000 		.space	4
 2717              		.section	.bss.pREMNG,"aw",%nobits
 2718              		.align	2
 2719              		.set	.LANCHOR4,. + 0
 2722              	pREMNG:
 2723 0000 00000000 		.space	4
 2724              		.section	.bss.pwmcHandle,"aw",%nobits
 2725              		.align	2
 2726              		.set	.LANCHOR1,. + 0
 2729              	pwmcHandle:
 2730 0000 00000000 		.space	4
 2731              		.text
 2732              	.Letext0:
 2733              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 2734              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 2735              		.file 5 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/system_stm32g4xx.h"
 2736              		.file 6 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 2737              		.file 7 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 2738              		.file 8 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_flash.h"
 2739              		.file 9 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal.h"
 2740              		.file 10 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 2741              		.file 11 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 2742              		.file 12 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 2743              		.file 13 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/mc_type.h"
 2744              		.file 14 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/pid_regulator.h"
 2745              		.file 15 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h"
 2746              		.file 16 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h"
 2747              		.file 17 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/virtual_speed_sensor.h"
 2748              		.file 18 "Inc/regular_conversion_manager.h"
 2749              		.file 19 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/ntc_temperature_sensor.h"
 2750              		.file 20 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_speed_pos_fdbk.h"
 2751              		.file 21 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/pwm_curr_fdbk.h"
 2752              		.file 22 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/revup_ctrl.h"
ARM GAS  /tmp/ccxOD3Ta.s 			page 89


 2753              		.file 23 "Inc/mc_interface.h"
 2754              		.file 24 "Inc/mc_configuration_registers.h"
 2755              		.file 25 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h"
 2756              		.file 26 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/r_divider_bus_voltage_sensor.h"
 2757              		.file 27 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/pqd_motor_power_measurement.h"
 2758              		.file 28 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/G4xx/Inc/r3_2_g4xx_pwm_curr_fdbk.h"
 2759              		.file 29 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/ramp_ext_mngr.h"
 2760              		.file 30 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/circle_limitation.h"
 2761              		.file 31 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h"
 2762              		.file 32 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_cordic_speed_pos_fdbk.h"
 2763              		.file 33 "Inc/mc_config.h"
 2764              		.file 34 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/mcptl.h"
 2765              		.file 35 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/mcp.h"
 2766              		.file 36 "Inc/aspep.h"
 2767              		.file 37 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/mcpa.h"
 2768              		.file 38 "Inc/mcp_config.h"
 2769              		.file 39 "Inc/mc_api.h"
 2770              		.file 40 "Inc/mc_math.h"
 2771              		.file 41 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/pwm_common.h"
ARM GAS  /tmp/ccxOD3Ta.s 			page 90


DEFINED SYMBOLS
                            *ABS*:0000000000000000 mc_tasks.c
     /tmp/ccxOD3Ta.s:18     .text.FOC_Clear:0000000000000000 $t
     /tmp/ccxOD3Ta.s:26     .text.FOC_Clear:0000000000000000 FOC_Clear
     /tmp/ccxOD3Ta.s:120    .text.FOC_Clear:0000000000000078 $d
     /tmp/ccxOD3Ta.s:129    .text.MCboot:0000000000000000 $t
     /tmp/ccxOD3Ta.s:136    .text.MCboot:0000000000000000 MCboot
     /tmp/ccxOD3Ta.s:327    .text.MCboot:00000000000000f0 $d
     /tmp/ccxOD3Ta.s:353    .text.FOC_InitAdditionalMethods:0000000000000000 $t
     /tmp/ccxOD3Ta.s:360    .text.FOC_InitAdditionalMethods:0000000000000000 FOC_InitAdditionalMethods
     /tmp/ccxOD3Ta.s:376    .text.FOC_CalcCurrRef:0000000000000000 $t
     /tmp/ccxOD3Ta.s:383    .text.FOC_CalcCurrRef:0000000000000000 FOC_CalcCurrRef
     /tmp/ccxOD3Ta.s:428    .text.FOC_CalcCurrRef:000000000000002c $d
     /tmp/ccxOD3Ta.s:434    .text.TSK_SetChargeBootCapDelayM1:0000000000000000 $t
     /tmp/ccxOD3Ta.s:441    .text.TSK_SetChargeBootCapDelayM1:0000000000000000 TSK_SetChargeBootCapDelayM1
     /tmp/ccxOD3Ta.s:458    .text.TSK_SetChargeBootCapDelayM1:0000000000000008 $d
     /tmp/ccxOD3Ta.s:463    .text.TSK_ChargeBootCapDelayHasElapsedM1:0000000000000000 $t
     /tmp/ccxOD3Ta.s:470    .text.TSK_ChargeBootCapDelayHasElapsedM1:0000000000000000 TSK_ChargeBootCapDelayHasElapsedM1
     /tmp/ccxOD3Ta.s:499    .text.TSK_ChargeBootCapDelayHasElapsedM1:0000000000000010 $d
     /tmp/ccxOD3Ta.s:504    .text.TSK_SetStopPermanencyTimeM1:0000000000000000 $t
     /tmp/ccxOD3Ta.s:511    .text.TSK_SetStopPermanencyTimeM1:0000000000000000 TSK_SetStopPermanencyTimeM1
     /tmp/ccxOD3Ta.s:528    .text.TSK_SetStopPermanencyTimeM1:0000000000000008 $d
     /tmp/ccxOD3Ta.s:533    .text.TSK_MF_StopProcessing:0000000000000000 $t
     /tmp/ccxOD3Ta.s:540    .text.TSK_MF_StopProcessing:0000000000000000 TSK_MF_StopProcessing
     /tmp/ccxOD3Ta.s:585    .text.TSK_MF_StopProcessing:0000000000000034 $d
     /tmp/ccxOD3Ta.s:592    .text.TSK_StopPermanencyTimeHasElapsedM1:0000000000000000 $t
     /tmp/ccxOD3Ta.s:599    .text.TSK_StopPermanencyTimeHasElapsedM1:0000000000000000 TSK_StopPermanencyTimeHasElapsedM1
     /tmp/ccxOD3Ta.s:628    .text.TSK_StopPermanencyTimeHasElapsedM1:0000000000000010 $d
     /tmp/ccxOD3Ta.s:633    .text.TSK_MediumFrequencyTaskM1:0000000000000000 $t
     /tmp/ccxOD3Ta.s:640    .text.TSK_MediumFrequencyTaskM1:0000000000000000 TSK_MediumFrequencyTaskM1
     /tmp/ccxOD3Ta.s:717    .text.TSK_MediumFrequencyTaskM1:0000000000000054 $d
     /tmp/ccxOD3Ta.s:737    .text.TSK_MediumFrequencyTaskM1:00000000000000a4 $t
     /tmp/ccxOD3Ta.s:1189   .text.TSK_MediumFrequencyTaskM1:00000000000002e0 $d
     /tmp/ccxOD3Ta.s:1207   .text.TSK_MediumFrequencyTaskM1:000000000000030c $t
     /tmp/ccxOD3Ta.s:1303   .text.TSK_MediumFrequencyTaskM1:0000000000000388 $d
     /tmp/ccxOD3Ta.s:1310   .text.MC_Scheduler:0000000000000000 $t
     /tmp/ccxOD3Ta.s:1317   .text.MC_Scheduler:0000000000000000 MC_Scheduler
     /tmp/ccxOD3Ta.s:1446   .text.MC_Scheduler:0000000000000084 $d
     /tmp/ccxOD3Ta.s:1455   .text.TSK_HighFrequencyTask:0000000000000000 $t
     /tmp/ccxOD3Ta.s:1462   .text.TSK_HighFrequencyTask:0000000000000000 TSK_HighFrequencyTask
     /tmp/ccxOD3Ta.s:1778   .text.TSK_HighFrequencyTask:0000000000000164 $d
     /tmp/ccxOD3Ta.s:1797   .text.TSK_SafetyTask_PWMOFF:0000000000000000 $t
     /tmp/ccxOD3Ta.s:1804   .text.TSK_SafetyTask_PWMOFF:0000000000000000 TSK_SafetyTask_PWMOFF
     /tmp/ccxOD3Ta.s:1916   .text.TSK_SafetyTask_PWMOFF:0000000000000078 $d
     /tmp/ccxOD3Ta.s:1926   .text.TSK_SafetyTask:0000000000000000 $t
     /tmp/ccxOD3Ta.s:1933   .text.TSK_SafetyTask:0000000000000000 TSK_SafetyTask
     /tmp/ccxOD3Ta.s:1967   .text.TSK_SafetyTask:000000000000001c $d
     /tmp/ccxOD3Ta.s:1972   .text.MC_RunMotorControlTasks:0000000000000000 $t
     /tmp/ccxOD3Ta.s:1979   .text.MC_RunMotorControlTasks:0000000000000000 MC_RunMotorControlTasks
     /tmp/ccxOD3Ta.s:2010   .text.MC_RunMotorControlTasks:0000000000000014 $d
     /tmp/ccxOD3Ta.s:2015   .text.GetMCI:0000000000000000 $t
     /tmp/ccxOD3Ta.s:2022   .text.GetMCI:0000000000000000 GetMCI
     /tmp/ccxOD3Ta.s:2055   .text.GetMCI:0000000000000010 $d
     /tmp/ccxOD3Ta.s:2060   .text.TSK_HardwareFaultTask:0000000000000000 $t
     /tmp/ccxOD3Ta.s:2067   .text.TSK_HardwareFaultTask:0000000000000000 TSK_HardwareFaultTask
     /tmp/ccxOD3Ta.s:2093   .text.TSK_HardwareFaultTask:0000000000000018 $d
     /tmp/ccxOD3Ta.s:2099   .text.UI_HandleStartStopButton_cb:0000000000000000 $t
ARM GAS  /tmp/ccxOD3Ta.s 			page 91


     /tmp/ccxOD3Ta.s:2106   .text.UI_HandleStartStopButton_cb:0000000000000000 UI_HandleStartStopButton_cb
     /tmp/ccxOD3Ta.s:2140   .text.mc_lock_pins:0000000000000000 $t
     /tmp/ccxOD3Ta.s:2147   .text.mc_lock_pins:0000000000000000 mc_lock_pins
     /tmp/ccxOD3Ta.s:2664   .text.mc_lock_pins:000000000000016c $d
     /tmp/ccxOD3Ta.s:2677   .bss.FOCVars:0000000000000000 $d
     /tmp/ccxOD3Ta.s:2681   .bss.FOCVars:0000000000000000 FOCVars
     /tmp/ccxOD3Ta.s:2687   .bss.bMCBootCompleted:0000000000000000 bMCBootCompleted
     /tmp/ccxOD3Ta.s:2688   .bss.bMCBootCompleted:0000000000000000 $d
     /tmp/ccxOD3Ta.s:2690   .bss.hBootCapDelayCounterM1:0000000000000000 $d
     /tmp/ccxOD3Ta.s:2694   .bss.hBootCapDelayCounterM1:0000000000000000 hBootCapDelayCounterM1
     /tmp/ccxOD3Ta.s:2697   .bss.hMFTaskCounterM1:0000000000000000 $d
     /tmp/ccxOD3Ta.s:2701   .bss.hMFTaskCounterM1:0000000000000000 hMFTaskCounterM1
     /tmp/ccxOD3Ta.s:2704   .bss.hStopPermanencyCounterM1:0000000000000000 $d
     /tmp/ccxOD3Ta.s:2708   .bss.hStopPermanencyCounterM1:0000000000000000 hStopPermanencyCounterM1
     /tmp/ccxOD3Ta.s:2711   .bss.pCLM:0000000000000000 $d
     /tmp/ccxOD3Ta.s:2715   .bss.pCLM:0000000000000000 pCLM
     /tmp/ccxOD3Ta.s:2718   .bss.pREMNG:0000000000000000 $d
     /tmp/ccxOD3Ta.s:2722   .bss.pREMNG:0000000000000000 pREMNG
     /tmp/ccxOD3Ta.s:2725   .bss.pwmcHandle:0000000000000000 $d
     /tmp/ccxOD3Ta.s:2729   .bss.pwmcHandle:0000000000000000 pwmcHandle

UNDEFINED SYMBOLS
PID_SetIntegralTerm
STC_Clear
PWMC_SwitchOffPWM
pPIDIq
pPIDId
pSTC
R3_2_Init
ASPEP_start
startTimers
PID_HandleInit
STO_CR_Init
STC_Init
STO_PLL_Init
VSS_Init
RUC_Init
RVBS_Init
NTC_Init
REMNG_Init
STC_GetDefaultIqdref
MCI_Init
STC_GetMecSpeedRefUnitDefault
MCI_ExecSpeedRamp
CircleLimitationM1
PWM_Handle_M1
aspepOverUartA
PIDSpeedHandle_M1
STO_CR_M1
STO_PLL_M1
VirtualSpeedSensorM1
STO_M1
RevUpControlM1
PIDIqHandle_M1
PIDIdHandle_M1
BusVoltageSensor_M1
pMPM
ARM GAS  /tmp/ccxOD3Ta.s 			page 92


TempSensor_M1
RampExtMngrHFParamsM1
Mci
STC_CalcTorqueReference
R3_2_SwitchOffPWM
PQD_Clear
STO_PLL_CalcAvrgMecSpeedUnit
STO_CR_CalcAvrgMecSpeedUnit
PQD_CalcElMotorPower
MCI_GetCurrentFaults
MCI_GetOccurredFaults
MCI_GetImposedMotorDirection
RUC_Clear
PWMC_CurrentReadingCalibr
R3_2_TurnOnLowSides
STC_SetSpeedSensor
STO_CR_Clear
STO_PLL_Clear
PWMC_SwitchOnPWM
RUC_Exec
MCI_FaultProcessing
VSS_CalcAvrgMecSpeedUnit
RUC_FirstAccelerationStageReached
STO_CR_IsObserverConverged
VSS_SetStartTransition
SPD_GetElAngle
MCM_Park
REMNG_ExecRamp
VSS_TransitionEnded
PID_GetKIDivisor
STC_ForceSpeedReferenceToCurrentSpeed
MCI_ExecBufferedCommands
VSS_Clear
MCP_ReceivedPacket
MCP_Over_UartA
STC_GetSpeedSensor
SPD_GetInstElSpeedDpp
PWMC_GetPhaseCurrents
RCM_ReadOngoingConv
RCM_ExecNextConv
MCM_Clarke
PI_Controller
Circle_Limitation
MCM_Rev_Park
PWMC_SetPhaseVoltage
VBS_GetAvBusVoltage_d
STO_CR_CalcElAngle
STO_CR_CalcAvrgElSpeedDpp
STO_PLL_CalcElAngle
STO_PLL_CalcAvrgElSpeedDpp
REMNG_RampCompleted
REMNG_Calc
VSS_CalcElAngle
MCPA_dataLog
GLOBAL_TIMESTAMP
MCPA_UART_A
NTC_CalcAvTemp
ARM GAS  /tmp/ccxOD3Ta.s 			page 93


PWMC_CheckOverCurrent
MCI_GetFaultState
RVBS_CalcAvVbus
MCPA_flushDataLog
pTemperatureSensor
RCM_ExecUserConv
MC_GetSTMStateMotor1
MC_StartMotor1
MC_StopMotor1
