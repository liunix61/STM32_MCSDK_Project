ARM GAS  /tmp/ccX12T6L.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"mc_interface.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MCI_Init,"ax",%progbits
  18              		.align	1
  19              		.weak	MCI_Init
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	MCI_Init:
  27              	.LVL0:
  28              	.LFB1437:
  29              		.file 1 "Src/mc_interface.c"
   1:Src/mc_interface.c **** 
   2:Src/mc_interface.c **** /**
   3:Src/mc_interface.c ****   ******************************************************************************
   4:Src/mc_interface.c ****   * @file    mc_interface.c
   5:Src/mc_interface.c ****   * @author  Motor Control SDK Team, ST Microelectronics
   6:Src/mc_interface.c ****   * @brief   This file provides firmware functions that implement the features
   7:Src/mc_interface.c ****   *          of the MC Interface component of the Motor Control SDK:
   8:Src/mc_interface.c ****   *
   9:Src/mc_interface.c ****   ******************************************************************************
  10:Src/mc_interface.c ****   * @attention
  11:Src/mc_interface.c ****   *
  12:Src/mc_interface.c ****   * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  13:Src/mc_interface.c ****   * All rights reserved.</center></h2>
  14:Src/mc_interface.c ****   *
  15:Src/mc_interface.c ****   * This software component is licensed by ST under Ultimate Liberty license
  16:Src/mc_interface.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  17:Src/mc_interface.c ****   * the License. You may obtain a copy of the License at:
  18:Src/mc_interface.c ****   *                             www.st.com/SLA0044
  19:Src/mc_interface.c ****   *
  20:Src/mc_interface.c ****   ******************************************************************************
  21:Src/mc_interface.c ****   * @ingroup MCInterface
  22:Src/mc_interface.c ****   */
  23:Src/mc_interface.c **** 
  24:Src/mc_interface.c **** /* Includes ------------------------------------------------------------------*/
  25:Src/mc_interface.c **** #include "mc_math.h"
  26:Src/mc_interface.c **** #include "speed_torq_ctrl.h"
  27:Src/mc_interface.c **** #include "mc_interface.h"
  28:Src/mc_interface.c **** #include "motorcontrol.h"
  29:Src/mc_interface.c **** 
ARM GAS  /tmp/ccX12T6L.s 			page 2


  30:Src/mc_interface.c **** #define ROUNDING_OFF
  31:Src/mc_interface.c **** 
  32:Src/mc_interface.c **** /** @addtogroup MCSDK
  33:Src/mc_interface.c ****   * @{
  34:Src/mc_interface.c ****   */
  35:Src/mc_interface.c **** 
  36:Src/mc_interface.c **** /** @defgroup MCInterface Motor Control Interface
  37:Src/mc_interface.c ****   * @brief MC Interface component of the Motor Control SDK
  38:Src/mc_interface.c ****   *
  39:Src/mc_interface.c ****   * @todo Document the MC Interface "module".
  40:Src/mc_interface.c ****   *
  41:Src/mc_interface.c ****   * @{
  42:Src/mc_interface.c ****   */
  43:Src/mc_interface.c **** /* Private macros ------------------------------------------------------------*/
  44:Src/mc_interface.c **** 
  45:Src/mc_interface.c **** #define round(x) ((x)>=0?(int32_t)((x)+0.5):(int32_t)((x)-0.5))
  46:Src/mc_interface.c **** 
  47:Src/mc_interface.c **** /* Functions -----------------------------------------------*/
  48:Src/mc_interface.c **** 
  49:Src/mc_interface.c **** /**
  50:Src/mc_interface.c ****   * @brief  Initializes all the object variables, usually it has to be called
  51:Src/mc_interface.c ****   *         once right after object creation. It is also used to assign the
  52:Src/mc_interface.c ****   *         state machine object, the speed and torque controller, and the FOC
  53:Src/mc_interface.c ****   *         drive object to be used by MC Interface.
  54:Src/mc_interface.c ****   * @param  pHandle pointer on the component instance to initialize.
  55:Src/mc_interface.c ****   * @param  pSTM the state machine object used by the MCI.
  56:Src/mc_interface.c ****   * @param  pSTC the speed and torque controller used by the MCI.
  57:Src/mc_interface.c ****   * @param  pFOCVars pointer to FOC vars to be used by MCI.
  58:Src/mc_interface.c ****   * @retval none.
  59:Src/mc_interface.c ****   */
  60:Src/mc_interface.c **** __weak void MCI_Init(MCI_Handle_t *pHandle, SpeednTorqCtrl_Handle_t *pSTC, pFOCVars_t pFOCVars, PWM
  61:Src/mc_interface.c **** {
  30              		.loc 1 61 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  62:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
  63:Src/mc_interface.c ****   if (MC_NULL == pHandle)
  64:Src/mc_interface.c ****   {
  65:Src/mc_interface.c ****     /* Nothing to do */
  66:Src/mc_interface.c ****   }
  67:Src/mc_interface.c ****   else
  68:Src/mc_interface.c ****   {
  69:Src/mc_interface.c **** #endif
  70:Src/mc_interface.c ****     pHandle->pSTC = pSTC;
  35              		.loc 1 70 5 view .LVU1
  36              		.loc 1 70 19 is_stmt 0 view .LVU2
  37 0000 0160     		str	r1, [r0]
  71:Src/mc_interface.c ****     pHandle->pFOCVars = pFOCVars;
  38              		.loc 1 71 5 is_stmt 1 view .LVU3
  39              		.loc 1 71 23 is_stmt 0 view .LVU4
  40 0002 4260     		str	r2, [r0, #4]
  72:Src/mc_interface.c ****     pHandle->pPWM = pPWMHandle;
  41              		.loc 1 72 5 is_stmt 1 view .LVU5
  42              		.loc 1 72 19 is_stmt 0 view .LVU6
  43 0004 8360     		str	r3, [r0, #8]
ARM GAS  /tmp/ccX12T6L.s 			page 3


  73:Src/mc_interface.c **** 
  74:Src/mc_interface.c ****     /* Buffer related initialization */
  75:Src/mc_interface.c ****     pHandle->lastCommand = MCI_NOCOMMANDSYET;
  44              		.loc 1 75 5 is_stmt 1 view .LVU7
  45              		.loc 1 75 26 is_stmt 0 view .LVU8
  46 0006 0023     		movs	r3, #0
  47              	.LVL1:
  48              		.loc 1 75 26 view .LVU9
  49 0008 0373     		strb	r3, [r0, #12]
  76:Src/mc_interface.c ****     pHandle->hFinalSpeed = 0;
  50              		.loc 1 76 5 is_stmt 1 view .LVU10
  51              		.loc 1 76 26 is_stmt 0 view .LVU11
  52 000a C381     		strh	r3, [r0, #14]	@ movhi
  77:Src/mc_interface.c ****     pHandle->hFinalTorque = 0;
  53              		.loc 1 77 5 is_stmt 1 view .LVU12
  54              		.loc 1 77 27 is_stmt 0 view .LVU13
  55 000c 0382     		strh	r3, [r0, #16]	@ movhi
  78:Src/mc_interface.c ****     pHandle->hDurationms = 0;
  56              		.loc 1 78 5 is_stmt 1 view .LVU14
  57              		.loc 1 78 26 is_stmt 0 view .LVU15
  58 000e C382     		strh	r3, [r0, #22]	@ movhi
  79:Src/mc_interface.c ****     pHandle->CommandState = MCI_BUFFER_EMPTY;
  59              		.loc 1 79 5 is_stmt 1 view .LVU16
  60              		.loc 1 79 27 is_stmt 0 view .LVU17
  61 0010 8377     		strb	r3, [r0, #30]
  80:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_NO_COMMAND;
  62              		.loc 1 80 5 is_stmt 1 view .LVU18
  63              		.loc 1 80 28 is_stmt 0 view .LVU19
  64 0012 0376     		strb	r3, [r0, #24]
  81:Src/mc_interface.c ****     pHandle->State = IDLE;
  65              		.loc 1 81 5 is_stmt 1 view .LVU20
  66              		.loc 1 81 20 is_stmt 0 view .LVU21
  67 0014 4376     		strb	r3, [r0, #25]
  82:Src/mc_interface.c ****     pHandle->CurrentFaults = MC_NO_FAULTS;
  68              		.loc 1 82 5 is_stmt 1 view .LVU22
  69              		.loc 1 82 28 is_stmt 0 view .LVU23
  70 0016 4383     		strh	r3, [r0, #26]	@ movhi
  83:Src/mc_interface.c ****     pHandle->PastFaults = MC_NO_FAULTS;
  71              		.loc 1 83 5 is_stmt 1 view .LVU24
  72              		.loc 1 83 25 is_stmt 0 view .LVU25
  73 0018 8383     		strh	r3, [r0, #28]	@ movhi
  84:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
  85:Src/mc_interface.c ****   }
  86:Src/mc_interface.c **** #endif
  87:Src/mc_interface.c **** }
  74              		.loc 1 87 1 view .LVU26
  75 001a 7047     		bx	lr
  76              		.cfi_endproc
  77              	.LFE1437:
  79              		.section	.text.MCI_ExecSpeedRamp,"ax",%progbits
  80              		.align	1
  81              		.weak	MCI_ExecSpeedRamp
  82              		.syntax unified
  83              		.thumb
  84              		.thumb_func
  85              		.fpu fpv4-sp-d16
  87              	MCI_ExecSpeedRamp:
ARM GAS  /tmp/ccX12T6L.s 			page 4


  88              	.LVL2:
  89              	.LFB1438:
  88:Src/mc_interface.c **** 
  89:Src/mc_interface.c **** /**
  90:Src/mc_interface.c ****   * @brief  This is a buffered command to set a motor speed ramp. This commands
  91:Src/mc_interface.c ****   *         don't become active as soon as it is called but it will be executed
  92:Src/mc_interface.c ****   *         when the pSTM state is START_RUN or RUN. User can check the status
  93:Src/mc_interface.c ****   *         of the command calling the MCI_IsCommandAcknowledged method.
  94:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to operate on.
  95:Src/mc_interface.c ****   * @param  hFinalSpeed is the value of mechanical rotor speed reference at the
  96:Src/mc_interface.c ****   *         end of the ramp expressed in tenths of HZ.
  97:Src/mc_interface.c ****   * @param  hDurationms the duration of the ramp expressed in milliseconds. It
  98:Src/mc_interface.c ****   *         is possible to set 0 to perform an instantaneous change in the
  99:Src/mc_interface.c ****   *         value.
 100:Src/mc_interface.c ****   * @retval none.
 101:Src/mc_interface.c ****   */
 102:Src/mc_interface.c **** __weak void MCI_ExecSpeedRamp(MCI_Handle_t *pHandle,  int16_t hFinalSpeed, uint16_t hDurationms)
 103:Src/mc_interface.c **** {
  90              		.loc 1 103 1 is_stmt 1 view -0
  91              		.cfi_startproc
  92              		@ args = 0, pretend = 0, frame = 0
  93              		@ frame_needed = 0, uses_anonymous_args = 0
  94              		@ link register save eliminated.
 104:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 105:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 106:Src/mc_interface.c ****   {
 107:Src/mc_interface.c ****     /* Nothing to do */
 108:Src/mc_interface.c ****   }
 109:Src/mc_interface.c ****   else
 110:Src/mc_interface.c ****   {
 111:Src/mc_interface.c **** #endif
 112:Src/mc_interface.c ****     pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
  95              		.loc 1 112 5 view .LVU28
  96              		.loc 1 112 26 is_stmt 0 view .LVU29
  97 0000 0123     		movs	r3, #1
  98 0002 0373     		strb	r3, [r0, #12]
 113:Src/mc_interface.c ****     pHandle->hFinalSpeed = hFinalSpeed;
  99              		.loc 1 113 5 is_stmt 1 view .LVU30
 100              		.loc 1 113 26 is_stmt 0 view .LVU31
 101 0004 C181     		strh	r1, [r0, #14]	@ movhi
 114:Src/mc_interface.c ****     pHandle->hDurationms = hDurationms;
 102              		.loc 1 114 5 is_stmt 1 view .LVU32
 103              		.loc 1 114 26 is_stmt 0 view .LVU33
 104 0006 C282     		strh	r2, [r0, #22]	@ movhi
 115:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 105              		.loc 1 115 5 is_stmt 1 view .LVU34
 106              		.loc 1 115 27 is_stmt 0 view .LVU35
 107 0008 8377     		strb	r3, [r0, #30]
 116:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 108              		.loc 1 116 5 is_stmt 1 view .LVU36
 109              		.loc 1 116 36 is_stmt 0 view .LVU37
 110 000a 0323     		movs	r3, #3
 111 000c C377     		strb	r3, [r0, #31]
 117:Src/mc_interface.c **** 
 118:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 119:Src/mc_interface.c ****   }
 120:Src/mc_interface.c **** #endif
ARM GAS  /tmp/ccX12T6L.s 			page 5


 121:Src/mc_interface.c **** }
 112              		.loc 1 121 1 view .LVU38
 113 000e 7047     		bx	lr
 114              		.cfi_endproc
 115              	.LFE1438:
 117              		.section	.text.MCI_ExecSpeedRamp_F,"ax",%progbits
 118              		.align	1
 119              		.weak	MCI_ExecSpeedRamp_F
 120              		.syntax unified
 121              		.thumb
 122              		.thumb_func
 123              		.fpu fpv4-sp-d16
 125              	MCI_ExecSpeedRamp_F:
 126              	.LVL3:
 127              	.LFB1439:
 122:Src/mc_interface.c **** 
 123:Src/mc_interface.c **** /**
 124:Src/mc_interface.c ****   * @brief  This is a buffered command to set a motor speed ramp. This commands
 125:Src/mc_interface.c ****   *         don't become active as soon as it is called but it will be executed
 126:Src/mc_interface.c ****   *         when the pSTM state is START_RUN or RUN. User can check the status
 127:Src/mc_interface.c ****   *         of the command calling the MCI_IsCommandAcknowledged method.
 128:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to operate on.
 129:Src/mc_interface.c ****   * @param  FinalSpeed is the value of mechanical rotor speed reference at the
 130:Src/mc_interface.c ****   *         end of the ramp expressed in rpm.
 131:Src/mc_interface.c ****   * @param  hDurationms the duration of the ramp expressed in milliseconds. It
 132:Src/mc_interface.c ****   *         is possible to set 0 to perform an instantaneous change in the
 133:Src/mc_interface.c ****   *         value.
 134:Src/mc_interface.c ****   * @retval none.
 135:Src/mc_interface.c ****   */
 136:Src/mc_interface.c **** __weak void MCI_ExecSpeedRamp_F( MCI_Handle_t * pHandle, const float FinalSpeed, uint16_t hDuration
 137:Src/mc_interface.c **** {
 128              		.loc 1 137 1 is_stmt 1 view -0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 0
 131              		@ frame_needed = 0, uses_anonymous_args = 0
 132              		.loc 1 137 1 is_stmt 0 view .LVU40
 133 0000 08B5     		push	{r3, lr}
 134              		.cfi_def_cfa_offset 8
 135              		.cfi_offset 3, -8
 136              		.cfi_offset 14, -4
 137 0002 0A46     		mov	r2, r1
 138:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 139:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 140:Src/mc_interface.c ****   {
 141:Src/mc_interface.c ****     /* Nothing to do */
 142:Src/mc_interface.c ****   }
 143:Src/mc_interface.c ****   else
 144:Src/mc_interface.c ****   {
 145:Src/mc_interface.c **** #endif
 146:Src/mc_interface.c ****     int16_t hFinalSpeed = (int16_t) ((FinalSpeed * SPEED_UNIT) / U_RPM);
 138              		.loc 1 146 5 is_stmt 1 view .LVU41
 139              		.loc 1 146 50 is_stmt 0 view .LVU42
 140 0004 F2EE047A 		vmov.f32	s15, #1.0e+1
 141 0008 20EE270A 		vmul.f32	s0, s0, s15
 142              	.LVL4:
 143              		.loc 1 146 64 view .LVU43
 144 000c 9FED057A 		vldr.32	s14, .L5
ARM GAS  /tmp/ccX12T6L.s 			page 6


 145 0010 C0EE077A 		vdiv.f32	s15, s0, s14
 146              		.loc 1 146 13 view .LVU44
 147 0014 FDEEE77A 		vcvt.s32.f32	s15, s15
 148              	.LVL5:
 147:Src/mc_interface.c ****     MCI_ExecSpeedRamp(pHandle, hFinalSpeed, hDurationms);
 149              		.loc 1 147 5 is_stmt 1 view .LVU45
 150 0018 17EE903A 		vmov	r3, s15	@ int
 151 001c 19B2     		sxth	r1, r3
 152              	.LVL6:
 153              		.loc 1 147 5 is_stmt 0 view .LVU46
 154 001e FFF7FEFF 		bl	MCI_ExecSpeedRamp
 155              	.LVL7:
 148:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 149:Src/mc_interface.c ****   }
 150:Src/mc_interface.c **** #endif
 151:Src/mc_interface.c **** }
 156              		.loc 1 151 1 view .LVU47
 157 0022 08BD     		pop	{r3, pc}
 158              	.L6:
 159              		.align	2
 160              	.L5:
 161 0024 00007042 		.word	1114636288
 162              		.cfi_endproc
 163              	.LFE1439:
 165              		.section	.text.MCI_ExecTorqueRamp,"ax",%progbits
 166              		.align	1
 167              		.weak	MCI_ExecTorqueRamp
 168              		.syntax unified
 169              		.thumb
 170              		.thumb_func
 171              		.fpu fpv4-sp-d16
 173              	MCI_ExecTorqueRamp:
 174              	.LVL8:
 175              	.LFB1440:
 152:Src/mc_interface.c **** 
 153:Src/mc_interface.c **** /**
 154:Src/mc_interface.c ****   * @brief  This is a buffered command to set a motor torque ramp. This commands
 155:Src/mc_interface.c ****   *         don't become active as soon as it is called but it will be executed
 156:Src/mc_interface.c ****   *         when the pSTM state is START_RUN or RUN. User can check the status
 157:Src/mc_interface.c ****   *         of the command calling the MCI_IsCommandAcknowledged method.
 158:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 159:Src/mc_interface.c ****   * @param  hFinalTorque is the value of motor torque reference at the end of
 160:Src/mc_interface.c ****   *         the ramp. This value represents actually the Iq current expressed in
 161:Src/mc_interface.c ****   *         digit.
 162:Src/mc_interface.c ****   *         To convert current expressed in Amps to current expressed in digit
 163:Src/mc_interface.c ****   *         is possible to use the formula:
 164:Src/mc_interface.c ****   *         Current (digit) = [Current(Amp) * 65536 * Rshunt * Aop] / Vdd micro.
 165:Src/mc_interface.c ****   * @param  hDurationms the duration of the ramp expressed in milliseconds. It
 166:Src/mc_interface.c ****   *         is possible to set 0 to perform an instantaneous change in the
 167:Src/mc_interface.c ****   *         value.
 168:Src/mc_interface.c ****   * @retval none.
 169:Src/mc_interface.c ****   */
 170:Src/mc_interface.c **** __weak void MCI_ExecTorqueRamp(MCI_Handle_t *pHandle,  int16_t hFinalTorque, uint16_t hDurationms)
 171:Src/mc_interface.c **** {
 176              		.loc 1 171 1 is_stmt 1 view -0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccX12T6L.s 			page 7


 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180              		@ link register save eliminated.
 172:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 173:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 174:Src/mc_interface.c ****   {
 175:Src/mc_interface.c ****     /* Nothing to do */
 176:Src/mc_interface.c ****   }
 177:Src/mc_interface.c ****   else
 178:Src/mc_interface.c ****   {
 179:Src/mc_interface.c **** #endif
 180:Src/mc_interface.c ****     pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 181              		.loc 1 180 5 view .LVU49
 182              		.loc 1 180 26 is_stmt 0 view .LVU50
 183 0000 0223     		movs	r3, #2
 184 0002 0373     		strb	r3, [r0, #12]
 181:Src/mc_interface.c ****     pHandle->hFinalTorque = hFinalTorque;
 185              		.loc 1 181 5 is_stmt 1 view .LVU51
 186              		.loc 1 181 27 is_stmt 0 view .LVU52
 187 0004 0182     		strh	r1, [r0, #16]	@ movhi
 182:Src/mc_interface.c ****     pHandle->hDurationms = hDurationms;
 188              		.loc 1 182 5 is_stmt 1 view .LVU53
 189              		.loc 1 182 26 is_stmt 0 view .LVU54
 190 0006 C282     		strh	r2, [r0, #22]	@ movhi
 183:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 191              		.loc 1 183 5 is_stmt 1 view .LVU55
 192              		.loc 1 183 27 is_stmt 0 view .LVU56
 193 0008 0123     		movs	r3, #1
 194 000a 8377     		strb	r3, [r0, #30]
 184:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 195              		.loc 1 184 5 is_stmt 1 view .LVU57
 196              		.loc 1 184 36 is_stmt 0 view .LVU58
 197 000c 0423     		movs	r3, #4
 198 000e C377     		strb	r3, [r0, #31]
 185:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 186:Src/mc_interface.c ****   }
 187:Src/mc_interface.c **** #endif
 188:Src/mc_interface.c **** }
 199              		.loc 1 188 1 view .LVU59
 200 0010 7047     		bx	lr
 201              		.cfi_endproc
 202              	.LFE1440:
 204              		.global	__aeabi_f2d
 205              		.global	__aeabi_dmul
 206              		.global	__aeabi_d2iz
 207              		.section	.text.MCI_ExecTorqueRamp_F,"ax",%progbits
 208              		.align	1
 209              		.weak	MCI_ExecTorqueRamp_F
 210              		.syntax unified
 211              		.thumb
 212              		.thumb_func
 213              		.fpu fpv4-sp-d16
 215              	MCI_ExecTorqueRamp_F:
 216              	.LVL9:
 217              	.LFB1441:
 189:Src/mc_interface.c **** 
 190:Src/mc_interface.c **** /**
 191:Src/mc_interface.c ****   * @brief  This is a buffered command to set a motor torque ramp. This commands
ARM GAS  /tmp/ccX12T6L.s 			page 8


 192:Src/mc_interface.c ****   *         don't become active as soon as it is called but it will be executed
 193:Src/mc_interface.c ****   *         when the pSTM state is START_RUN or RUN. User can check the status
 194:Src/mc_interface.c ****   *         of the command calling the MCI_IsCommandAcknowledged method.
 195:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 196:Src/mc_interface.c ****   * @param  FinalTorque is the value of motor torque reference at the end of
 197:Src/mc_interface.c ****   *         the ramp. This value represents actually the Iq current expressed in
 198:Src/mc_interface.c ****   *         Ampere.
 199:Src/mc_interface.c ****   *         Here the formula for conversion from current in Ampere to digit:
 200:Src/mc_interface.c ****   *           I(s16) = [i(Amp) * 65536 * Rshunt * Aop] / Vdd_micro.
 201:Src/mc_interface.c ****   * @param  hDurationms the duration of the ramp expressed in milliseconds. It
 202:Src/mc_interface.c ****   *         is possible to set 0 to perform an instantaneous change in the
 203:Src/mc_interface.c ****   *         value.
 204:Src/mc_interface.c ****   * @retval none.
 205:Src/mc_interface.c ****   */
 206:Src/mc_interface.c **** __weak void MCI_ExecTorqueRamp_F( MCI_Handle_t * pHandle,  float FinalTorque, uint16_t hDurationms 
 207:Src/mc_interface.c **** {
 218              		.loc 1 207 1 is_stmt 1 view -0
 219              		.cfi_startproc
 220              		@ args = 0, pretend = 0, frame = 0
 221              		@ frame_needed = 0, uses_anonymous_args = 0
 222              		.loc 1 207 1 is_stmt 0 view .LVU61
 223 0000 38B5     		push	{r3, r4, r5, lr}
 224              		.cfi_def_cfa_offset 16
 225              		.cfi_offset 3, -16
 226              		.cfi_offset 4, -12
 227              		.cfi_offset 5, -8
 228              		.cfi_offset 14, -4
 229 0002 0446     		mov	r4, r0
 230 0004 10EE100A 		vmov	r0, s0
 231              	.LVL10:
 232              		.loc 1 207 1 view .LVU62
 233 0008 0D46     		mov	r5, r1
 208:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 209:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 210:Src/mc_interface.c ****   {
 211:Src/mc_interface.c ****     /* Nothing to do */
 212:Src/mc_interface.c ****   }
 213:Src/mc_interface.c ****   else
 214:Src/mc_interface.c ****   {
 215:Src/mc_interface.c **** #endif
 216:Src/mc_interface.c ****     int16_t hFinalTorque = (int16_t) (FinalTorque * CURRENT_CONV_FACTOR);
 234              		.loc 1 216 5 is_stmt 1 view .LVU63
 235              		.loc 1 216 51 is_stmt 0 view .LVU64
 236 000a FFF7FEFF 		bl	__aeabi_f2d
 237              	.LVL11:
 238              		.loc 1 216 51 view .LVU65
 239 000e 06A3     		adr	r3, .L10
 240 0010 D3E90023 		ldrd	r2, [r3]
 241 0014 FFF7FEFF 		bl	__aeabi_dmul
 242              	.LVL12:
 243              		.loc 1 216 13 view .LVU66
 244 0018 FFF7FEFF 		bl	__aeabi_d2iz
 245              	.LVL13:
 217:Src/mc_interface.c ****     MCI_ExecTorqueRamp(pHandle, hFinalTorque, hDurationms);
 246              		.loc 1 217 5 is_stmt 1 view .LVU67
 247 001c 2A46     		mov	r2, r5
 248 001e 01B2     		sxth	r1, r0
ARM GAS  /tmp/ccX12T6L.s 			page 9


 249 0020 2046     		mov	r0, r4
 250              	.LVL14:
 251              		.loc 1 217 5 is_stmt 0 view .LVU68
 252 0022 FFF7FEFF 		bl	MCI_ExecTorqueRamp
 253              	.LVL15:
 218:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 219:Src/mc_interface.c ****   }
 220:Src/mc_interface.c **** #endif
 221:Src/mc_interface.c **** }
 254              		.loc 1 221 1 view .LVU69
 255 0026 38BD     		pop	{r3, r4, r5, pc}
 256              	.LVL16:
 257              	.L11:
 258              		.loc 1 221 1 view .LVU70
 259              		.align	3
 260              	.L10:
 261 0028 B358B64D 		.word	1303795891
 262 002c 5B048140 		.word	1082197083
 263              		.cfi_endproc
 264              	.LFE1441:
 266              		.section	.text.MCI_SetCurrentReferences,"ax",%progbits
 267              		.align	1
 268              		.weak	MCI_SetCurrentReferences
 269              		.syntax unified
 270              		.thumb
 271              		.thumb_func
 272              		.fpu fpv4-sp-d16
 274              	MCI_SetCurrentReferences:
 275              	.LVL17:
 276              	.LFB1442:
 222:Src/mc_interface.c **** 
 223:Src/mc_interface.c **** /**
 224:Src/mc_interface.c ****   * @brief  This is a buffered command to set directly the motor current
 225:Src/mc_interface.c ****   *         references Iq and Id. This commands don't become active as soon as
 226:Src/mc_interface.c ****   *         it is called but it will be executed when the pSTM state is
 227:Src/mc_interface.c ****   *         START_RUN or RUN. User can check the status of the command calling
 228:Src/mc_interface.c ****   *         the MCI_IsCommandAcknowledged method.
 229:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 230:Src/mc_interface.c ****   * @param  Iqdref current references on qd reference frame in qd_t
 231:Src/mc_interface.c ****   *         format.
 232:Src/mc_interface.c ****   * @retval none.
 233:Src/mc_interface.c ****   */
 234:Src/mc_interface.c **** __weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
 235:Src/mc_interface.c **** {
 277              		.loc 1 235 1 is_stmt 1 view -0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 8
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281              		@ link register save eliminated.
 282              		.loc 1 235 1 is_stmt 0 view .LVU72
 283 0000 82B0     		sub	sp, sp, #8
 284              		.cfi_def_cfa_offset 8
 236:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 237:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 238:Src/mc_interface.c ****   {
 239:Src/mc_interface.c ****     /* Nothing to do */
 240:Src/mc_interface.c ****   }
ARM GAS  /tmp/ccX12T6L.s 			page 10


 241:Src/mc_interface.c ****   else
 242:Src/mc_interface.c ****   {
 243:Src/mc_interface.c **** #endif
 244:Src/mc_interface.c **** 
 245:Src/mc_interface.c ****     pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 285              		.loc 1 245 5 is_stmt 1 view .LVU73
 286              		.loc 1 245 26 is_stmt 0 view .LVU74
 287 0002 0322     		movs	r2, #3
 288 0004 0273     		strb	r2, [r0, #12]
 246:Src/mc_interface.c ****     pHandle->Iqdref.q = Iqdref.q;
 289              		.loc 1 246 5 is_stmt 1 view .LVU75
 290              		.loc 1 246 23 is_stmt 0 view .LVU76
 291 0006 4182     		strh	r1, [r0, #18]	@ movhi
 247:Src/mc_interface.c ****     pHandle->Iqdref.d = Iqdref.d;
 292              		.loc 1 247 5 is_stmt 1 view .LVU77
 293              		.loc 1 247 31 is_stmt 0 view .LVU78
 294 0008 0914     		asrs	r1, r1, #16
 295              		.loc 1 247 23 view .LVU79
 296 000a 8182     		strh	r1, [r0, #20]	@ movhi
 248:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 297              		.loc 1 248 5 is_stmt 1 view .LVU80
 298              		.loc 1 248 27 is_stmt 0 view .LVU81
 299 000c 0123     		movs	r3, #1
 300 000e 8377     		strb	r3, [r0, #30]
 249:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 301              		.loc 1 249 5 is_stmt 1 view .LVU82
 302              		.loc 1 249 36 is_stmt 0 view .LVU83
 303 0010 0423     		movs	r3, #4
 304 0012 C377     		strb	r3, [r0, #31]
 250:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 251:Src/mc_interface.c ****   }
 252:Src/mc_interface.c **** #endif
 253:Src/mc_interface.c **** }
 305              		.loc 1 253 1 view .LVU84
 306 0014 02B0     		add	sp, sp, #8
 307              		.cfi_def_cfa_offset 0
 308              		@ sp needed
 309 0016 7047     		bx	lr
 310              		.cfi_endproc
 311              	.LFE1442:
 313              		.section	.text.MCI_SetCurrentReferences_F,"ax",%progbits
 314              		.align	1
 315              		.weak	MCI_SetCurrentReferences_F
 316              		.syntax unified
 317              		.thumb
 318              		.thumb_func
 319              		.fpu fpv4-sp-d16
 321              	MCI_SetCurrentReferences_F:
 322              	.LVL18:
 323              	.LFB1443:
 254:Src/mc_interface.c **** 
 255:Src/mc_interface.c **** /**
 256:Src/mc_interface.c ****   * @brief  This is a buffered command to set directly the motor current
 257:Src/mc_interface.c ****   *         references Iq and Id. This commands don't become active as soon as
 258:Src/mc_interface.c ****   *         it is called but it will be executed when the pSTM state is
 259:Src/mc_interface.c ****   *         START_RUN or RUN. User can check the status of the command calling
 260:Src/mc_interface.c ****   *         the MCI_IsCommandAcknowledged method.
ARM GAS  /tmp/ccX12T6L.s 			page 11


 261:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 262:Src/mc_interface.c ****   * @param  Iqdref current (A) references on qd reference frame in qd_f_t format.
 263:Src/mc_interface.c ****   *
 264:Src/mc_interface.c ****   * @retval none.
 265:Src/mc_interface.c ****   */
 266:Src/mc_interface.c **** __weak void MCI_SetCurrentReferences_F( MCI_Handle_t * pHandle, qd_f_t IqdRef )
 267:Src/mc_interface.c **** {
 324              		.loc 1 267 1 is_stmt 1 view -0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 16
 327              		@ frame_needed = 0, uses_anonymous_args = 0
 328              		.loc 1 267 1 is_stmt 0 view .LVU86
 329 0000 30B5     		push	{r4, r5, lr}
 330              		.cfi_def_cfa_offset 12
 331              		.cfi_offset 4, -12
 332              		.cfi_offset 5, -8
 333              		.cfi_offset 14, -4
 334 0002 85B0     		sub	sp, sp, #20
 335              		.cfi_def_cfa_offset 32
 336 0004 0446     		mov	r4, r0
 337 0006 10EE105A 		vmov	r5, s0
 338 000a 10EE900A 		vmov	r0, s1
 339              	.LVL19:
 268:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 269:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 270:Src/mc_interface.c ****   {
 271:Src/mc_interface.c ****     /* Nothing to do */
 272:Src/mc_interface.c ****   }
 273:Src/mc_interface.c ****   else
 274:Src/mc_interface.c ****   {
 275:Src/mc_interface.c **** #endif
 276:Src/mc_interface.c ****     qd_t Iqdref;
 340              		.loc 1 276 5 is_stmt 1 view .LVU87
 277:Src/mc_interface.c ****     Iqdref.d = (int16_t) (IqdRef.d * CURRENT_CONV_FACTOR);
 341              		.loc 1 277 5 view .LVU88
 342              		.loc 1 277 33 is_stmt 0 view .LVU89
 343 000e FFF7FEFF 		bl	__aeabi_f2d
 344              	.LVL20:
 345              		.loc 1 277 36 view .LVU90
 346 0012 0DA3     		adr	r3, .L16
 347 0014 D3E90023 		ldrd	r2, [r3]
 348 0018 FFF7FEFF 		bl	__aeabi_dmul
 349              	.LVL21:
 350              		.loc 1 277 16 view .LVU91
 351 001c FFF7FEFF 		bl	__aeabi_d2iz
 352              	.LVL22:
 353              		.loc 1 277 14 view .LVU92
 354 0020 ADF80E00 		strh	r0, [sp, #14]	@ movhi
 278:Src/mc_interface.c ****     Iqdref.q = (int16_t) (IqdRef.q * CURRENT_CONV_FACTOR);
 355              		.loc 1 278 5 is_stmt 1 view .LVU93
 356              		.loc 1 278 33 is_stmt 0 view .LVU94
 357 0024 2846     		mov	r0, r5	@ float
 358 0026 FFF7FEFF 		bl	__aeabi_f2d
 359              	.LVL23:
 360              		.loc 1 278 36 view .LVU95
 361 002a 07A3     		adr	r3, .L16
 362 002c D3E90023 		ldrd	r2, [r3]
ARM GAS  /tmp/ccX12T6L.s 			page 12


 363 0030 FFF7FEFF 		bl	__aeabi_dmul
 364              	.LVL24:
 365              		.loc 1 278 16 view .LVU96
 366 0034 FFF7FEFF 		bl	__aeabi_d2iz
 367              	.LVL25:
 368              		.loc 1 278 14 view .LVU97
 369 0038 ADF80C00 		strh	r0, [sp, #12]	@ movhi
 279:Src/mc_interface.c ****     MCI_SetCurrentReferences(pHandle, Iqdref);
 370              		.loc 1 279 5 is_stmt 1 view .LVU98
 371 003c 0399     		ldr	r1, [sp, #12]
 372 003e 2046     		mov	r0, r4
 373 0040 FFF7FEFF 		bl	MCI_SetCurrentReferences
 374              	.LVL26:
 280:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 281:Src/mc_interface.c ****   }
 282:Src/mc_interface.c **** #endif
 283:Src/mc_interface.c **** }
 375              		.loc 1 283 1 is_stmt 0 view .LVU99
 376 0044 05B0     		add	sp, sp, #20
 377              		.cfi_def_cfa_offset 12
 378              		@ sp needed
 379 0046 30BD     		pop	{r4, r5, pc}
 380              	.LVL27:
 381              	.L17:
 382              		.loc 1 283 1 view .LVU100
 383              		.align	3
 384              	.L16:
 385 0048 B358B64D 		.word	1303795891
 386 004c 5B048140 		.word	1082197083
 387              		.cfi_endproc
 388              	.LFE1443:
 390              		.section	.text.MCI_SetSpeedMode,"ax",%progbits
 391              		.align	1
 392              		.weak	MCI_SetSpeedMode
 393              		.syntax unified
 394              		.thumb
 395              		.thumb_func
 396              		.fpu fpv4-sp-d16
 398              	MCI_SetSpeedMode:
 399              	.LVL28:
 400              	.LFB1444:
 284:Src/mc_interface.c **** 
 285:Src/mc_interface.c **** /**
 286:Src/mc_interface.c ****   * @brief  This is a buffered command to set directly the motor current
 287:Src/mc_interface.c ****   *         references Iq and Id. This commands don't become active as soon as
 288:Src/mc_interface.c ****   *         it is called but it will be executed when the pSTM state is
 289:Src/mc_interface.c ****   *         START_RUN or RUN. User can check the status of the command calling
 290:Src/mc_interface.c ****   *         the MCI_IsCommandAcknowledged method.
 291:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 292:Src/mc_interface.c ****   * @param  Iqdref current references on qd reference frame in qd_t
 293:Src/mc_interface.c ****   *         format.
 294:Src/mc_interface.c ****   * @retval none.
 295:Src/mc_interface.c ****   */
 296:Src/mc_interface.c **** __weak void MCI_SetSpeedMode( MCI_Handle_t * pHandle )
 297:Src/mc_interface.c **** {
 401              		.loc 1 297 1 is_stmt 1 view -0
 402              		.cfi_startproc
ARM GAS  /tmp/ccX12T6L.s 			page 13


 403              		@ args = 0, pretend = 0, frame = 0
 404              		@ frame_needed = 0, uses_anonymous_args = 0
 405              		.loc 1 297 1 is_stmt 0 view .LVU102
 406 0000 10B5     		push	{r4, lr}
 407              		.cfi_def_cfa_offset 8
 408              		.cfi_offset 4, -8
 409              		.cfi_offset 14, -4
 410 0002 0446     		mov	r4, r0
 298:Src/mc_interface.c ****   pHandle->pFOCVars->bDriveInput = INTERNAL;
 411              		.loc 1 298 3 is_stmt 1 view .LVU103
 412              		.loc 1 298 10 is_stmt 0 view .LVU104
 413 0004 4368     		ldr	r3, [r0, #4]
 414              		.loc 1 298 34 view .LVU105
 415 0006 0022     		movs	r2, #0
 416 0008 83F82420 		strb	r2, [r3, #36]
 299:Src/mc_interface.c ****   STC_SetControlMode( pHandle->pSTC, MCM_SPEED_MODE );
 417              		.loc 1 299 3 is_stmt 1 view .LVU106
 418 000c 0321     		movs	r1, #3
 419 000e 0068     		ldr	r0, [r0]
 420              	.LVL29:
 421              		.loc 1 299 3 is_stmt 0 view .LVU107
 422 0010 FFF7FEFF 		bl	STC_SetControlMode
 423              	.LVL30:
 300:Src/mc_interface.c ****   pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 424              		.loc 1 300 3 is_stmt 1 view .LVU108
 425              		.loc 1 300 34 is_stmt 0 view .LVU109
 426 0014 0323     		movs	r3, #3
 427 0016 E377     		strb	r3, [r4, #31]
 301:Src/mc_interface.c **** }
 428              		.loc 1 301 1 view .LVU110
 429 0018 10BD     		pop	{r4, pc}
 430              		.loc 1 301 1 view .LVU111
 431              		.cfi_endproc
 432              	.LFE1444:
 434              		.section	.text.MCI_SetOpenLoopCurrent,"ax",%progbits
 435              		.align	1
 436              		.weak	MCI_SetOpenLoopCurrent
 437              		.syntax unified
 438              		.thumb
 439              		.thumb_func
 440              		.fpu fpv4-sp-d16
 442              	MCI_SetOpenLoopCurrent:
 443              	.LVL31:
 444              	.LFB1445:
 302:Src/mc_interface.c **** 
 303:Src/mc_interface.c **** /**
 304:Src/mc_interface.c ****   * @brief  This is a buffered command to set directly the motor current
 305:Src/mc_interface.c ****   *         references Iq and Id. This commands don't become active as soon as
 306:Src/mc_interface.c ****   *         it is called but it will be executed when the pSTM state is
 307:Src/mc_interface.c ****   *         START_RUN or RUN. User can check the status of the command calling
 308:Src/mc_interface.c ****   *         the MCI_IsCommandAcknowledged method.
 309:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 310:Src/mc_interface.c ****   * @param  Iqdref current references on qd reference frame in qd_t
 311:Src/mc_interface.c ****   *         format.
 312:Src/mc_interface.c ****   * @retval none.
 313:Src/mc_interface.c ****   */
 314:Src/mc_interface.c **** __weak void MCI_SetOpenLoopCurrent( MCI_Handle_t * pHandle )
ARM GAS  /tmp/ccX12T6L.s 			page 14


 315:Src/mc_interface.c **** {
 445              		.loc 1 315 1 is_stmt 1 view -0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 0
 448              		@ frame_needed = 0, uses_anonymous_args = 0
 449              		.loc 1 315 1 is_stmt 0 view .LVU113
 450 0000 10B5     		push	{r4, lr}
 451              		.cfi_def_cfa_offset 8
 452              		.cfi_offset 4, -8
 453              		.cfi_offset 14, -4
 454 0002 0446     		mov	r4, r0
 316:Src/mc_interface.c ****   pHandle->pFOCVars->bDriveInput = EXTERNAL;
 455              		.loc 1 316 3 is_stmt 1 view .LVU114
 456              		.loc 1 316 10 is_stmt 0 view .LVU115
 457 0004 4368     		ldr	r3, [r0, #4]
 458              		.loc 1 316 34 view .LVU116
 459 0006 0122     		movs	r2, #1
 460 0008 83F82420 		strb	r2, [r3, #36]
 317:Src/mc_interface.c ****   STC_SetControlMode( pHandle->pSTC, MCM_OPEN_LOOP_CURRENT_MODE );
 461              		.loc 1 317 3 is_stmt 1 view .LVU117
 462 000c 0221     		movs	r1, #2
 463 000e 0068     		ldr	r0, [r0]
 464              	.LVL32:
 465              		.loc 1 317 3 is_stmt 0 view .LVU118
 466 0010 FFF7FEFF 		bl	STC_SetControlMode
 467              	.LVL33:
 318:Src/mc_interface.c ****   pHandle->LastModalitySetByUser = MCM_OPEN_LOOP_CURRENT_MODE;
 468              		.loc 1 318 3 is_stmt 1 view .LVU119
 469              		.loc 1 318 34 is_stmt 0 view .LVU120
 470 0014 0223     		movs	r3, #2
 471 0016 E377     		strb	r3, [r4, #31]
 319:Src/mc_interface.c **** }
 472              		.loc 1 319 1 view .LVU121
 473 0018 10BD     		pop	{r4, pc}
 474              		.loc 1 319 1 view .LVU122
 475              		.cfi_endproc
 476              	.LFE1445:
 478              		.section	.text.MCI_SetOpenLoopVoltage,"ax",%progbits
 479              		.align	1
 480              		.weak	MCI_SetOpenLoopVoltage
 481              		.syntax unified
 482              		.thumb
 483              		.thumb_func
 484              		.fpu fpv4-sp-d16
 486              	MCI_SetOpenLoopVoltage:
 487              	.LVL34:
 488              	.LFB1446:
 320:Src/mc_interface.c **** 
 321:Src/mc_interface.c **** /**
 322:Src/mc_interface.c ****   * @brief  This is a buffered command to set directly the motor current
 323:Src/mc_interface.c ****   *         references Iq and Id. This commands don't become active as soon as
 324:Src/mc_interface.c ****   *         it is called but it will be executed when the pSTM state is
 325:Src/mc_interface.c ****   *         START_RUN or RUN. User can check the status of the command calling
 326:Src/mc_interface.c ****   *         the MCI_IsCommandAcknowledged method.
 327:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 328:Src/mc_interface.c ****   * @param  Iqdref current references on qd reference frame in qd_t
 329:Src/mc_interface.c ****   *         format.
ARM GAS  /tmp/ccX12T6L.s 			page 15


 330:Src/mc_interface.c ****   * @retval none.
 331:Src/mc_interface.c ****   */
 332:Src/mc_interface.c **** __weak void MCI_SetOpenLoopVoltage( MCI_Handle_t * pHandle )
 333:Src/mc_interface.c **** {
 489              		.loc 1 333 1 is_stmt 1 view -0
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 0
 492              		@ frame_needed = 0, uses_anonymous_args = 0
 493              		.loc 1 333 1 is_stmt 0 view .LVU124
 494 0000 38B5     		push	{r3, r4, r5, lr}
 495              		.cfi_def_cfa_offset 16
 496              		.cfi_offset 3, -16
 497              		.cfi_offset 4, -12
 498              		.cfi_offset 5, -8
 499              		.cfi_offset 14, -4
 500 0002 0446     		mov	r4, r0
 334:Src/mc_interface.c ****   pHandle->pFOCVars->bDriveInput = EXTERNAL;
 501              		.loc 1 334 3 is_stmt 1 view .LVU125
 502              		.loc 1 334 10 is_stmt 0 view .LVU126
 503 0004 4368     		ldr	r3, [r0, #4]
 504              		.loc 1 334 34 view .LVU127
 505 0006 0125     		movs	r5, #1
 506 0008 83F82450 		strb	r5, [r3, #36]
 335:Src/mc_interface.c ****   STC_SetControlMode( pHandle->pSTC, MCM_OPEN_LOOP_VOLTAGE_MODE );
 507              		.loc 1 335 3 is_stmt 1 view .LVU128
 508 000c 2946     		mov	r1, r5
 509 000e 0068     		ldr	r0, [r0]
 510              	.LVL35:
 511              		.loc 1 335 3 is_stmt 0 view .LVU129
 512 0010 FFF7FEFF 		bl	STC_SetControlMode
 513              	.LVL36:
 336:Src/mc_interface.c ****   pHandle->LastModalitySetByUser = MCM_OPEN_LOOP_VOLTAGE_MODE;
 514              		.loc 1 336 3 is_stmt 1 view .LVU130
 515              		.loc 1 336 34 is_stmt 0 view .LVU131
 516 0014 E577     		strb	r5, [r4, #31]
 337:Src/mc_interface.c **** }
 517              		.loc 1 337 1 view .LVU132
 518 0016 38BD     		pop	{r3, r4, r5, pc}
 519              		.loc 1 337 1 view .LVU133
 520              		.cfi_endproc
 521              	.LFE1446:
 523              		.section	.text.MCI_GetCalibratedOffsetsMotor,"ax",%progbits
 524              		.align	1
 525              		.weak	MCI_GetCalibratedOffsetsMotor
 526              		.syntax unified
 527              		.thumb
 528              		.thumb_func
 529              		.fpu fpv4-sp-d16
 531              	MCI_GetCalibratedOffsetsMotor:
 532              	.LVL37:
 533              	.LFB1450:
 338:Src/mc_interface.c **** 
 339:Src/mc_interface.c **** /**
 340:Src/mc_interface.c ****   * @brief  This is a user command used to begin the start-up procedure.
 341:Src/mc_interface.c ****   *         If the state machine is in IDLE state the command is executed
 342:Src/mc_interface.c ****   *         instantaneously otherwise the command is discarded. User must take
 343:Src/mc_interface.c ****   *         care of this possibility by checking the return value.
ARM GAS  /tmp/ccX12T6L.s 			page 16


 344:Src/mc_interface.c ****   *         Before calling MCI_StartMotor it is mandatory to execute one of
 345:Src/mc_interface.c ****   *         these commands:\n
 346:Src/mc_interface.c ****   *         MCI_ExecSpeedRamp\n
 347:Src/mc_interface.c ****   *         MCI_ExecTorqueRamp\n
 348:Src/mc_interface.c ****   *         MCI_SetCurrentReferences\n
 349:Src/mc_interface.c ****   *         Otherwise the behavior in run state will be unpredictable.\n
 350:Src/mc_interface.c ****   *         <B>Note:</B> The MCI_StartMotor command is used just to begin the
 351:Src/mc_interface.c ****   *         start-up procedure moving the state machine from IDLE state to
 352:Src/mc_interface.c ****   *         IDLE_START. The command MCI_StartMotor is not blocking the execution
 353:Src/mc_interface.c ****   *         of project until the motor is really running; to do this, the user
 354:Src/mc_interface.c ****   *         have to check the state machine and verify that the RUN state (or
 355:Src/mc_interface.c ****   *         any other state) has been reached.
 356:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 357:Src/mc_interface.c ****   * @retval bool It returns true if the command is successfully executed
 358:Src/mc_interface.c ****   *         otherwise it return false.
 359:Src/mc_interface.c ****   */
 360:Src/mc_interface.c **** __weak bool MCI_StartMotor(MCI_Handle_t *pHandle)
 361:Src/mc_interface.c **** {
 362:Src/mc_interface.c ****   bool RetVal;
 363:Src/mc_interface.c **** 
 364:Src/mc_interface.c ****   if ((IDLE == MCI_GetSTMState(pHandle)) &&
 365:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 366:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 367:Src/mc_interface.c ****   {
 368:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_START;
 369:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 370:Src/mc_interface.c ****     RetVal = true;
 371:Src/mc_interface.c ****   }
 372:Src/mc_interface.c ****   else
 373:Src/mc_interface.c ****   {
 374:Src/mc_interface.c ****     /* reject the command as the condition are not met */
 375:Src/mc_interface.c ****     RetVal = false;
 376:Src/mc_interface.c ****   }
 377:Src/mc_interface.c **** 
 378:Src/mc_interface.c ****   return (RetVal);
 379:Src/mc_interface.c **** }
 380:Src/mc_interface.c **** 
 381:Src/mc_interface.c **** /**
 382:Src/mc_interface.c ****   * @brief  This is a user command used to begin the start-up procedure with an
 383:Src/mc_interface.c ****   *          offset calibration even if it has been already done previously.
 384:Src/mc_interface.c ****   *         If the state machine is in IDLE state the command is executed
 385:Src/mc_interface.c ****   *         instantaneously otherwise the command is discarded. User must take
 386:Src/mc_interface.c ****   *         care of this possibility by checking the return value.
 387:Src/mc_interface.c ****   *         Before calling MCI_StartWithMeasurementOffset it is mandatory to execute
 388:Src/mc_interface.c ****   *         one of these commands:\n
 389:Src/mc_interface.c ****   *         MCI_ExecSpeedRamp\n
 390:Src/mc_interface.c ****   *         MCI_ExecTorqueRamp\n
 391:Src/mc_interface.c ****   *         MCI_SetCurrentReferences\n
 392:Src/mc_interface.c ****   *         Otherwise the behaviour in run state will be unpredictable.\n
 393:Src/mc_interface.c ****   *         <B>Note:</B> The MCI_StartWithMeasurementOffset command is used just to
 394:Src/mc_interface.c ****   *         begin the start-up procedure moving the state machine from IDLE state to
 395:Src/mc_interface.c ****   *         IDLE_START. The command MCI_StartWithMeasurementOffset is not blocking
 396:Src/mc_interface.c ****   *         the execution of project until the motor is really running; to do this,
 397:Src/mc_interface.c ****   *         the user have to check the state machine and verify that the RUN state (or
 398:Src/mc_interface.c ****   *         any other state) has been reached.
 399:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 400:Src/mc_interface.c ****   * @retval bool It returns true if the command is successfully executed
ARM GAS  /tmp/ccX12T6L.s 			page 17


 401:Src/mc_interface.c ****   *         otherwise it return false.
 402:Src/mc_interface.c ****   */
 403:Src/mc_interface.c **** __weak bool MCI_StartWithMeasurementOffset(MCI_Handle_t* pHandle)
 404:Src/mc_interface.c **** {
 405:Src/mc_interface.c ****   bool RetVal;
 406:Src/mc_interface.c **** 
 407:Src/mc_interface.c ****   if ((IDLE == MCI_GetSTMState(pHandle)) &&
 408:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 409:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 410:Src/mc_interface.c ****   {
 411:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_START;
 412:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 413:Src/mc_interface.c ****     pHandle->pPWM->offsetCalibStatus = false;
 414:Src/mc_interface.c ****     RetVal = true;
 415:Src/mc_interface.c ****   }
 416:Src/mc_interface.c ****   else
 417:Src/mc_interface.c ****   {
 418:Src/mc_interface.c ****     /* reject the command as the condition are not met */
 419:Src/mc_interface.c ****     RetVal = false;
 420:Src/mc_interface.c ****   }
 421:Src/mc_interface.c **** 
 422:Src/mc_interface.c ****   return (RetVal);
 423:Src/mc_interface.c **** }
 424:Src/mc_interface.c **** 
 425:Src/mc_interface.c **** /**
 426:Src/mc_interface.c ****   * @brief  This is a user command used to begin the phase offset calibration
 427:Src/mc_interface.c ****   *         procedure. If the state machine is in IDLE state the command is executed
 428:Src/mc_interface.c ****   *         instantaneously otherwise the command is discarded. User must take
 429:Src/mc_interface.c ****   *         care of this possibility by checking the return value.\n
 430:Src/mc_interface.c ****   *         <B>Note:</B> The MCI_StartOffsetMeasurments command is used to begin phase
 431:Src/mc_interface.c ****   *         offset calibration procedure moving the state machine from IDLE state to
 432:Src/mc_interface.c ****   *         OFFSET_CALIB. The command MCI_StartOffsetMeasurments is not blocking
 433:Src/mc_interface.c ****   *         the execution of project until the measurments are done; to do this, the user
 434:Src/mc_interface.c ****   *         have to check the state machine and verify that the IDLE state (or
 435:Src/mc_interface.c ****   *         any other state) has been reached.
 436:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 437:Src/mc_interface.c ****   * @retval bool It returns true if the command is successfully executed
 438:Src/mc_interface.c ****   *         otherwise it return false.
 439:Src/mc_interface.c ****   */
 440:Src/mc_interface.c **** __weak bool MCI_StartOffsetMeasurments(MCI_Handle_t *pHandle)
 441:Src/mc_interface.c **** {
 442:Src/mc_interface.c ****   bool RetVal;
 443:Src/mc_interface.c **** 
 444:Src/mc_interface.c ****   if ((IDLE == MCI_GetSTMState(pHandle)) &&
 445:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 446:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 447:Src/mc_interface.c ****   {
 448:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_MEASURE_OFFSETS;
 449:Src/mc_interface.c ****     pHandle->pPWM->offsetCalibStatus = false;
 450:Src/mc_interface.c ****     RetVal = true;
 451:Src/mc_interface.c ****   }
 452:Src/mc_interface.c ****   else
 453:Src/mc_interface.c ****   {
 454:Src/mc_interface.c ****     /* reject the command as the condition are not met */
 455:Src/mc_interface.c ****     RetVal = false;
 456:Src/mc_interface.c ****   }
 457:Src/mc_interface.c **** 
ARM GAS  /tmp/ccX12T6L.s 			page 18


 458:Src/mc_interface.c ****   return (RetVal);
 459:Src/mc_interface.c **** }
 460:Src/mc_interface.c **** 
 461:Src/mc_interface.c **** /**
 462:Src/mc_interface.c ****   * @brief  This is a user command used to get the phase offset values.
 463:Src/mc_interface.c ****   *         User must take  care of this possibility by checking the return value.\n
 464:Src/mc_interface.c ****   *         <B>Note:</B> The MCI_GetCalibratedOffsetsMotor command is used to get the phase
 465:Src/mc_interface.c ****   *          offset values .
 466:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 467:Src/mc_interface.c ****   * @param  pHandle Pointer on ploarization offset structure that conatains phase A, and C values.
 468:Src/mc_interface.c ****   * @retval bool It returns true if the command is successfully executed
 469:Src/mc_interface.c ****   *         otherwise it return false.
 470:Src/mc_interface.c ****   */
 471:Src/mc_interface.c **** __weak bool MCI_GetCalibratedOffsetsMotor(MCI_Handle_t* pHandle, PolarizationOffsets_t * Polarizati
 472:Src/mc_interface.c **** {
 534              		.loc 1 472 1 is_stmt 1 view -0
 535              		.cfi_startproc
 536              		@ args = 0, pretend = 0, frame = 0
 537              		@ frame_needed = 0, uses_anonymous_args = 0
 538              		.loc 1 472 1 is_stmt 0 view .LVU135
 539 0000 10B5     		push	{r4, lr}
 540              		.cfi_def_cfa_offset 8
 541              		.cfi_offset 4, -8
 542              		.cfi_offset 14, -4
 473:Src/mc_interface.c ****   bool RetVal;
 543              		.loc 1 473 3 is_stmt 1 view .LVU136
 474:Src/mc_interface.c **** 
 475:Src/mc_interface.c ****   if ( pHandle->pPWM->offsetCalibStatus == true )
 544              		.loc 1 475 3 view .LVU137
 545              		.loc 1 475 15 is_stmt 0 view .LVU138
 546 0002 8068     		ldr	r0, [r0, #8]
 547              	.LVL38:
 548              		.loc 1 475 21 view .LVU139
 549 0004 90F86E40 		ldrb	r4, [r0, #110]	@ zero_extendqisi2
 550              		.loc 1 475 6 view .LVU140
 551 0008 0CB9     		cbnz	r4, .L27
 552              	.LVL39:
 553              	.L25:
 476:Src/mc_interface.c ****   {
 477:Src/mc_interface.c ****     PWMC_GetOffsetCalib(pHandle->pPWM, PolarizationOffsets);
 478:Src/mc_interface.c ****     RetVal = true;
 479:Src/mc_interface.c ****   }
 480:Src/mc_interface.c ****   else
 481:Src/mc_interface.c ****   {
 482:Src/mc_interface.c ****     RetVal = false;
 483:Src/mc_interface.c ****   }
 484:Src/mc_interface.c **** 
 485:Src/mc_interface.c ****   return(RetVal);
 554              		.loc 1 485 3 is_stmt 1 view .LVU141
 486:Src/mc_interface.c **** }
 555              		.loc 1 486 1 is_stmt 0 view .LVU142
 556 000a 2046     		mov	r0, r4
 557 000c 10BD     		pop	{r4, pc}
 558              	.LVL40:
 559              	.L27:
 477:Src/mc_interface.c ****     RetVal = true;
 560              		.loc 1 477 5 is_stmt 1 view .LVU143
ARM GAS  /tmp/ccX12T6L.s 			page 19


 561 000e FFF7FEFF 		bl	PWMC_GetOffsetCalib
 562              	.LVL41:
 478:Src/mc_interface.c ****   }
 563              		.loc 1 478 5 view .LVU144
 478:Src/mc_interface.c ****   }
 564              		.loc 1 478 5 is_stmt 0 view .LVU145
 565 0012 FAE7     		b	.L25
 566              		.cfi_endproc
 567              	.LFE1450:
 569              		.section	.text.MCI_FaultProcessing,"ax",%progbits
 570              		.align	1
 571              		.weak	MCI_FaultProcessing
 572              		.syntax unified
 573              		.thumb
 574              		.thumb_func
 575              		.fpu fpv4-sp-d16
 577              	MCI_FaultProcessing:
 578              	.LVL42:
 579              	.LFB1454:
 487:Src/mc_interface.c **** 
 488:Src/mc_interface.c **** /**
 489:Src/mc_interface.c ****   * @brief  This is a user command used to set the phase offset values.
 490:Src/mc_interface.c ****   *         If the state machine is in IDLE state the command is executed
 491:Src/mc_interface.c ****   *         instantaneously otherwise the command is discarded. User must take
 492:Src/mc_interface.c ****   *         care of this possibility by checking the return value.\n
 493:Src/mc_interface.c ****   *         <B>Note:</B> The MCI_SetCalibratedOffsetsMotor command is used to set the phase
 494:Src/mc_interface.c ****   *          offset values . The command MCI_SetCalibratedOffsetsMotor is not blocking
 495:Src/mc_interface.c ****   *         the execution of project until the measurments are done; to do this, the user
 496:Src/mc_interface.c ****   *         have to check the state machine and verify that the IDLE state (or
 497:Src/mc_interface.c ****   *         any other state) has been reached.
 498:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 499:Src/mc_interface.c ****   * @param  pHandle Pointer on ploarization offset structure that contains phase A, and C values.
 500:Src/mc_interface.c ****   * @retval bool It returns true if the command is successfully executed
 501:Src/mc_interface.c ****   *         otherwise it return false.
 502:Src/mc_interface.c ****   */
 503:Src/mc_interface.c **** __weak bool MCI_SetCalibratedOffsetsMotor( MCI_Handle_t* pHandle, PolarizationOffsets_t * Polarizat
 504:Src/mc_interface.c **** {
 505:Src/mc_interface.c ****   bool RetVal;
 506:Src/mc_interface.c **** 
 507:Src/mc_interface.c ****   if ((IDLE == MCI_GetSTMState(pHandle)) &&
 508:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 509:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 510:Src/mc_interface.c ****   {
 511:Src/mc_interface.c ****       PWMC_SetOffsetCalib(pHandle->pPWM, PolarizationOffsets);
 512:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = true;
 513:Src/mc_interface.c ****       RetVal = true;
 514:Src/mc_interface.c ****   }
 515:Src/mc_interface.c **** 
 516:Src/mc_interface.c ****     return(RetVal);
 517:Src/mc_interface.c **** }
 518:Src/mc_interface.c **** 
 519:Src/mc_interface.c **** /**
 520:Src/mc_interface.c ****   * @brief  This is a user command used to begin the stop motor procedure.
 521:Src/mc_interface.c ****   *         If the state machine is in RUN or START states the command is
 522:Src/mc_interface.c ****   *         executed instantaneously otherwise the command is discarded. User
 523:Src/mc_interface.c ****   *         must take care of this possibility by checking the return value.\n
 524:Src/mc_interface.c ****   *         <B>Note:</B> The MCI_StopMotor command is used just to begin the
ARM GAS  /tmp/ccX12T6L.s 			page 20


 525:Src/mc_interface.c ****   *         stop motor procedure moving the state machine to ANY_STOP.
 526:Src/mc_interface.c ****   *         The command MCI_StopMotor is not blocking the execution of project
 527:Src/mc_interface.c ****   *         until the motor is really stopped; to do this, the user have to
 528:Src/mc_interface.c ****   *         check the state machine and verify that the IDLE state has been
 529:Src/mc_interface.c ****   *         reached again.
 530:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 531:Src/mc_interface.c ****   * @retval bool It returns true if the command is successfully executed
 532:Src/mc_interface.c ****   *         otherwise it return false.
 533:Src/mc_interface.c ****   */
 534:Src/mc_interface.c **** __weak bool MCI_StopMotor(MCI_Handle_t * pHandle)
 535:Src/mc_interface.c **** {
 536:Src/mc_interface.c ****   bool RetVal;
 537:Src/mc_interface.c ****   bool status;
 538:Src/mc_interface.c ****   MCI_State_t State;
 539:Src/mc_interface.c **** 
 540:Src/mc_interface.c ****   State = MCI_GetSTMState(pHandle);
 541:Src/mc_interface.c ****   if (IDLE == State  || ICLWAIT == State)
 542:Src/mc_interface.c ****   {
 543:Src/mc_interface.c ****     status = false;
 544:Src/mc_interface.c ****   }
 545:Src/mc_interface.c ****   else
 546:Src/mc_interface.c ****   {
 547:Src/mc_interface.c ****     status = true;
 548:Src/mc_interface.c ****   }
 549:Src/mc_interface.c **** 
 550:Src/mc_interface.c ****   if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 551:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 552:Src/mc_interface.c ****        status == true )
 553:Src/mc_interface.c ****   {
 554:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_STOP;
 555:Src/mc_interface.c ****     RetVal = true;
 556:Src/mc_interface.c ****   }
 557:Src/mc_interface.c ****   else
 558:Src/mc_interface.c ****   {
 559:Src/mc_interface.c ****     /* reject the command as the condition are not met */
 560:Src/mc_interface.c ****     RetVal = false;
 561:Src/mc_interface.c ****   }
 562:Src/mc_interface.c **** 
 563:Src/mc_interface.c ****   return (RetVal);
 564:Src/mc_interface.c **** }
 565:Src/mc_interface.c **** 
 566:Src/mc_interface.c **** /**
 567:Src/mc_interface.c ****   * @brief  This is a user command used to indicate that the user has seen the
 568:Src/mc_interface.c ****   *         error condition. If is possible, the command is executed
 569:Src/mc_interface.c ****   *         instantaneously otherwise the command is discarded. User must take
 570:Src/mc_interface.c ****   *         care of this possibility by checking the return value.
 571:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 572:Src/mc_interface.c ****   * @retval bool It returns true if the command is successfully executed
 573:Src/mc_interface.c ****   *         otherwise it return false.
 574:Src/mc_interface.c ****   */
 575:Src/mc_interface.c **** __weak bool MCI_FaultAcknowledged(MCI_Handle_t *pHandle)
 576:Src/mc_interface.c **** {
 577:Src/mc_interface.c ****   bool RetVal;
 578:Src/mc_interface.c **** 
 579:Src/mc_interface.c ****   if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 580:Src/mc_interface.c ****   {
 581:Src/mc_interface.c ****     pHandle->PastFaults = MC_NO_FAULTS;
ARM GAS  /tmp/ccX12T6L.s 			page 21


 582:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_ACK_FAULTS;
 583:Src/mc_interface.c ****     RetVal = true;
 584:Src/mc_interface.c ****   }
 585:Src/mc_interface.c ****   else
 586:Src/mc_interface.c ****   {
 587:Src/mc_interface.c ****     /* reject the command as the conditions are not met */
 588:Src/mc_interface.c ****     RetVal = false;
 589:Src/mc_interface.c ****   }
 590:Src/mc_interface.c ****   return (RetVal);
 591:Src/mc_interface.c **** }
 592:Src/mc_interface.c **** 
 593:Src/mc_interface.c **** /**
 594:Src/mc_interface.c ****  * @brief It clocks both HW and SW faults processing and update the state
 595:Src/mc_interface.c ****  *        machine accordingly with hSetErrors, hResetErrors and present state.
 596:Src/mc_interface.c ****  *        Refer to State_t description for more information about fault states.
 597:Src/mc_interface.c ****  * @param pHanlde pointer of type  STM_Handle_t
 598:Src/mc_interface.c ****  * @param hSetErrors Bit field reporting faults currently present
 599:Src/mc_interface.c ****  * @param hResetErrors Bit field reporting faults to be cleared
 600:Src/mc_interface.c ****  * @retval State_t New state machine state after fault processing
 601:Src/mc_interface.c ****  */
 602:Src/mc_interface.c **** __weak void MCI_FaultProcessing(MCI_Handle_t *pHandle, uint16_t hSetErrors, uint16_t hResetErrors)
 603:Src/mc_interface.c **** {
 580              		.loc 1 603 1 is_stmt 1 view -0
 581              		.cfi_startproc
 582              		@ args = 0, pretend = 0, frame = 0
 583              		@ frame_needed = 0, uses_anonymous_args = 0
 584              		@ link register save eliminated.
 604:Src/mc_interface.c ****   /* Set current errors */
 605:Src/mc_interface.c ****   pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 585              		.loc 1 605 3 view .LVU147
 586              		.loc 1 605 36 is_stmt 0 view .LVU148
 587 0000 438B     		ldrh	r3, [r0, #26]
 588              		.loc 1 605 67 view .LVU149
 589 0002 0B43     		orrs	r3, r3, r1
 590 0004 23EA0203 		bic	r3, r3, r2
 591              		.loc 1 605 26 view .LVU150
 592 0008 4383     		strh	r3, [r0, #26]	@ movhi
 606:Src/mc_interface.c ****   pHandle->PastFaults |= hSetErrors;
 593              		.loc 1 606 3 is_stmt 1 view .LVU151
 594              		.loc 1 606 23 is_stmt 0 view .LVU152
 595 000a 838B     		ldrh	r3, [r0, #28]
 596 000c 1943     		orrs	r1, r1, r3
 597              	.LVL43:
 598              		.loc 1 606 23 view .LVU153
 599 000e 8183     		strh	r1, [r0, #28]	@ movhi
 607:Src/mc_interface.c **** 
 608:Src/mc_interface.c ****   return;
 600              		.loc 1 608 3 is_stmt 1 view .LVU154
 609:Src/mc_interface.c **** }
 601              		.loc 1 609 1 is_stmt 0 view .LVU155
 602 0010 7047     		bx	lr
 603              		.cfi_endproc
 604              	.LFE1454:
 606              		.section	.text.MCI_ExecBufferedCommands,"ax",%progbits
 607              		.align	1
 608              		.weak	MCI_ExecBufferedCommands
 609              		.syntax unified
ARM GAS  /tmp/ccX12T6L.s 			page 22


 610              		.thumb
 611              		.thumb_func
 612              		.fpu fpv4-sp-d16
 614              	MCI_ExecBufferedCommands:
 615              	.LVL44:
 616              	.LFB1455:
 610:Src/mc_interface.c **** 
 611:Src/mc_interface.c **** /**
 612:Src/mc_interface.c ****   * @brief  This is usually a method managed by task. It must be called
 613:Src/mc_interface.c ****   *         periodically in order to check the status of the related pSTM object
 614:Src/mc_interface.c ****   *         and eventually to execute the buffered command if the condition
 615:Src/mc_interface.c ****   *         occurs.
 616:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 617:Src/mc_interface.c ****   * @retval none.
 618:Src/mc_interface.c ****   */
 619:Src/mc_interface.c **** __weak void MCI_ExecBufferedCommands(MCI_Handle_t *pHandle)
 620:Src/mc_interface.c **** {
 617              		.loc 1 620 1 is_stmt 1 view -0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 0
 620              		@ frame_needed = 0, uses_anonymous_args = 0
 621:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 622:Src/mc_interface.c ****   if (NULL == pHandle)
 623:Src/mc_interface.c ****   {
 624:Src/mc_interface.c ****     /* Nothing to do */
 625:Src/mc_interface.c ****   }
 626:Src/mc_interface.c ****   else
 627:Src/mc_interface.c ****   {
 628:Src/mc_interface.c **** #endif
 629:Src/mc_interface.c ****     if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 621              		.loc 1 629 5 view .LVU157
 622              		.loc 1 629 17 is_stmt 0 view .LVU158
 623 0000 837F     		ldrb	r3, [r0, #30]	@ zero_extendqisi2
 624              		.loc 1 629 8 view .LVU159
 625 0002 012B     		cmp	r3, #1
 626 0004 00D0     		beq	.L40
 627 0006 7047     		bx	lr
 628              	.L40:
 620:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 629              		.loc 1 620 1 view .LVU160
 630 0008 10B5     		push	{r4, lr}
 631              		.cfi_def_cfa_offset 8
 632              		.cfi_offset 4, -8
 633              		.cfi_offset 14, -4
 634 000a 0446     		mov	r4, r0
 635              	.LBB28:
 630:Src/mc_interface.c ****     {
 631:Src/mc_interface.c ****       bool commandHasBeenExecuted = false;
 636              		.loc 1 631 7 is_stmt 1 view .LVU161
 637              	.LVL45:
 632:Src/mc_interface.c ****       switch (pHandle->lastCommand)
 638              		.loc 1 632 7 view .LVU162
 639              		.loc 1 632 22 is_stmt 0 view .LVU163
 640 000c 037B     		ldrb	r3, [r0, #12]	@ zero_extendqisi2
 641              		.loc 1 632 7 view .LVU164
 642 000e 022B     		cmp	r3, #2
 643 0010 17D0     		beq	.L31
ARM GAS  /tmp/ccX12T6L.s 			page 23


 644              		.loc 1 632 7 view .LVU165
 645 0012 032B     		cmp	r3, #3
 646 0014 24D0     		beq	.L32
 647 0016 012B     		cmp	r3, #1
 648 0018 02D0     		beq	.L41
 649              	.LVL46:
 650              	.L33:
 633:Src/mc_interface.c ****       {
 634:Src/mc_interface.c ****         case MCI_CMD_EXECSPEEDRAMP:
 635:Src/mc_interface.c ****         {
 636:Src/mc_interface.c ****           pHandle->pFOCVars->bDriveInput = INTERNAL;
 637:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 638:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDura
 639:Src/mc_interface.c ****           break;
 640:Src/mc_interface.c ****         }
 641:Src/mc_interface.c **** 
 642:Src/mc_interface.c ****         case MCI_CMD_EXECTORQUERAMP:
 643:Src/mc_interface.c ****         {
 644:Src/mc_interface.c ****           pHandle->pFOCVars->bDriveInput = INTERNAL;
 645:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 646:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDur
 647:Src/mc_interface.c ****           break;
 648:Src/mc_interface.c ****         }
 649:Src/mc_interface.c **** 
 650:Src/mc_interface.c ****         case MCI_CMD_SETCURRENTREFERENCES:
 651:Src/mc_interface.c ****         {
 652:Src/mc_interface.c ****           pHandle->pFOCVars->bDriveInput = EXTERNAL;
 653:Src/mc_interface.c ****           pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 654:Src/mc_interface.c ****           commandHasBeenExecuted = true;
 655:Src/mc_interface.c ****           break;
 656:Src/mc_interface.c ****         }
 657:Src/mc_interface.c ****         default:
 658:Src/mc_interface.c ****           break;
 659:Src/mc_interface.c ****       }
 660:Src/mc_interface.c **** 
 661:Src/mc_interface.c ****       if (commandHasBeenExecuted)
 662:Src/mc_interface.c ****       {
 663:Src/mc_interface.c ****         pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 664:Src/mc_interface.c ****       }
 665:Src/mc_interface.c ****       else
 666:Src/mc_interface.c ****       {
 667:Src/mc_interface.c ****         pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 651              		.loc 1 667 9 is_stmt 1 view .LVU166
 652              		.loc 1 667 31 is_stmt 0 view .LVU167
 653 001a 0323     		movs	r3, #3
 654 001c A377     		strb	r3, [r4, #30]
 655              	.LBE28:
 668:Src/mc_interface.c ****       }
 669:Src/mc_interface.c ****     }
 670:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 671:Src/mc_interface.c ****   }
 672:Src/mc_interface.c **** #endif
 673:Src/mc_interface.c **** }
 656              		.loc 1 673 1 view .LVU168
 657 001e 29E0     		b	.L29
 658              	.LVL47:
 659              	.L41:
ARM GAS  /tmp/ccX12T6L.s 			page 24


 660              	.LBB29:
 636:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 661              		.loc 1 636 11 is_stmt 1 view .LVU169
 636:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 662              		.loc 1 636 18 is_stmt 0 view .LVU170
 663 0020 4368     		ldr	r3, [r0, #4]
 636:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 664              		.loc 1 636 42 view .LVU171
 665 0022 0022     		movs	r2, #0
 666 0024 83F82420 		strb	r2, [r3, #36]
 637:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDura
 667              		.loc 1 637 11 is_stmt 1 view .LVU172
 668 0028 0321     		movs	r1, #3
 669 002a 0068     		ldr	r0, [r0]
 670              	.LVL48:
 637:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDura
 671              		.loc 1 637 11 is_stmt 0 view .LVU173
 672 002c FFF7FEFF 		bl	STC_SetControlMode
 673              	.LVL49:
 638:Src/mc_interface.c ****           break;
 674              		.loc 1 638 11 is_stmt 1 view .LVU174
 638:Src/mc_interface.c ****           break;
 675              		.loc 1 638 36 is_stmt 0 view .LVU175
 676 0030 E28A     		ldrh	r2, [r4, #22]
 677 0032 B4F90E10 		ldrsh	r1, [r4, #14]
 678 0036 2068     		ldr	r0, [r4]
 679 0038 FFF7FEFF 		bl	STC_ExecRamp
 680              	.LVL50:
 639:Src/mc_interface.c ****         }
 681              		.loc 1 639 11 is_stmt 1 view .LVU176
 682              	.L34:
 661:Src/mc_interface.c ****       {
 683              		.loc 1 661 7 view .LVU177
 661:Src/mc_interface.c ****       {
 684              		.loc 1 661 10 is_stmt 0 view .LVU178
 685 003c 0028     		cmp	r0, #0
 686 003e ECD0     		beq	.L33
 661:Src/mc_interface.c ****       {
 687              		.loc 1 661 10 view .LVU179
 688 0040 16E0     		b	.L35
 689              	.LVL51:
 690              	.L31:
 644:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 691              		.loc 1 644 11 is_stmt 1 view .LVU180
 644:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 692              		.loc 1 644 18 is_stmt 0 view .LVU181
 693 0042 4368     		ldr	r3, [r0, #4]
 644:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 694              		.loc 1 644 42 view .LVU182
 695 0044 0022     		movs	r2, #0
 696 0046 83F82420 		strb	r2, [r3, #36]
 645:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDur
 697              		.loc 1 645 11 is_stmt 1 view .LVU183
 698 004a 0421     		movs	r1, #4
 699 004c 0068     		ldr	r0, [r0]
 700              	.LVL52:
 645:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDur
ARM GAS  /tmp/ccX12T6L.s 			page 25


 701              		.loc 1 645 11 is_stmt 0 view .LVU184
 702 004e FFF7FEFF 		bl	STC_SetControlMode
 703              	.LVL53:
 646:Src/mc_interface.c ****           break;
 704              		.loc 1 646 11 is_stmt 1 view .LVU185
 646:Src/mc_interface.c ****           break;
 705              		.loc 1 646 36 is_stmt 0 view .LVU186
 706 0052 E28A     		ldrh	r2, [r4, #22]
 707 0054 B4F91010 		ldrsh	r1, [r4, #16]
 708 0058 2068     		ldr	r0, [r4]
 709 005a FFF7FEFF 		bl	STC_ExecRamp
 710              	.LVL54:
 647:Src/mc_interface.c ****         }
 711              		.loc 1 647 11 is_stmt 1 view .LVU187
 712 005e EDE7     		b	.L34
 713              	.LVL55:
 714              	.L32:
 652:Src/mc_interface.c ****           pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 715              		.loc 1 652 11 view .LVU188
 652:Src/mc_interface.c ****           pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 716              		.loc 1 652 18 is_stmt 0 view .LVU189
 717 0060 4368     		ldr	r3, [r0, #4]
 652:Src/mc_interface.c ****           pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 718              		.loc 1 652 42 view .LVU190
 719 0062 0122     		movs	r2, #1
 720 0064 83F82420 		strb	r2, [r3, #36]
 653:Src/mc_interface.c ****           commandHasBeenExecuted = true;
 721              		.loc 1 653 11 is_stmt 1 view .LVU191
 653:Src/mc_interface.c ****           commandHasBeenExecuted = true;
 722              		.loc 1 653 18 is_stmt 0 view .LVU192
 723 0068 4368     		ldr	r3, [r0, #4]
 653:Src/mc_interface.c ****           commandHasBeenExecuted = true;
 724              		.loc 1 653 37 view .LVU193
 725 006a D0F81220 		ldr	r2, [r0, #18]	@ unaligned
 726 006e 1A61     		str	r2, [r3, #16]	@ unaligned
 654:Src/mc_interface.c ****           break;
 727              		.loc 1 654 11 is_stmt 1 view .LVU194
 728              	.LVL56:
 655:Src/mc_interface.c ****         }
 729              		.loc 1 655 11 view .LVU195
 661:Src/mc_interface.c ****       {
 730              		.loc 1 661 7 view .LVU196
 731              	.L35:
 663:Src/mc_interface.c ****       }
 732              		.loc 1 663 9 view .LVU197
 663:Src/mc_interface.c ****       }
 733              		.loc 1 663 31 is_stmt 0 view .LVU198
 734 0070 0223     		movs	r3, #2
 735 0072 A377     		strb	r3, [r4, #30]
 736              	.L29:
 663:Src/mc_interface.c ****       }
 737              		.loc 1 663 31 view .LVU199
 738              	.LBE29:
 739              		.loc 1 673 1 view .LVU200
 740 0074 10BD     		pop	{r4, pc}
 741              		.loc 1 673 1 view .LVU201
 742              		.cfi_endproc
ARM GAS  /tmp/ccX12T6L.s 			page 26


 743              	.LFE1455:
 745              		.section	.text.MCI_IsCommandAcknowledged,"ax",%progbits
 746              		.align	1
 747              		.weak	MCI_IsCommandAcknowledged
 748              		.syntax unified
 749              		.thumb
 750              		.thumb_func
 751              		.fpu fpv4-sp-d16
 753              	MCI_IsCommandAcknowledged:
 754              	.LVL57:
 755              	.LFB1456:
 674:Src/mc_interface.c **** 
 675:Src/mc_interface.c **** /**
 676:Src/mc_interface.c ****   * @brief  It returns information about the state of the last buffered command.
 677:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 678:Src/mc_interface.c ****   * @retval CommandState_t  It can be one of the following codes:
 679:Src/mc_interface.c ****   *         - MCI_BUFFER_EMPTY if no buffered command has been called.
 680:Src/mc_interface.c ****   *         - MCI_COMMAND_NOT_ALREADY_EXECUTED if the buffered command
 681:Src/mc_interface.c ****   *         condition hasn't already occurred.
 682:Src/mc_interface.c ****   *         - MCI_COMMAND_EXECUTED_SUCCESFULLY if the buffered command has
 683:Src/mc_interface.c ****   *         been executed successfully. In this case calling this function reset
 684:Src/mc_interface.c ****   *         the command state to BC_BUFFER_EMPTY.
 685:Src/mc_interface.c ****   *         - MCI_COMMAND_EXECUTED_UNSUCCESFULLY if the buffered command has
 686:Src/mc_interface.c ****   *         been executed unsuccessfully. In this case calling this function
 687:Src/mc_interface.c ****   *         reset the command state to BC_BUFFER_EMPTY.
 688:Src/mc_interface.c ****   */
 689:Src/mc_interface.c **** __weak MCI_CommandState_t  MCI_IsCommandAcknowledged(MCI_Handle_t *pHandle)
 690:Src/mc_interface.c **** {
 756              		.loc 1 690 1 is_stmt 1 view -0
 757              		.cfi_startproc
 758              		@ args = 0, pretend = 0, frame = 0
 759              		@ frame_needed = 0, uses_anonymous_args = 0
 760              		@ link register save eliminated.
 761              		.loc 1 690 1 is_stmt 0 view .LVU203
 762 0000 0346     		mov	r3, r0
 691:Src/mc_interface.c ****   MCI_CommandState_t retVal;
 763              		.loc 1 691 3 is_stmt 1 view .LVU204
 692:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 693:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 694:Src/mc_interface.c ****   {
 695:Src/mc_interface.c ****     retVal = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 696:Src/mc_interface.c ****   }
 697:Src/mc_interface.c ****   else
 698:Src/mc_interface.c ****   {
 699:Src/mc_interface.c **** #endif
 700:Src/mc_interface.c ****     retVal = pHandle->CommandState;
 764              		.loc 1 700 5 view .LVU205
 765              		.loc 1 700 12 is_stmt 0 view .LVU206
 766 0002 807F     		ldrb	r0, [r0, #30]	@ zero_extendqisi2
 767              	.LVL58:
 701:Src/mc_interface.c **** 
 702:Src/mc_interface.c ****     if ((MCI_COMMAND_EXECUTED_SUCCESFULLY == retVal) || (MCI_COMMAND_EXECUTED_UNSUCCESFULLY == retV
 768              		.loc 1 702 5 is_stmt 1 view .LVU207
 769              		.loc 1 702 54 is_stmt 0 view .LVU208
 770 0004 821E     		subs	r2, r0, #2
 771 0006 D2B2     		uxtb	r2, r2
 772              		.loc 1 702 8 view .LVU209
ARM GAS  /tmp/ccX12T6L.s 			page 27


 773 0008 012A     		cmp	r2, #1
 774 000a 00D9     		bls	.L44
 775              	.L43:
 703:Src/mc_interface.c ****     {
 704:Src/mc_interface.c ****       pHandle->CommandState = MCI_BUFFER_EMPTY;
 705:Src/mc_interface.c ****     }
 706:Src/mc_interface.c ****     else
 707:Src/mc_interface.c ****     {
 708:Src/mc_interface.c ****       /* Nothing to do */
 709:Src/mc_interface.c ****     }
 776              		.loc 1 709 5 is_stmt 1 view .LVU210
 710:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 711:Src/mc_interface.c ****   }
 712:Src/mc_interface.c **** #endif
 713:Src/mc_interface.c ****   return (retVal);
 777              		.loc 1 713 3 view .LVU211
 714:Src/mc_interface.c **** }
 778              		.loc 1 714 1 is_stmt 0 view .LVU212
 779 000c 7047     		bx	lr
 780              	.L44:
 704:Src/mc_interface.c ****     }
 781              		.loc 1 704 7 is_stmt 1 view .LVU213
 704:Src/mc_interface.c ****     }
 782              		.loc 1 704 29 is_stmt 0 view .LVU214
 783 000e 0022     		movs	r2, #0
 784 0010 9A77     		strb	r2, [r3, #30]
 785 0012 FBE7     		b	.L43
 786              		.cfi_endproc
 787              	.LFE1456:
 789              		.section	.text.MCI_GetSTMState,"ax",%progbits
 790              		.align	1
 791              		.weak	MCI_GetSTMState
 792              		.syntax unified
 793              		.thumb
 794              		.thumb_func
 795              		.fpu fpv4-sp-d16
 797              	MCI_GetSTMState:
 798              	.LVL59:
 799              	.LFB1457:
 715:Src/mc_interface.c **** 
 716:Src/mc_interface.c **** /**
 717:Src/mc_interface.c ****   * @brief  It returns information about the state of the related pSTM object.
 718:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 719:Src/mc_interface.c ****   * @retval State_t It returns the current state of the related pSTM object.
 720:Src/mc_interface.c ****   */
 721:Src/mc_interface.c **** __weak MCI_State_t  MCI_GetSTMState(MCI_Handle_t *pHandle)
 722:Src/mc_interface.c **** {
 800              		.loc 1 722 1 is_stmt 1 view -0
 801              		.cfi_startproc
 802              		@ args = 0, pretend = 0, frame = 0
 803              		@ frame_needed = 0, uses_anonymous_args = 0
 804              		@ link register save eliminated.
 723:Src/mc_interface.c ****   return (pHandle->State);
 805              		.loc 1 723 3 view .LVU216
 724:Src/mc_interface.c **** }
 806              		.loc 1 724 1 is_stmt 0 view .LVU217
 807 0000 407E     		ldrb	r0, [r0, #25]	@ zero_extendqisi2
ARM GAS  /tmp/ccX12T6L.s 			page 28


 808              	.LVL60:
 809              		.loc 1 724 1 view .LVU218
 810 0002 7047     		bx	lr
 811              		.cfi_endproc
 812              	.LFE1457:
 814              		.section	.text.MCI_GetOccurredFaults,"ax",%progbits
 815              		.align	1
 816              		.weak	MCI_GetOccurredFaults
 817              		.syntax unified
 818              		.thumb
 819              		.thumb_func
 820              		.fpu fpv4-sp-d16
 822              	MCI_GetOccurredFaults:
 823              	.LVL61:
 824              	.LFB1458:
 725:Src/mc_interface.c **** 
 726:Src/mc_interface.c **** /**
 727:Src/mc_interface.c ****   * @brief It returns a 16 bit fields containing information about faults
 728:Src/mc_interface.c ****   *        historically occurred since the state machine has been moved into
 729:Src/mc_interface.c ****   *        FAULT_NOW state.
 730:Src/mc_interface.c ****   * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
 731:Src/mc_interface.c ****   * @param pHandle Pointer on the component instance to work on.
 732:Src/mc_interface.c ****   * @retval uint16_t  16 bit fields with information about the faults
 733:Src/mc_interface.c ****   *         historically occurred since the state machine has been moved into
 734:Src/mc_interface.c ****   *         FAULT_NOW state.
 735:Src/mc_interface.c ****   * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
 736:Src/mc_interface.c ****   */
 737:Src/mc_interface.c **** __weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle)
 738:Src/mc_interface.c **** {
 825              		.loc 1 738 1 is_stmt 1 view -0
 826              		.cfi_startproc
 827              		@ args = 0, pretend = 0, frame = 0
 828              		@ frame_needed = 0, uses_anonymous_args = 0
 829              		@ link register save eliminated.
 739:Src/mc_interface.c ****   return ((uint16_t)pHandle->PastFaults);
 830              		.loc 1 739 3 view .LVU220
 740:Src/mc_interface.c **** }
 831              		.loc 1 740 1 is_stmt 0 view .LVU221
 832 0000 808B     		ldrh	r0, [r0, #28]
 833              	.LVL62:
 834              		.loc 1 740 1 view .LVU222
 835 0002 7047     		bx	lr
 836              		.cfi_endproc
 837              	.LFE1458:
 839              		.section	.text.MCI_GetCurrentFaults,"ax",%progbits
 840              		.align	1
 841              		.weak	MCI_GetCurrentFaults
 842              		.syntax unified
 843              		.thumb
 844              		.thumb_func
 845              		.fpu fpv4-sp-d16
 847              	MCI_GetCurrentFaults:
 848              	.LVL63:
 849              	.LFB1459:
 741:Src/mc_interface.c **** 
 742:Src/mc_interface.c **** /**
 743:Src/mc_interface.c ****   * @brief It returns a 16 bit fields containing information about faults
ARM GAS  /tmp/ccX12T6L.s 			page 29


 744:Src/mc_interface.c ****   *        currently present.
 745:Src/mc_interface.c ****   * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
 746:Src/mc_interface.c ****   * @param pHandle Pointer on the component instance to work on.
 747:Src/mc_interface.c ****   * @retval uint16_t  16 bit fields with information about about currently
 748:Src/mc_interface.c ****   *         present faults.
 749:Src/mc_interface.c ****   * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
 750:Src/mc_interface.c ****   */
 751:Src/mc_interface.c **** __weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle)
 752:Src/mc_interface.c **** {
 850              		.loc 1 752 1 is_stmt 1 view -0
 851              		.cfi_startproc
 852              		@ args = 0, pretend = 0, frame = 0
 853              		@ frame_needed = 0, uses_anonymous_args = 0
 854              		@ link register save eliminated.
 753:Src/mc_interface.c ****   return ((uint16_t)pHandle->CurrentFaults);
 855              		.loc 1 753 3 view .LVU224
 754:Src/mc_interface.c **** }
 856              		.loc 1 754 1 is_stmt 0 view .LVU225
 857 0000 408B     		ldrh	r0, [r0, #26]
 858              	.LVL64:
 859              		.loc 1 754 1 view .LVU226
 860 0002 7047     		bx	lr
 861              		.cfi_endproc
 862              	.LFE1459:
 864              		.section	.text.MCI_StartMotor,"ax",%progbits
 865              		.align	1
 866              		.weak	MCI_StartMotor
 867              		.syntax unified
 868              		.thumb
 869              		.thumb_func
 870              		.fpu fpv4-sp-d16
 872              	MCI_StartMotor:
 873              	.LVL65:
 874              	.LFB1447:
 361:Src/mc_interface.c ****   bool RetVal;
 875              		.loc 1 361 1 is_stmt 1 view -0
 876              		.cfi_startproc
 877              		@ args = 0, pretend = 0, frame = 0
 878              		@ frame_needed = 0, uses_anonymous_args = 0
 361:Src/mc_interface.c ****   bool RetVal;
 879              		.loc 1 361 1 is_stmt 0 view .LVU228
 880 0000 10B5     		push	{r4, lr}
 881              		.cfi_def_cfa_offset 8
 882              		.cfi_offset 4, -8
 883              		.cfi_offset 14, -4
 884 0002 0446     		mov	r4, r0
 362:Src/mc_interface.c **** 
 885              		.loc 1 362 3 is_stmt 1 view .LVU229
 364:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 886              		.loc 1 364 3 view .LVU230
 364:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 887              		.loc 1 364 16 is_stmt 0 view .LVU231
 888 0004 FFF7FEFF 		bl	MCI_GetSTMState
 889              	.LVL66:
 364:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 890              		.loc 1 364 6 view .LVU232
 891 0008 08B1     		cbz	r0, .L54
ARM GAS  /tmp/ccX12T6L.s 			page 30


 375:Src/mc_interface.c ****   }
 892              		.loc 1 375 12 view .LVU233
 893 000a 0020     		movs	r0, #0
 894              	.L49:
 895              	.LVL67:
 378:Src/mc_interface.c **** }
 896              		.loc 1 378 3 is_stmt 1 view .LVU234
 379:Src/mc_interface.c **** 
 897              		.loc 1 379 1 is_stmt 0 view .LVU235
 898 000c 10BD     		pop	{r4, pc}
 899              	.LVL68:
 900              	.L54:
 365:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 901              		.loc 1 365 24 discriminator 1 view .LVU236
 902 000e 2046     		mov	r0, r4
 903 0010 FFF7FEFF 		bl	MCI_GetOccurredFaults
 904              	.LVL69:
 364:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 905              		.loc 1 364 42 discriminator 1 view .LVU237
 906 0014 08B1     		cbz	r0, .L55
 375:Src/mc_interface.c ****   }
 907              		.loc 1 375 12 view .LVU238
 908 0016 0020     		movs	r0, #0
 909 0018 F8E7     		b	.L49
 910              	.L55:
 366:Src/mc_interface.c ****   {
 911              		.loc 1 366 24 view .LVU239
 912 001a 2046     		mov	r0, r4
 913 001c FFF7FEFF 		bl	MCI_GetCurrentFaults
 914              	.LVL70:
 365:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 915              		.loc 1 365 56 view .LVU240
 916 0020 18B9     		cbnz	r0, .L52
 368:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 917              		.loc 1 368 5 is_stmt 1 view .LVU241
 368:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 918              		.loc 1 368 28 is_stmt 0 view .LVU242
 919 0022 0120     		movs	r0, #1
 920 0024 2076     		strb	r0, [r4, #24]
 369:Src/mc_interface.c ****     RetVal = true;
 921              		.loc 1 369 5 is_stmt 1 view .LVU243
 369:Src/mc_interface.c ****     RetVal = true;
 922              		.loc 1 369 27 is_stmt 0 view .LVU244
 923 0026 A077     		strb	r0, [r4, #30]
 370:Src/mc_interface.c ****   }
 924              		.loc 1 370 5 is_stmt 1 view .LVU245
 925              	.LVL71:
 370:Src/mc_interface.c ****   }
 926              		.loc 1 370 12 is_stmt 0 view .LVU246
 927 0028 F0E7     		b	.L49
 928              	.LVL72:
 929              	.L52:
 375:Src/mc_interface.c ****   }
 930              		.loc 1 375 12 view .LVU247
 931 002a 0020     		movs	r0, #0
 932 002c EEE7     		b	.L49
 933              		.cfi_endproc
ARM GAS  /tmp/ccX12T6L.s 			page 31


 934              	.LFE1447:
 936              		.section	.text.MCI_StartWithMeasurementOffset,"ax",%progbits
 937              		.align	1
 938              		.weak	MCI_StartWithMeasurementOffset
 939              		.syntax unified
 940              		.thumb
 941              		.thumb_func
 942              		.fpu fpv4-sp-d16
 944              	MCI_StartWithMeasurementOffset:
 945              	.LVL73:
 946              	.LFB1448:
 404:Src/mc_interface.c ****   bool RetVal;
 947              		.loc 1 404 1 is_stmt 1 view -0
 948              		.cfi_startproc
 949              		@ args = 0, pretend = 0, frame = 0
 950              		@ frame_needed = 0, uses_anonymous_args = 0
 404:Src/mc_interface.c ****   bool RetVal;
 951              		.loc 1 404 1 is_stmt 0 view .LVU249
 952 0000 10B5     		push	{r4, lr}
 953              		.cfi_def_cfa_offset 8
 954              		.cfi_offset 4, -8
 955              		.cfi_offset 14, -4
 956 0002 0446     		mov	r4, r0
 405:Src/mc_interface.c **** 
 957              		.loc 1 405 3 is_stmt 1 view .LVU250
 407:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 958              		.loc 1 407 3 view .LVU251
 407:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 959              		.loc 1 407 16 is_stmt 0 view .LVU252
 960 0004 FFF7FEFF 		bl	MCI_GetSTMState
 961              	.LVL74:
 407:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 962              		.loc 1 407 6 view .LVU253
 963 0008 08B1     		cbz	r0, .L62
 419:Src/mc_interface.c ****   }
 964              		.loc 1 419 12 view .LVU254
 965 000a 0020     		movs	r0, #0
 966              	.L57:
 967              	.LVL75:
 422:Src/mc_interface.c **** }
 968              		.loc 1 422 3 is_stmt 1 view .LVU255
 423:Src/mc_interface.c **** 
 969              		.loc 1 423 1 is_stmt 0 view .LVU256
 970 000c 10BD     		pop	{r4, pc}
 971              	.LVL76:
 972              	.L62:
 408:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 973              		.loc 1 408 24 discriminator 1 view .LVU257
 974 000e 2046     		mov	r0, r4
 975 0010 FFF7FEFF 		bl	MCI_GetOccurredFaults
 976              	.LVL77:
 407:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 977              		.loc 1 407 42 discriminator 1 view .LVU258
 978 0014 08B1     		cbz	r0, .L63
 419:Src/mc_interface.c ****   }
 979              		.loc 1 419 12 view .LVU259
 980 0016 0020     		movs	r0, #0
ARM GAS  /tmp/ccX12T6L.s 			page 32


 981 0018 F8E7     		b	.L57
 982              	.L63:
 409:Src/mc_interface.c ****   {
 983              		.loc 1 409 24 view .LVU260
 984 001a 2046     		mov	r0, r4
 985 001c FFF7FEFF 		bl	MCI_GetCurrentFaults
 986              	.LVL78:
 408:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 987              		.loc 1 408 56 view .LVU261
 988 0020 38B9     		cbnz	r0, .L60
 411:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 989              		.loc 1 411 5 is_stmt 1 view .LVU262
 411:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 990              		.loc 1 411 28 is_stmt 0 view .LVU263
 991 0022 0120     		movs	r0, #1
 992 0024 2076     		strb	r0, [r4, #24]
 412:Src/mc_interface.c ****     pHandle->pPWM->offsetCalibStatus = false;
 993              		.loc 1 412 5 is_stmt 1 view .LVU264
 412:Src/mc_interface.c ****     pHandle->pPWM->offsetCalibStatus = false;
 994              		.loc 1 412 27 is_stmt 0 view .LVU265
 995 0026 A077     		strb	r0, [r4, #30]
 413:Src/mc_interface.c ****     RetVal = true;
 996              		.loc 1 413 5 is_stmt 1 view .LVU266
 413:Src/mc_interface.c ****     RetVal = true;
 997              		.loc 1 413 12 is_stmt 0 view .LVU267
 998 0028 A368     		ldr	r3, [r4, #8]
 413:Src/mc_interface.c ****     RetVal = true;
 999              		.loc 1 413 38 view .LVU268
 1000 002a 0022     		movs	r2, #0
 1001 002c 83F86E20 		strb	r2, [r3, #110]
 414:Src/mc_interface.c ****   }
 1002              		.loc 1 414 5 is_stmt 1 view .LVU269
 1003              	.LVL79:
 414:Src/mc_interface.c ****   }
 1004              		.loc 1 414 12 is_stmt 0 view .LVU270
 1005 0030 ECE7     		b	.L57
 1006              	.LVL80:
 1007              	.L60:
 419:Src/mc_interface.c ****   }
 1008              		.loc 1 419 12 view .LVU271
 1009 0032 0020     		movs	r0, #0
 1010 0034 EAE7     		b	.L57
 1011              		.cfi_endproc
 1012              	.LFE1448:
 1014              		.section	.text.MCI_StartOffsetMeasurments,"ax",%progbits
 1015              		.align	1
 1016              		.weak	MCI_StartOffsetMeasurments
 1017              		.syntax unified
 1018              		.thumb
 1019              		.thumb_func
 1020              		.fpu fpv4-sp-d16
 1022              	MCI_StartOffsetMeasurments:
 1023              	.LVL81:
 1024              	.LFB1449:
 441:Src/mc_interface.c ****   bool RetVal;
 1025              		.loc 1 441 1 is_stmt 1 view -0
 1026              		.cfi_startproc
ARM GAS  /tmp/ccX12T6L.s 			page 33


 1027              		@ args = 0, pretend = 0, frame = 0
 1028              		@ frame_needed = 0, uses_anonymous_args = 0
 441:Src/mc_interface.c ****   bool RetVal;
 1029              		.loc 1 441 1 is_stmt 0 view .LVU273
 1030 0000 10B5     		push	{r4, lr}
 1031              		.cfi_def_cfa_offset 8
 1032              		.cfi_offset 4, -8
 1033              		.cfi_offset 14, -4
 1034 0002 0446     		mov	r4, r0
 442:Src/mc_interface.c **** 
 1035              		.loc 1 442 3 is_stmt 1 view .LVU274
 444:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1036              		.loc 1 444 3 view .LVU275
 444:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1037              		.loc 1 444 16 is_stmt 0 view .LVU276
 1038 0004 FFF7FEFF 		bl	MCI_GetSTMState
 1039              	.LVL82:
 444:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1040              		.loc 1 444 6 view .LVU277
 1041 0008 08B1     		cbz	r0, .L70
 455:Src/mc_interface.c ****   }
 1042              		.loc 1 455 12 view .LVU278
 1043 000a 0020     		movs	r0, #0
 1044              	.L65:
 1045              	.LVL83:
 458:Src/mc_interface.c **** }
 1046              		.loc 1 458 3 is_stmt 1 view .LVU279
 459:Src/mc_interface.c **** 
 1047              		.loc 1 459 1 is_stmt 0 view .LVU280
 1048 000c 10BD     		pop	{r4, pc}
 1049              	.LVL84:
 1050              	.L70:
 445:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1051              		.loc 1 445 24 discriminator 1 view .LVU281
 1052 000e 2046     		mov	r0, r4
 1053 0010 FFF7FEFF 		bl	MCI_GetOccurredFaults
 1054              	.LVL85:
 444:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1055              		.loc 1 444 42 discriminator 1 view .LVU282
 1056 0014 08B1     		cbz	r0, .L71
 455:Src/mc_interface.c ****   }
 1057              		.loc 1 455 12 view .LVU283
 1058 0016 0020     		movs	r0, #0
 1059 0018 F8E7     		b	.L65
 1060              	.L71:
 446:Src/mc_interface.c ****   {
 1061              		.loc 1 446 24 view .LVU284
 1062 001a 2046     		mov	r0, r4
 1063 001c FFF7FEFF 		bl	MCI_GetCurrentFaults
 1064              	.LVL86:
 445:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1065              		.loc 1 445 56 view .LVU285
 1066 0020 38B9     		cbnz	r0, .L68
 448:Src/mc_interface.c ****     pHandle->pPWM->offsetCalibStatus = false;
 1067              		.loc 1 448 5 is_stmt 1 view .LVU286
 448:Src/mc_interface.c ****     pHandle->pPWM->offsetCalibStatus = false;
 1068              		.loc 1 448 28 is_stmt 0 view .LVU287
ARM GAS  /tmp/ccX12T6L.s 			page 34


 1069 0022 0323     		movs	r3, #3
 1070 0024 2376     		strb	r3, [r4, #24]
 449:Src/mc_interface.c ****     RetVal = true;
 1071              		.loc 1 449 5 is_stmt 1 view .LVU288
 449:Src/mc_interface.c ****     RetVal = true;
 1072              		.loc 1 449 12 is_stmt 0 view .LVU289
 1073 0026 A368     		ldr	r3, [r4, #8]
 449:Src/mc_interface.c ****     RetVal = true;
 1074              		.loc 1 449 38 view .LVU290
 1075 0028 0022     		movs	r2, #0
 1076 002a 83F86E20 		strb	r2, [r3, #110]
 450:Src/mc_interface.c ****   }
 1077              		.loc 1 450 5 is_stmt 1 view .LVU291
 1078              	.LVL87:
 450:Src/mc_interface.c ****   }
 1079              		.loc 1 450 12 is_stmt 0 view .LVU292
 1080 002e 0120     		movs	r0, #1
 1081 0030 ECE7     		b	.L65
 1082              	.LVL88:
 1083              	.L68:
 455:Src/mc_interface.c ****   }
 1084              		.loc 1 455 12 view .LVU293
 1085 0032 0020     		movs	r0, #0
 1086 0034 EAE7     		b	.L65
 1087              		.cfi_endproc
 1088              	.LFE1449:
 1090              		.section	.text.MCI_SetCalibratedOffsetsMotor,"ax",%progbits
 1091              		.align	1
 1092              		.weak	MCI_SetCalibratedOffsetsMotor
 1093              		.syntax unified
 1094              		.thumb
 1095              		.thumb_func
 1096              		.fpu fpv4-sp-d16
 1098              	MCI_SetCalibratedOffsetsMotor:
 1099              	.LVL89:
 1100              	.LFB1451:
 504:Src/mc_interface.c ****   bool RetVal;
 1101              		.loc 1 504 1 is_stmt 1 view -0
 1102              		.cfi_startproc
 1103              		@ args = 0, pretend = 0, frame = 0
 1104              		@ frame_needed = 0, uses_anonymous_args = 0
 504:Src/mc_interface.c ****   bool RetVal;
 1105              		.loc 1 504 1 is_stmt 0 view .LVU295
 1106 0000 38B5     		push	{r3, r4, r5, lr}
 1107              		.cfi_def_cfa_offset 16
 1108              		.cfi_offset 3, -16
 1109              		.cfi_offset 4, -12
 1110              		.cfi_offset 5, -8
 1111              		.cfi_offset 14, -4
 1112 0002 0446     		mov	r4, r0
 1113 0004 0D46     		mov	r5, r1
 505:Src/mc_interface.c **** 
 1114              		.loc 1 505 3 is_stmt 1 view .LVU296
 507:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1115              		.loc 1 507 3 view .LVU297
 507:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1116              		.loc 1 507 16 is_stmt 0 view .LVU298
ARM GAS  /tmp/ccX12T6L.s 			page 35


 1117 0006 FFF7FEFF 		bl	MCI_GetSTMState
 1118              	.LVL90:
 507:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1119              		.loc 1 507 6 view .LVU299
 1120 000a 08B1     		cbz	r0, .L75
 1121              	.L73:
 1122              	.LVL91:
 516:Src/mc_interface.c **** }
 1123              		.loc 1 516 5 is_stmt 1 view .LVU300
 517:Src/mc_interface.c **** 
 1124              		.loc 1 517 1 is_stmt 0 view .LVU301
 1125 000c 0120     		movs	r0, #1
 1126 000e 38BD     		pop	{r3, r4, r5, pc}
 1127              	.LVL92:
 1128              	.L75:
 508:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1129              		.loc 1 508 24 discriminator 1 view .LVU302
 1130 0010 2046     		mov	r0, r4
 1131 0012 FFF7FEFF 		bl	MCI_GetOccurredFaults
 1132              	.LVL93:
 507:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1133              		.loc 1 507 42 discriminator 1 view .LVU303
 1134 0016 0028     		cmp	r0, #0
 1135 0018 F8D1     		bne	.L73
 509:Src/mc_interface.c ****   {
 1136              		.loc 1 509 24 view .LVU304
 1137 001a 2046     		mov	r0, r4
 1138 001c FFF7FEFF 		bl	MCI_GetCurrentFaults
 1139              	.LVL94:
 508:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1140              		.loc 1 508 56 view .LVU305
 1141 0020 0028     		cmp	r0, #0
 1142 0022 F3D1     		bne	.L73
 511:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = true;
 1143              		.loc 1 511 7 is_stmt 1 view .LVU306
 1144 0024 2946     		mov	r1, r5
 1145 0026 A068     		ldr	r0, [r4, #8]
 1146 0028 FFF7FEFF 		bl	PWMC_SetOffsetCalib
 1147              	.LVL95:
 512:Src/mc_interface.c ****       RetVal = true;
 1148              		.loc 1 512 7 view .LVU307
 512:Src/mc_interface.c ****       RetVal = true;
 1149              		.loc 1 512 14 is_stmt 0 view .LVU308
 1150 002c A368     		ldr	r3, [r4, #8]
 512:Src/mc_interface.c ****       RetVal = true;
 1151              		.loc 1 512 40 view .LVU309
 1152 002e 0122     		movs	r2, #1
 1153 0030 83F86E20 		strb	r2, [r3, #110]
 513:Src/mc_interface.c ****   }
 1154              		.loc 1 513 7 is_stmt 1 view .LVU310
 1155              	.LVL96:
 513:Src/mc_interface.c ****   }
 1156              		.loc 1 513 7 is_stmt 0 view .LVU311
 1157 0034 EAE7     		b	.L73
 1158              		.cfi_endproc
 1159              	.LFE1451:
 1161              		.section	.text.MCI_StopMotor,"ax",%progbits
ARM GAS  /tmp/ccX12T6L.s 			page 36


 1162              		.align	1
 1163              		.weak	MCI_StopMotor
 1164              		.syntax unified
 1165              		.thumb
 1166              		.thumb_func
 1167              		.fpu fpv4-sp-d16
 1169              	MCI_StopMotor:
 1170              	.LVL97:
 1171              	.LFB1452:
 535:Src/mc_interface.c ****   bool RetVal;
 1172              		.loc 1 535 1 is_stmt 1 view -0
 1173              		.cfi_startproc
 1174              		@ args = 0, pretend = 0, frame = 0
 1175              		@ frame_needed = 0, uses_anonymous_args = 0
 535:Src/mc_interface.c ****   bool RetVal;
 1176              		.loc 1 535 1 is_stmt 0 view .LVU313
 1177 0000 38B5     		push	{r3, r4, r5, lr}
 1178              		.cfi_def_cfa_offset 16
 1179              		.cfi_offset 3, -16
 1180              		.cfi_offset 4, -12
 1181              		.cfi_offset 5, -8
 1182              		.cfi_offset 14, -4
 1183 0002 0446     		mov	r4, r0
 536:Src/mc_interface.c ****   bool status;
 1184              		.loc 1 536 3 is_stmt 1 view .LVU314
 537:Src/mc_interface.c ****   MCI_State_t State;
 1185              		.loc 1 537 3 view .LVU315
 538:Src/mc_interface.c **** 
 1186              		.loc 1 538 3 view .LVU316
 540:Src/mc_interface.c ****   if (IDLE == State  || ICLWAIT == State)
 1187              		.loc 1 540 3 view .LVU317
 540:Src/mc_interface.c ****   if (IDLE == State  || ICLWAIT == State)
 1188              		.loc 1 540 11 is_stmt 0 view .LVU318
 1189 0004 FFF7FEFF 		bl	MCI_GetSTMState
 1190              	.LVL98:
 541:Src/mc_interface.c ****   {
 1191              		.loc 1 541 3 is_stmt 1 view .LVU319
 541:Src/mc_interface.c ****   {
 1192              		.loc 1 541 6 is_stmt 0 view .LVU320
 1193 0008 28B1     		cbz	r0, .L79
 541:Src/mc_interface.c ****   {
 1194              		.loc 1 541 22 discriminator 1 view .LVU321
 1195 000a 0C28     		cmp	r0, #12
 1196 000c 01D0     		beq	.L84
 547:Src/mc_interface.c ****   }
 1197              		.loc 1 547 12 view .LVU322
 1198 000e 0125     		movs	r5, #1
 1199 0010 02E0     		b	.L77
 1200              	.L84:
 543:Src/mc_interface.c ****   }
 1201              		.loc 1 543 12 view .LVU323
 1202 0012 0025     		movs	r5, #0
 1203 0014 00E0     		b	.L77
 1204              	.L79:
 1205 0016 0025     		movs	r5, #0
 1206              	.L77:
 1207              	.LVL99:
ARM GAS  /tmp/ccX12T6L.s 			page 37


 550:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1208              		.loc 1 550 3 is_stmt 1 view .LVU324
 550:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1209              		.loc 1 550 24 is_stmt 0 view .LVU325
 1210 0018 2046     		mov	r0, r4
 1211              	.LVL100:
 550:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1212              		.loc 1 550 24 view .LVU326
 1213 001a FFF7FEFF 		bl	MCI_GetOccurredFaults
 1214              	.LVL101:
 550:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1215              		.loc 1 550 6 view .LVU327
 1216 001e 10B1     		cbz	r0, .L85
 560:Src/mc_interface.c ****   }
 1217              		.loc 1 560 12 view .LVU328
 1218 0020 0025     		movs	r5, #0
 1219              	.LVL102:
 1220              	.L78:
 563:Src/mc_interface.c **** }
 1221              		.loc 1 563 3 is_stmt 1 view .LVU329
 564:Src/mc_interface.c **** 
 1222              		.loc 1 564 1 is_stmt 0 view .LVU330
 1223 0022 2846     		mov	r0, r5
 1224 0024 38BD     		pop	{r3, r4, r5, pc}
 1225              	.LVL103:
 1226              	.L85:
 551:Src/mc_interface.c ****        status == true )
 1227              		.loc 1 551 24 discriminator 1 view .LVU331
 1228 0026 2046     		mov	r0, r4
 1229 0028 FFF7FEFF 		bl	MCI_GetCurrentFaults
 1230              	.LVL104:
 550:Src/mc_interface.c ****       (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1231              		.loc 1 550 56 discriminator 1 view .LVU332
 1232 002c 20B9     		cbnz	r0, .L82
 551:Src/mc_interface.c ****        status == true )
 1233              		.loc 1 551 55 view .LVU333
 1234 002e 002D     		cmp	r5, #0
 1235 0030 F7D0     		beq	.L78
 554:Src/mc_interface.c ****     RetVal = true;
 1236              		.loc 1 554 5 is_stmt 1 view .LVU334
 554:Src/mc_interface.c ****     RetVal = true;
 1237              		.loc 1 554 28 is_stmt 0 view .LVU335
 1238 0032 0523     		movs	r3, #5
 1239 0034 2376     		strb	r3, [r4, #24]
 555:Src/mc_interface.c ****   }
 1240              		.loc 1 555 5 is_stmt 1 view .LVU336
 1241              	.LVL105:
 555:Src/mc_interface.c ****   }
 1242              		.loc 1 555 12 is_stmt 0 view .LVU337
 1243 0036 F4E7     		b	.L78
 1244              	.LVL106:
 1245              	.L82:
 560:Src/mc_interface.c ****   }
 1246              		.loc 1 560 12 view .LVU338
 1247 0038 0025     		movs	r5, #0
 1248              	.LVL107:
 560:Src/mc_interface.c ****   }
ARM GAS  /tmp/ccX12T6L.s 			page 38


 1249              		.loc 1 560 12 view .LVU339
 1250 003a F2E7     		b	.L78
 1251              		.cfi_endproc
 1252              	.LFE1452:
 1254              		.section	.text.MCI_FaultAcknowledged,"ax",%progbits
 1255              		.align	1
 1256              		.weak	MCI_FaultAcknowledged
 1257              		.syntax unified
 1258              		.thumb
 1259              		.thumb_func
 1260              		.fpu fpv4-sp-d16
 1262              	MCI_FaultAcknowledged:
 1263              	.LVL108:
 1264              	.LFB1453:
 576:Src/mc_interface.c ****   bool RetVal;
 1265              		.loc 1 576 1 is_stmt 1 view -0
 1266              		.cfi_startproc
 1267              		@ args = 0, pretend = 0, frame = 0
 1268              		@ frame_needed = 0, uses_anonymous_args = 0
 576:Src/mc_interface.c ****   bool RetVal;
 1269              		.loc 1 576 1 is_stmt 0 view .LVU341
 1270 0000 10B5     		push	{r4, lr}
 1271              		.cfi_def_cfa_offset 8
 1272              		.cfi_offset 4, -8
 1273              		.cfi_offset 14, -4
 1274 0002 0446     		mov	r4, r0
 577:Src/mc_interface.c **** 
 1275              		.loc 1 577 3 is_stmt 1 view .LVU342
 579:Src/mc_interface.c ****   {
 1276              		.loc 1 579 3 view .LVU343
 579:Src/mc_interface.c ****   {
 1277              		.loc 1 579 22 is_stmt 0 view .LVU344
 1278 0004 FFF7FEFF 		bl	MCI_GetSTMState
 1279              	.LVL109:
 579:Src/mc_interface.c ****   {
 1280              		.loc 1 579 6 view .LVU345
 1281 0008 0B28     		cmp	r0, #11
 1282 000a 01D0     		beq	.L91
 588:Src/mc_interface.c ****   }
 1283              		.loc 1 588 12 view .LVU346
 1284 000c 0020     		movs	r0, #0
 1285              	.L87:
 1286              	.LVL110:
 590:Src/mc_interface.c **** }
 1287              		.loc 1 590 3 is_stmt 1 view .LVU347
 591:Src/mc_interface.c **** 
 1288              		.loc 1 591 1 is_stmt 0 view .LVU348
 1289 000e 10BD     		pop	{r4, pc}
 1290              	.LVL111:
 1291              	.L91:
 579:Src/mc_interface.c ****   {
 1292              		.loc 1 579 68 discriminator 1 view .LVU349
 1293 0010 2046     		mov	r0, r4
 1294 0012 FFF7FEFF 		bl	MCI_GetCurrentFaults
 1295              	.LVL112:
 579:Src/mc_interface.c ****   {
 1296              		.loc 1 579 48 discriminator 1 view .LVU350
ARM GAS  /tmp/ccX12T6L.s 			page 39


 1297 0016 28B9     		cbnz	r0, .L89
 581:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_ACK_FAULTS;
 1298              		.loc 1 581 5 is_stmt 1 view .LVU351
 581:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_ACK_FAULTS;
 1299              		.loc 1 581 25 is_stmt 0 view .LVU352
 1300 0018 0023     		movs	r3, #0
 1301 001a A383     		strh	r3, [r4, #28]	@ movhi
 582:Src/mc_interface.c ****     RetVal = true;
 1302              		.loc 1 582 5 is_stmt 1 view .LVU353
 582:Src/mc_interface.c ****     RetVal = true;
 1303              		.loc 1 582 28 is_stmt 0 view .LVU354
 1304 001c 0223     		movs	r3, #2
 1305 001e 2376     		strb	r3, [r4, #24]
 583:Src/mc_interface.c ****   }
 1306              		.loc 1 583 5 is_stmt 1 view .LVU355
 1307              	.LVL113:
 583:Src/mc_interface.c ****   }
 1308              		.loc 1 583 12 is_stmt 0 view .LVU356
 1309 0020 0120     		movs	r0, #1
 1310 0022 F4E7     		b	.L87
 1311              	.LVL114:
 1312              	.L89:
 588:Src/mc_interface.c ****   }
 1313              		.loc 1 588 12 view .LVU357
 1314 0024 0020     		movs	r0, #0
 1315 0026 F2E7     		b	.L87
 1316              		.cfi_endproc
 1317              	.LFE1453:
 1319              		.section	.text.MCI_GetFaultState,"ax",%progbits
 1320              		.align	1
 1321              		.weak	MCI_GetFaultState
 1322              		.syntax unified
 1323              		.thumb
 1324              		.thumb_func
 1325              		.fpu fpv4-sp-d16
 1327              	MCI_GetFaultState:
 1328              	.LVL115:
 1329              	.LFB1460:
 755:Src/mc_interface.c **** 
 756:Src/mc_interface.c **** /**
 757:Src/mc_interface.c ****   * @brief It returns two 16 bit fields containing information about both faults
 758:Src/mc_interface.c ****   *        currently present and faults historically occurred since the state
 759:Src/mc_interface.c ****   *        machine has been moved into state
 760:Src/mc_interface.c ****   * @param pHanlde pointer of type  STM_Handle_t.
 761:Src/mc_interface.c ****   * @retval uint32_t  Two 16 bit fields: in the most significant half are stored
 762:Src/mc_interface.c ****   *         the information about currently present faults. In the least
 763:Src/mc_interface.c ****   *         significant half are stored the information about the faults
 764:Src/mc_interface.c ****   *         historically occurred since the state machine has been moved into
 765:Src/mc_interface.c ****   *         FAULT_NOW state
 766:Src/mc_interface.c ****   */
 767:Src/mc_interface.c **** __weak uint32_t MCI_GetFaultState(MCI_Handle_t *pHandle)
 768:Src/mc_interface.c **** {
 1330              		.loc 1 768 1 is_stmt 1 view -0
 1331              		.cfi_startproc
 1332              		@ args = 0, pretend = 0, frame = 0
 1333              		@ frame_needed = 0, uses_anonymous_args = 0
 1334              		@ link register save eliminated.
ARM GAS  /tmp/ccX12T6L.s 			page 40


 769:Src/mc_interface.c ****   uint32_t LocalFaultState;
 1335              		.loc 1 769 3 view .LVU359
 770:Src/mc_interface.c **** 
 771:Src/mc_interface.c ****   LocalFaultState = (uint32_t)(pHandle->PastFaults);
 1336              		.loc 1 771 3 view .LVU360
 1337              		.loc 1 771 39 is_stmt 0 view .LVU361
 1338 0000 838B     		ldrh	r3, [r0, #28]
 1339              	.LVL116:
 772:Src/mc_interface.c ****   LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 1340              		.loc 1 772 3 is_stmt 1 view .LVU362
 1341              		.loc 1 772 40 is_stmt 0 view .LVU363
 1342 0002 408B     		ldrh	r0, [r0, #26]
 1343              	.LVL117:
 773:Src/mc_interface.c **** 
 774:Src/mc_interface.c ****   return (LocalFaultState);
 1344              		.loc 1 774 3 is_stmt 1 view .LVU364
 775:Src/mc_interface.c **** }
 1345              		.loc 1 775 1 is_stmt 0 view .LVU365
 1346 0004 43EA0040 		orr	r0, r3, r0, lsl #16
 1347              	.LVL118:
 1348              		.loc 1 775 1 view .LVU366
 1349 0008 7047     		bx	lr
 1350              		.cfi_endproc
 1351              	.LFE1460:
 1353              		.section	.text.MCI_GetControlMode,"ax",%progbits
 1354              		.align	1
 1355              		.weak	MCI_GetControlMode
 1356              		.syntax unified
 1357              		.thumb
 1358              		.thumb_func
 1359              		.fpu fpv4-sp-d16
 1361              	MCI_GetControlMode:
 1362              	.LVL119:
 1363              	.LFB1461:
 776:Src/mc_interface.c **** 
 777:Src/mc_interface.c **** /**
 778:Src/mc_interface.c ****   * @brief  It returns the modality of the speed and torque controller.
 779:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 780:Src/mc_interface.c ****   * @retval MC_ControlMode_t It returns the modality of STC. It can be one of
 781:Src/mc_interface.c ****   *         these two values: MCM_TORQUE_MODE or MCM_SPEED_MODE.
 782:Src/mc_interface.c ****   */
 783:Src/mc_interface.c **** __weak MC_ControlMode_t MCI_GetControlMode(MCI_Handle_t *pHandle)
 784:Src/mc_interface.c **** {
 1364              		.loc 1 784 1 is_stmt 1 view -0
 1365              		.cfi_startproc
 1366              		@ args = 0, pretend = 0, frame = 0
 1367              		@ frame_needed = 0, uses_anonymous_args = 0
 1368              		@ link register save eliminated.
 785:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 786:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
 787:Src/mc_interface.c **** #else
 788:Src/mc_interface.c ****   return (pHandle->LastModalitySetByUser);
 1369              		.loc 1 788 3 view .LVU368
 789:Src/mc_interface.c **** #endif
 790:Src/mc_interface.c **** }
 1370              		.loc 1 790 1 is_stmt 0 view .LVU369
 1371 0000 C07F     		ldrb	r0, [r0, #31]	@ zero_extendqisi2
ARM GAS  /tmp/ccX12T6L.s 			page 41


 1372              	.LVL120:
 1373              		.loc 1 790 1 view .LVU370
 1374 0002 7047     		bx	lr
 1375              		.cfi_endproc
 1376              	.LFE1461:
 1378              		.section	.text.MCI_GetImposedMotorDirection,"ax",%progbits
 1379              		.align	1
 1380              		.weak	MCI_GetImposedMotorDirection
 1381              		.syntax unified
 1382              		.thumb
 1383              		.thumb_func
 1384              		.fpu fpv4-sp-d16
 1386              	MCI_GetImposedMotorDirection:
 1387              	.LVL121:
 1388              	.LFB1462:
 791:Src/mc_interface.c **** 
 792:Src/mc_interface.c **** /**
 793:Src/mc_interface.c ****   * @brief  It returns the motor direction imposed by the last command
 794:Src/mc_interface.c ****   *         (MCI_ExecSpeedRamp, MCI_ExecTorqueRamp or MCI_SetCurrentReferences).
 795:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 796:Src/mc_interface.c ****   * @retval int16_t It returns 1 or -1 according the sign of hFinalSpeed,
 797:Src/mc_interface.c ****   *         hFinalTorque or Iqdref.q of the last command.
 798:Src/mc_interface.c ****   */
 799:Src/mc_interface.c **** __weak int16_t MCI_GetImposedMotorDirection(MCI_Handle_t *pHandle)
 800:Src/mc_interface.c **** {
 1389              		.loc 1 800 1 is_stmt 1 view -0
 1390              		.cfi_startproc
 1391              		@ args = 0, pretend = 0, frame = 0
 1392              		@ frame_needed = 0, uses_anonymous_args = 0
 1393              		@ link register save eliminated.
 801:Src/mc_interface.c ****   int16_t retVal = 1;
 1394              		.loc 1 801 3 view .LVU372
 802:Src/mc_interface.c **** 
 803:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 804:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 805:Src/mc_interface.c ****   {
 806:Src/mc_interface.c ****     /* Nothing to do */
 807:Src/mc_interface.c ****   }
 808:Src/mc_interface.c ****   else
 809:Src/mc_interface.c ****   {
 810:Src/mc_interface.c **** #endif
 811:Src/mc_interface.c ****     switch (pHandle->lastCommand)
 1395              		.loc 1 811 5 view .LVU373
 1396              		.loc 1 811 20 is_stmt 0 view .LVU374
 1397 0000 037B     		ldrb	r3, [r0, #12]	@ zero_extendqisi2
 1398              		.loc 1 811 5 view .LVU375
 1399 0002 022B     		cmp	r3, #2
 1400 0004 0BD0     		beq	.L95
 1401 0006 032B     		cmp	r3, #3
 1402 0008 0FD0     		beq	.L96
 1403 000a 012B     		cmp	r3, #1
 1404 000c 01D0     		beq	.L102
 1405 000e 0120     		movs	r0, #1
 1406              	.LVL122:
 1407              		.loc 1 811 5 view .LVU376
 1408 0010 7047     		bx	lr
 1409              	.LVL123:
ARM GAS  /tmp/ccX12T6L.s 			page 42


 1410              	.L102:
 812:Src/mc_interface.c ****     {
 813:Src/mc_interface.c ****       case MCI_CMD_EXECSPEEDRAMP:
 814:Src/mc_interface.c ****         if (pHandle->hFinalSpeed < 0)
 1411              		.loc 1 814 9 is_stmt 1 view .LVU377
 1412              		.loc 1 814 20 is_stmt 0 view .LVU378
 1413 0012 B0F90E30 		ldrsh	r3, [r0, #14]
 1414              		.loc 1 814 12 view .LVU379
 1415 0016 002B     		cmp	r3, #0
 1416 0018 0DDB     		blt	.L99
 801:Src/mc_interface.c **** 
 1417              		.loc 1 801 11 view .LVU380
 1418 001a 0120     		movs	r0, #1
 1419              	.LVL124:
 801:Src/mc_interface.c **** 
 1420              		.loc 1 801 11 view .LVU381
 1421 001c 7047     		bx	lr
 1422              	.LVL125:
 1423              	.L95:
 815:Src/mc_interface.c ****         {
 816:Src/mc_interface.c **** 
 817:Src/mc_interface.c ****           retVal = -1;
 818:Src/mc_interface.c ****         }
 819:Src/mc_interface.c ****         break;
 820:Src/mc_interface.c ****       case MCI_CMD_EXECTORQUERAMP:
 821:Src/mc_interface.c ****         if (pHandle->hFinalTorque < 0)
 1424              		.loc 1 821 9 is_stmt 1 view .LVU382
 1425              		.loc 1 821 20 is_stmt 0 view .LVU383
 1426 001e B0F91030 		ldrsh	r3, [r0, #16]
 1427              		.loc 1 821 12 view .LVU384
 1428 0022 002B     		cmp	r3, #0
 1429 0024 0ADB     		blt	.L100
 801:Src/mc_interface.c **** 
 1430              		.loc 1 801 11 view .LVU385
 1431 0026 0120     		movs	r0, #1
 1432              	.LVL126:
 801:Src/mc_interface.c **** 
 1433              		.loc 1 801 11 view .LVU386
 1434 0028 7047     		bx	lr
 1435              	.LVL127:
 1436              	.L96:
 822:Src/mc_interface.c ****         {
 823:Src/mc_interface.c ****           retVal = -1;
 824:Src/mc_interface.c ****         }
 825:Src/mc_interface.c ****         break;
 826:Src/mc_interface.c ****       case MCI_CMD_SETCURRENTREFERENCES:
 827:Src/mc_interface.c ****         if (pHandle->Iqdref.q < 0)
 1437              		.loc 1 827 9 is_stmt 1 view .LVU387
 1438              		.loc 1 827 28 is_stmt 0 view .LVU388
 1439 002a B0F91230 		ldrsh	r3, [r0, #18]
 1440              		.loc 1 827 12 view .LVU389
 1441 002e 002B     		cmp	r3, #0
 1442 0030 07DB     		blt	.L101
 801:Src/mc_interface.c **** 
 1443              		.loc 1 801 11 view .LVU390
 1444 0032 0120     		movs	r0, #1
 1445              	.LVL128:
ARM GAS  /tmp/ccX12T6L.s 			page 43


 801:Src/mc_interface.c **** 
 1446              		.loc 1 801 11 view .LVU391
 1447 0034 7047     		bx	lr
 1448              	.LVL129:
 1449              	.L99:
 817:Src/mc_interface.c ****         }
 1450              		.loc 1 817 18 view .LVU392
 1451 0036 4FF0FF30 		mov	r0, #-1
 1452              	.LVL130:
 817:Src/mc_interface.c ****         }
 1453              		.loc 1 817 18 view .LVU393
 1454 003a 7047     		bx	lr
 1455              	.LVL131:
 1456              	.L100:
 823:Src/mc_interface.c ****         }
 1457              		.loc 1 823 18 view .LVU394
 1458 003c 4FF0FF30 		mov	r0, #-1
 1459              	.LVL132:
 823:Src/mc_interface.c ****         }
 1460              		.loc 1 823 18 view .LVU395
 1461 0040 7047     		bx	lr
 1462              	.LVL133:
 1463              	.L101:
 828:Src/mc_interface.c ****         {
 829:Src/mc_interface.c ****           retVal = -1;
 1464              		.loc 1 829 18 view .LVU396
 1465 0042 4FF0FF30 		mov	r0, #-1
 1466              	.LVL134:
 830:Src/mc_interface.c ****         }
 831:Src/mc_interface.c ****         break;
 832:Src/mc_interface.c ****       default:
 833:Src/mc_interface.c ****         break;
 834:Src/mc_interface.c ****     }
 835:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 836:Src/mc_interface.c ****   }
 837:Src/mc_interface.c **** #endif
 838:Src/mc_interface.c ****   return (retVal);
 1467              		.loc 1 838 3 is_stmt 1 view .LVU397
 839:Src/mc_interface.c **** }
 1468              		.loc 1 839 1 is_stmt 0 view .LVU398
 1469 0046 7047     		bx	lr
 1470              		.cfi_endproc
 1471              	.LFE1462:
 1473              		.section	.text.MCI_GetLastRampFinalSpeed,"ax",%progbits
 1474              		.align	1
 1475              		.weak	MCI_GetLastRampFinalSpeed
 1476              		.syntax unified
 1477              		.thumb
 1478              		.thumb_func
 1479              		.fpu fpv4-sp-d16
 1481              	MCI_GetLastRampFinalSpeed:
 1482              	.LVL135:
 1483              	.LFB1463:
 840:Src/mc_interface.c **** 
 841:Src/mc_interface.c **** /**
 842:Src/mc_interface.c ****   * @brief  It returns information about the last ramp final speed sent by the
 843:Src/mc_interface.c ****   *         user expressed in tenths of HZ.
ARM GAS  /tmp/ccX12T6L.s 			page 44


 844:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 845:Src/mc_interface.c ****   * @retval int16_t last ramp final speed sent by the user expressed in tenths
 846:Src/mc_interface.c ****   *         of HZ.
 847:Src/mc_interface.c ****   */
 848:Src/mc_interface.c **** __weak int16_t MCI_GetLastRampFinalSpeed(MCI_Handle_t *pHandle)
 849:Src/mc_interface.c **** {
 1484              		.loc 1 849 1 is_stmt 1 view -0
 1485              		.cfi_startproc
 1486              		@ args = 0, pretend = 0, frame = 0
 1487              		@ frame_needed = 0, uses_anonymous_args = 0
 1488              		@ link register save eliminated.
 850:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 851:Src/mc_interface.c ****   int16_t retVal = 0;
 852:Src/mc_interface.c **** 
 853:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 854:Src/mc_interface.c ****   {
 855:Src/mc_interface.c ****     /* Nothing to do */
 856:Src/mc_interface.c ****   }
 857:Src/mc_interface.c ****   else
 858:Src/mc_interface.c ****   {
 859:Src/mc_interface.c ****     retVal = pHandle->hFinalSpeed;
 860:Src/mc_interface.c ****   }
 861:Src/mc_interface.c ****   return (retVal);
 862:Src/mc_interface.c **** #else
 863:Src/mc_interface.c ****   return (pHandle->hFinalSpeed);
 1489              		.loc 1 863 3 view .LVU400
 864:Src/mc_interface.c **** #endif
 865:Src/mc_interface.c **** }
 1490              		.loc 1 865 1 is_stmt 0 view .LVU401
 1491 0000 B0F90E00 		ldrsh	r0, [r0, #14]
 1492              	.LVL136:
 1493              		.loc 1 865 1 view .LVU402
 1494 0004 7047     		bx	lr
 1495              		.cfi_endproc
 1496              	.LFE1463:
 1498              		.section	.text.MCI_GetLastRampFinalTorque,"ax",%progbits
 1499              		.align	1
 1500              		.weak	MCI_GetLastRampFinalTorque
 1501              		.syntax unified
 1502              		.thumb
 1503              		.thumb_func
 1504              		.fpu fpv4-sp-d16
 1506              	MCI_GetLastRampFinalTorque:
 1507              	.LVL137:
 1508              	.LFB1464:
 866:Src/mc_interface.c **** 
 867:Src/mc_interface.c **** /**
 868:Src/mc_interface.c ****   * @brief  It returns information about the last ramp final torque sent by the
 869:Src/mc_interface.c ****   *         user .This value represents actually the Iq current expressed in
 870:Src/mc_interface.c ****   *         digit.
 871:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 872:Src/mc_interface.c ****   * @retval int16_t last ramp final torque sent by the user expressed in digit
 873:Src/mc_interface.c ****   */
 874:Src/mc_interface.c **** __weak int16_t MCI_GetLastRampFinalTorque(MCI_Handle_t *pHandle)
 875:Src/mc_interface.c **** {
 1509              		.loc 1 875 1 is_stmt 1 view -0
 1510              		.cfi_startproc
ARM GAS  /tmp/ccX12T6L.s 			page 45


 1511              		@ args = 0, pretend = 0, frame = 0
 1512              		@ frame_needed = 0, uses_anonymous_args = 0
 1513              		@ link register save eliminated.
 876:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 877:Src/mc_interface.c ****   int16_t retVal = 0;
 878:Src/mc_interface.c **** 
 879:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 880:Src/mc_interface.c ****   {
 881:Src/mc_interface.c ****     /* Nothing to do */
 882:Src/mc_interface.c ****   }
 883:Src/mc_interface.c ****   else
 884:Src/mc_interface.c ****   {
 885:Src/mc_interface.c ****     retVal = pHandle->hFinalTorque;
 886:Src/mc_interface.c ****   }
 887:Src/mc_interface.c ****   return (retVal);
 888:Src/mc_interface.c **** #else
 889:Src/mc_interface.c ****   return (pHandle->hFinalTorque);
 1514              		.loc 1 889 3 view .LVU404
 890:Src/mc_interface.c **** #endif
 891:Src/mc_interface.c **** }
 1515              		.loc 1 891 1 is_stmt 0 view .LVU405
 1516 0000 B0F91000 		ldrsh	r0, [r0, #16]
 1517              	.LVL138:
 1518              		.loc 1 891 1 view .LVU406
 1519 0004 7047     		bx	lr
 1520              		.cfi_endproc
 1521              	.LFE1464:
 1523              		.section	.text.MCI_GetLastRampFinalDuration,"ax",%progbits
 1524              		.align	1
 1525              		.weak	MCI_GetLastRampFinalDuration
 1526              		.syntax unified
 1527              		.thumb
 1528              		.thumb_func
 1529              		.fpu fpv4-sp-d16
 1531              	MCI_GetLastRampFinalDuration:
 1532              	.LVL139:
 1533              	.LFB1465:
 892:Src/mc_interface.c **** 
 893:Src/mc_interface.c **** /**
 894:Src/mc_interface.c ****   * @brief  It returns information about the last ramp Duration sent by the
 895:Src/mc_interface.c ****   *         user .
 896:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 897:Src/mc_interface.c ****   * @retval uint16_t last ramp final torque sent by the user expressed in digit
 898:Src/mc_interface.c ****   */
 899:Src/mc_interface.c **** __weak uint16_t MCI_GetLastRampFinalDuration(MCI_Handle_t *pHandle)
 900:Src/mc_interface.c **** {
 1534              		.loc 1 900 1 is_stmt 1 view -0
 1535              		.cfi_startproc
 1536              		@ args = 0, pretend = 0, frame = 0
 1537              		@ frame_needed = 0, uses_anonymous_args = 0
 1538              		@ link register save eliminated.
 901:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 902:Src/mc_interface.c ****   uint16_t retVal = 0;
 903:Src/mc_interface.c **** 
 904:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 905:Src/mc_interface.c ****   {
 906:Src/mc_interface.c ****     /* Nothing to do */
ARM GAS  /tmp/ccX12T6L.s 			page 46


 907:Src/mc_interface.c ****   }
 908:Src/mc_interface.c ****   else
 909:Src/mc_interface.c ****   {
 910:Src/mc_interface.c ****     retVal = pHandle->hDurationms;
 911:Src/mc_interface.c ****   }
 912:Src/mc_interface.c ****   return (retVal);
 913:Src/mc_interface.c **** #else
 914:Src/mc_interface.c ****   return (pHandle->hDurationms);
 1539              		.loc 1 914 3 view .LVU408
 915:Src/mc_interface.c **** #endif
 916:Src/mc_interface.c **** }
 1540              		.loc 1 916 1 is_stmt 0 view .LVU409
 1541 0000 C08A     		ldrh	r0, [r0, #22]
 1542              	.LVL140:
 1543              		.loc 1 916 1 view .LVU410
 1544 0002 7047     		bx	lr
 1545              		.cfi_endproc
 1546              	.LFE1465:
 1548              		.section	.text.MCI_GetLastRampFinalSpeed_F,"ax",%progbits
 1549              		.align	1
 1550              		.weak	MCI_GetLastRampFinalSpeed_F
 1551              		.syntax unified
 1552              		.thumb
 1553              		.thumb_func
 1554              		.fpu fpv4-sp-d16
 1556              	MCI_GetLastRampFinalSpeed_F:
 1557              	.LVL141:
 1558              	.LFB1466:
 917:Src/mc_interface.c **** 
 918:Src/mc_interface.c **** /**
 919:Src/mc_interface.c ****   * @brief  It returns last ramp final speed expressed in rpm.
 920:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 921:Src/mc_interface.c ****   * @retval float last ramp final speed sent by the user expressed in rpm.
 922:Src/mc_interface.c ****   */
 923:Src/mc_interface.c **** __weak float MCI_GetLastRampFinalSpeed_F(MCI_Handle_t *pHandle)
 924:Src/mc_interface.c **** {
 1559              		.loc 1 924 1 is_stmt 1 view -0
 1560              		.cfi_startproc
 1561              		@ args = 0, pretend = 0, frame = 0
 1562              		@ frame_needed = 0, uses_anonymous_args = 0
 1563              		@ link register save eliminated.
 925:Src/mc_interface.c ****   float RetVal = 0.0;
 1564              		.loc 1 925 3 view .LVU412
 926:Src/mc_interface.c **** 
 927:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 1565              		.loc 1 927 3 view .LVU413
 1566              		.loc 1 927 6 is_stmt 0 view .LVU414
 1567 0000 48B1     		cbz	r0, .L108
 928:Src/mc_interface.c ****   {
 929:Src/mc_interface.c ****     /* Nothing to do */
 930:Src/mc_interface.c ****   }
 931:Src/mc_interface.c ****   else
 932:Src/mc_interface.c ****   {
 933:Src/mc_interface.c ****     RetVal = (float)((pHandle->hFinalSpeed * U_RPM) / SPEED_UNIT);
 1568              		.loc 1 933 5 is_stmt 1 view .LVU415
 1569              		.loc 1 933 30 is_stmt 0 view .LVU416
 1570 0002 B0F90E30 		ldrsh	r3, [r0, #14]
ARM GAS  /tmp/ccX12T6L.s 			page 47


 1571              		.loc 1 933 53 view .LVU417
 1572 0006 03EB4303 		add	r3, r3, r3, lsl #1
 1573 000a 5B00     		lsls	r3, r3, #1
 1574              		.loc 1 933 12 view .LVU418
 1575 000c 07EE903A 		vmov	s15, r3	@ int
 1576 0010 B8EEE70A 		vcvt.f32.s32	s0, s15
 1577              	.LVL142:
 1578              		.loc 1 933 12 view .LVU419
 1579 0014 7047     		bx	lr
 1580              	.LVL143:
 1581              	.L108:
 925:Src/mc_interface.c **** 
 1582              		.loc 1 925 9 view .LVU420
 1583 0016 9FED010A 		vldr.32	s0, .L109
 934:Src/mc_interface.c ****   }
 935:Src/mc_interface.c ****   return (RetVal);
 1584              		.loc 1 935 3 is_stmt 1 view .LVU421
 936:Src/mc_interface.c **** }
 1585              		.loc 1 936 1 is_stmt 0 view .LVU422
 1586 001a 7047     		bx	lr
 1587              	.L110:
 1588              		.align	2
 1589              	.L109:
 1590 001c 00000000 		.word	0
 1591              		.cfi_endproc
 1592              	.LFE1466:
 1594              		.section	.text.MCI_RampCompleted,"ax",%progbits
 1595              		.align	1
 1596              		.weak	MCI_RampCompleted
 1597              		.syntax unified
 1598              		.thumb
 1599              		.thumb_func
 1600              		.fpu fpv4-sp-d16
 1602              	MCI_RampCompleted:
 1603              	.LVL144:
 1604              	.LFB1467:
 937:Src/mc_interface.c **** 
 938:Src/mc_interface.c **** /**
 939:Src/mc_interface.c ****   * @brief  Check if the settled speed or torque ramp has been completed.
 940:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 941:Src/mc_interface.c ****   * @retval bool It returns true if the ramp is completed, false otherwise.
 942:Src/mc_interface.c ****   */
 943:Src/mc_interface.c **** __weak bool MCI_RampCompleted(MCI_Handle_t *pHandle)
 944:Src/mc_interface.c **** {
 1605              		.loc 1 944 1 is_stmt 1 view -0
 1606              		.cfi_startproc
 1607              		@ args = 0, pretend = 0, frame = 0
 1608              		@ frame_needed = 0, uses_anonymous_args = 0
 1609              		.loc 1 944 1 is_stmt 0 view .LVU424
 1610 0000 10B5     		push	{r4, lr}
 1611              		.cfi_def_cfa_offset 8
 1612              		.cfi_offset 4, -8
 1613              		.cfi_offset 14, -4
 1614 0002 0446     		mov	r4, r0
 945:Src/mc_interface.c ****   bool retVal = false;
 1615              		.loc 1 945 3 is_stmt 1 view .LVU425
 1616              	.LVL145:
ARM GAS  /tmp/ccX12T6L.s 			page 48


 946:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 947:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 948:Src/mc_interface.c ****   {
 949:Src/mc_interface.c ****     /* Nothing to do */
 950:Src/mc_interface.c ****   }
 951:Src/mc_interface.c ****   else
 952:Src/mc_interface.c ****   {
 953:Src/mc_interface.c **** #endif
 954:Src/mc_interface.c ****     if (RUN == MCI_GetSTMState(pHandle))
 1617              		.loc 1 954 5 view .LVU426
 1618              		.loc 1 954 16 is_stmt 0 view .LVU427
 1619 0004 FFF7FEFF 		bl	MCI_GetSTMState
 1620              	.LVL146:
 1621              		.loc 1 954 8 view .LVU428
 1622 0008 0628     		cmp	r0, #6
 1623 000a 01D0     		beq	.L115
 945:Src/mc_interface.c ****   bool retVal = false;
 1624              		.loc 1 945 8 view .LVU429
 1625 000c 0020     		movs	r0, #0
 1626              	.LVL147:
 1627              	.L112:
 955:Src/mc_interface.c ****     {
 956:Src/mc_interface.c ****       retVal = STC_RampCompleted(pHandle->pSTC);
 957:Src/mc_interface.c ****     }
 958:Src/mc_interface.c ****     else
 959:Src/mc_interface.c ****     {
 960:Src/mc_interface.c ****       /* Nothing to do */
 961:Src/mc_interface.c ****     }
 1628              		.loc 1 961 5 is_stmt 1 view .LVU430
 962:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 963:Src/mc_interface.c ****   }
 964:Src/mc_interface.c **** #endif
 965:Src/mc_interface.c ****   return (retVal);
 1629              		.loc 1 965 3 view .LVU431
 966:Src/mc_interface.c **** }
 1630              		.loc 1 966 1 is_stmt 0 view .LVU432
 1631 000e 10BD     		pop	{r4, pc}
 1632              	.LVL148:
 1633              	.L115:
 956:Src/mc_interface.c ****     }
 1634              		.loc 1 956 7 is_stmt 1 view .LVU433
 956:Src/mc_interface.c ****     }
 1635              		.loc 1 956 16 is_stmt 0 view .LVU434
 1636 0010 2068     		ldr	r0, [r4]
 1637 0012 FFF7FEFF 		bl	STC_RampCompleted
 1638              	.LVL149:
 956:Src/mc_interface.c ****     }
 1639              		.loc 1 956 16 view .LVU435
 1640 0016 FAE7     		b	.L112
 1641              		.cfi_endproc
 1642              	.LFE1467:
 1644              		.section	.text.MCI_StopSpeedRamp,"ax",%progbits
 1645              		.align	1
 1646              		.weak	MCI_StopSpeedRamp
 1647              		.syntax unified
 1648              		.thumb
 1649              		.thumb_func
ARM GAS  /tmp/ccX12T6L.s 			page 49


 1650              		.fpu fpv4-sp-d16
 1652              	MCI_StopSpeedRamp:
 1653              	.LVL150:
 1654              	.LFB1468:
 967:Src/mc_interface.c **** 
 968:Src/mc_interface.c **** /**
 969:Src/mc_interface.c ****   * @brief  Stop the execution of speed ramp.
 970:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 971:Src/mc_interface.c ****   * @retval bool It returns true if the command is executed, false otherwise.
 972:Src/mc_interface.c ****   *
 973:Src/mc_interface.c ****   * @deprecated This function is deprecated and should not be used anymore. It will be
 974:Src/mc_interface.c ****   *             removed in a future version of the MCSDK. Use MCI_StopRamp() instead.
 975:Src/mc_interface.c ****   */
 976:Src/mc_interface.c **** __weak bool MCI_StopSpeedRamp(MCI_Handle_t *pHandle)
 977:Src/mc_interface.c **** {
 1655              		.loc 1 977 1 is_stmt 1 view -0
 1656              		.cfi_startproc
 1657              		@ args = 0, pretend = 0, frame = 0
 1658              		@ frame_needed = 0, uses_anonymous_args = 0
 1659              		.loc 1 977 1 is_stmt 0 view .LVU437
 1660 0000 08B5     		push	{r3, lr}
 1661              		.cfi_def_cfa_offset 8
 1662              		.cfi_offset 3, -8
 1663              		.cfi_offset 14, -4
 978:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 979:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? false : STC_StopSpeedRamp(pHandle->pSTC));
 980:Src/mc_interface.c **** #else
 981:Src/mc_interface.c ****   return (STC_StopSpeedRamp(pHandle->pSTC));
 1664              		.loc 1 981 3 is_stmt 1 view .LVU438
 1665              		.loc 1 981 11 is_stmt 0 view .LVU439
 1666 0002 0068     		ldr	r0, [r0]
 1667              	.LVL151:
 1668              		.loc 1 981 11 view .LVU440
 1669 0004 FFF7FEFF 		bl	STC_StopSpeedRamp
 1670              	.LVL152:
 982:Src/mc_interface.c **** #endif
 983:Src/mc_interface.c **** }
 1671              		.loc 1 983 1 view .LVU441
 1672 0008 08BD     		pop	{r3, pc}
 1673              		.cfi_endproc
 1674              	.LFE1468:
 1676              		.section	.text.MCI_StopRamp,"ax",%progbits
 1677              		.align	1
 1678              		.weak	MCI_StopRamp
 1679              		.syntax unified
 1680              		.thumb
 1681              		.thumb_func
 1682              		.fpu fpv4-sp-d16
 1684              	MCI_StopRamp:
 1685              	.LVL153:
 1686              	.LFB1469:
 984:Src/mc_interface.c **** 
 985:Src/mc_interface.c **** /**
 986:Src/mc_interface.c ****   * @brief  Stop the execution of ongoing ramp.
 987:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 988:Src/mc_interface.c ****   */
 989:Src/mc_interface.c **** __weak void MCI_StopRamp(MCI_Handle_t *pHandle)
ARM GAS  /tmp/ccX12T6L.s 			page 50


 990:Src/mc_interface.c **** {
 1687              		.loc 1 990 1 is_stmt 1 view -0
 1688              		.cfi_startproc
 1689              		@ args = 0, pretend = 0, frame = 0
 1690              		@ frame_needed = 0, uses_anonymous_args = 0
 1691              		.loc 1 990 1 is_stmt 0 view .LVU443
 1692 0000 08B5     		push	{r3, lr}
 1693              		.cfi_def_cfa_offset 8
 1694              		.cfi_offset 3, -8
 1695              		.cfi_offset 14, -4
 991:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
 992:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 993:Src/mc_interface.c ****   {
 994:Src/mc_interface.c ****     /* Nothing to do */
 995:Src/mc_interface.c ****   }
 996:Src/mc_interface.c ****   else
 997:Src/mc_interface.c ****   {
 998:Src/mc_interface.c **** #endif
 999:Src/mc_interface.c ****     STC_StopRamp(pHandle->pSTC);
 1696              		.loc 1 999 5 is_stmt 1 view .LVU444
 1697 0002 0068     		ldr	r0, [r0]
 1698              	.LVL154:
 1699              		.loc 1 999 5 is_stmt 0 view .LVU445
 1700 0004 FFF7FEFF 		bl	STC_StopRamp
 1701              	.LVL155:
1000:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1001:Src/mc_interface.c ****   }
1002:Src/mc_interface.c **** #endif
1003:Src/mc_interface.c **** }
 1702              		.loc 1 1003 1 view .LVU446
 1703 0008 08BD     		pop	{r3, pc}
 1704              		.cfi_endproc
 1705              	.LFE1469:
 1707              		.section	.text.MCI_GetSpdSensorReliability,"ax",%progbits
 1708              		.align	1
 1709              		.weak	MCI_GetSpdSensorReliability
 1710              		.syntax unified
 1711              		.thumb
 1712              		.thumb_func
 1713              		.fpu fpv4-sp-d16
 1715              	MCI_GetSpdSensorReliability:
 1716              	.LVL156:
 1717              	.LFB1470:
1004:Src/mc_interface.c **** 
1005:Src/mc_interface.c **** /**
1006:Src/mc_interface.c ****   * @brief  It returns speed sensor reliability with reference to the sensor
1007:Src/mc_interface.c ****   *         actually used for reference frame transformation
1008:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1009:Src/mc_interface.c ****   * @retval bool It returns true if the speed sensor utilized for reference
1010:Src/mc_interface.c ****   *         frame transformation and (in speed control mode) for speed
1011:Src/mc_interface.c ****   *         regulation is reliable, false otherwise
1012:Src/mc_interface.c ****   */
1013:Src/mc_interface.c **** __weak bool MCI_GetSpdSensorReliability(MCI_Handle_t *pHandle)
1014:Src/mc_interface.c **** {
 1718              		.loc 1 1014 1 is_stmt 1 view -0
 1719              		.cfi_startproc
 1720              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccX12T6L.s 			page 51


 1721              		@ frame_needed = 0, uses_anonymous_args = 0
 1722              		.loc 1 1014 1 is_stmt 0 view .LVU448
 1723 0000 08B5     		push	{r3, lr}
 1724              		.cfi_def_cfa_offset 8
 1725              		.cfi_offset 3, -8
 1726              		.cfi_offset 14, -4
1015:Src/mc_interface.c ****   bool status;
 1727              		.loc 1 1015 3 is_stmt 1 view .LVU449
1016:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1017:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1018:Src/mc_interface.c ****   {
1019:Src/mc_interface.c ****     status = false;
1020:Src/mc_interface.c ****   }
1021:Src/mc_interface.c ****   else
1022:Src/mc_interface.c ****   {
1023:Src/mc_interface.c **** #endif
1024:Src/mc_interface.c ****     SpeednPosFdbk_Handle_t *SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 1728              		.loc 1 1024 5 view .LVU450
 1729              		.loc 1 1024 43 is_stmt 0 view .LVU451
 1730 0002 0068     		ldr	r0, [r0]
 1731              	.LVL157:
 1732              		.loc 1 1024 43 view .LVU452
 1733 0004 FFF7FEFF 		bl	STC_GetSpeedSensor
 1734              	.LVL158:
1025:Src/mc_interface.c ****     status = SPD_Check(SpeedSensor);
 1735              		.loc 1 1025 5 is_stmt 1 view .LVU453
 1736              		.loc 1 1025 14 is_stmt 0 view .LVU454
 1737 0008 FFF7FEFF 		bl	SPD_Check
 1738              	.LVL159:
1026:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1027:Src/mc_interface.c ****   }
1028:Src/mc_interface.c **** #endif
1029:Src/mc_interface.c **** 
1030:Src/mc_interface.c ****   return (status);
 1739              		.loc 1 1030 3 is_stmt 1 view .LVU455
1031:Src/mc_interface.c **** }
 1740              		.loc 1 1031 1 is_stmt 0 view .LVU456
 1741 000c 08BD     		pop	{r3, pc}
 1742              		.cfi_endproc
 1743              	.LFE1470:
 1745              		.section	.text.MCI_GetAvrgMecSpeedUnit,"ax",%progbits
 1746              		.align	1
 1747              		.weak	MCI_GetAvrgMecSpeedUnit
 1748              		.syntax unified
 1749              		.thumb
 1750              		.thumb_func
 1751              		.fpu fpv4-sp-d16
 1753              	MCI_GetAvrgMecSpeedUnit:
 1754              	.LVL160:
 1755              	.LFB1471:
1032:Src/mc_interface.c **** 
1033:Src/mc_interface.c **** /**
1034:Src/mc_interface.c ****   * @brief  Returns the last computed average mechanical speed, expressed in
1035:Src/mc_interface.c ****   *         the unit defined by #SPEED_UNIT and related to the sensor actually
1036:Src/mc_interface.c ****   *         used by FOC algorithm
1037:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1038:Src/mc_interface.c ****   */
ARM GAS  /tmp/ccX12T6L.s 			page 52


1039:Src/mc_interface.c **** __weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
1040:Src/mc_interface.c **** {
 1756              		.loc 1 1040 1 is_stmt 1 view -0
 1757              		.cfi_startproc
 1758              		@ args = 0, pretend = 0, frame = 0
 1759              		@ frame_needed = 0, uses_anonymous_args = 0
 1760              		.loc 1 1040 1 is_stmt 0 view .LVU458
 1761 0000 08B5     		push	{r3, lr}
 1762              		.cfi_def_cfa_offset 8
 1763              		.cfi_offset 3, -8
 1764              		.cfi_offset 14, -4
1041:Src/mc_interface.c ****   int16_t temp_speed;
 1765              		.loc 1 1041 3 is_stmt 1 view .LVU459
1042:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1043:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1044:Src/mc_interface.c ****   {
1045:Src/mc_interface.c ****     temp_speed = 0;
1046:Src/mc_interface.c ****   }
1047:Src/mc_interface.c ****   else
1048:Src/mc_interface.c ****   {
1049:Src/mc_interface.c **** #endif
1050:Src/mc_interface.c ****     SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 1766              		.loc 1 1050 5 view .LVU460
 1767              		.loc 1 1050 44 is_stmt 0 view .LVU461
 1768 0002 0068     		ldr	r0, [r0]
 1769              	.LVL161:
 1770              		.loc 1 1050 44 view .LVU462
 1771 0004 FFF7FEFF 		bl	STC_GetSpeedSensor
 1772              	.LVL162:
1051:Src/mc_interface.c ****     temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 1773              		.loc 1 1051 5 is_stmt 1 view .LVU463
 1774              		.loc 1 1051 18 is_stmt 0 view .LVU464
 1775 0008 FFF7FEFF 		bl	SPD_GetAvrgMecSpeedUnit
 1776              	.LVL163:
1052:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1053:Src/mc_interface.c ****   }
1054:Src/mc_interface.c **** #endif
1055:Src/mc_interface.c ****   return (temp_speed);
 1777              		.loc 1 1055 3 is_stmt 1 view .LVU465
1056:Src/mc_interface.c **** }
 1778              		.loc 1 1056 1 is_stmt 0 view .LVU466
 1779 000c 08BD     		pop	{r3, pc}
 1780              		.cfi_endproc
 1781              	.LFE1471:
 1783              		.section	.text.MCI_GetAvrgMecSpeed_F,"ax",%progbits
 1784              		.align	1
 1785              		.weak	MCI_GetAvrgMecSpeed_F
 1786              		.syntax unified
 1787              		.thumb
 1788              		.thumb_func
 1789              		.fpu fpv4-sp-d16
 1791              	MCI_GetAvrgMecSpeed_F:
 1792              	.LVL164:
 1793              	.LFB1472:
1057:Src/mc_interface.c **** 
1058:Src/mc_interface.c **** /**
1059:Src/mc_interface.c ****   * @brief  Returns the last computed average mechanical speed, expressed in rpm
ARM GAS  /tmp/ccX12T6L.s 			page 53


1060:Src/mc_interface.c ****   *         and related to the sensor actually used by FOC algorithm.
1061:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1062:Src/mc_interface.c ****   */
1063:Src/mc_interface.c **** __weak float MCI_GetAvrgMecSpeed_F(MCI_Handle_t *pHandle)
1064:Src/mc_interface.c **** {
 1794              		.loc 1 1064 1 is_stmt 1 view -0
 1795              		.cfi_startproc
 1796              		@ args = 0, pretend = 0, frame = 0
 1797              		@ frame_needed = 0, uses_anonymous_args = 0
 1798              		.loc 1 1064 1 is_stmt 0 view .LVU468
 1799 0000 08B5     		push	{r3, lr}
 1800              		.cfi_def_cfa_offset 8
 1801              		.cfi_offset 3, -8
 1802              		.cfi_offset 14, -4
1065:Src/mc_interface.c ****   SpeednPosFdbk_Handle_t *SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 1803              		.loc 1 1065 3 is_stmt 1 view .LVU469
 1804              		.loc 1 1065 41 is_stmt 0 view .LVU470
 1805 0002 0068     		ldr	r0, [r0]
 1806              	.LVL165:
 1807              		.loc 1 1065 41 view .LVU471
 1808 0004 FFF7FEFF 		bl	STC_GetSpeedSensor
 1809              	.LVL166:
1066:Src/mc_interface.c **** 
1067:Src/mc_interface.c ****   return ((float)((SPD_GetAvrgMecSpeedUnit(SpeedSensor) * U_RPM) / SPEED_UNIT));
 1810              		.loc 1 1067 3 is_stmt 1 view .LVU472
 1811              		.loc 1 1067 20 is_stmt 0 view .LVU473
 1812 0008 FFF7FEFF 		bl	SPD_GetAvrgMecSpeedUnit
 1813              	.LVL167:
 1814              		.loc 1 1067 66 view .LVU474
 1815 000c 00EB4000 		add	r0, r0, r0, lsl #1
 1816 0010 4300     		lsls	r3, r0, #1
 1817 0012 00EE103A 		vmov	s0, r3	@ int
1068:Src/mc_interface.c **** }
 1818              		.loc 1 1068 1 view .LVU475
 1819 0016 B8EEC00A 		vcvt.f32.s32	s0, s0
 1820 001a 08BD     		pop	{r3, pc}
 1821              		.cfi_endproc
 1822              	.LFE1472:
 1824              		.section	.text.MCI_GetMecSpeedRefUnit,"ax",%progbits
 1825              		.align	1
 1826              		.weak	MCI_GetMecSpeedRefUnit
 1827              		.syntax unified
 1828              		.thumb
 1829              		.thumb_func
 1830              		.fpu fpv4-sp-d16
 1832              	MCI_GetMecSpeedRefUnit:
 1833              	.LVL168:
 1834              	.LFB1473:
1069:Src/mc_interface.c **** 
1070:Src/mc_interface.c **** /**
1071:Src/mc_interface.c ****   * @brief  Returns the current mechanical rotor speed reference expressed in the unit defined by #
1072:Src/mc_interface.c ****   *
1073:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1074:Src/mc_interface.c ****   *
1075:Src/mc_interface.c ****   */
1076:Src/mc_interface.c **** __weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
1077:Src/mc_interface.c **** {
ARM GAS  /tmp/ccX12T6L.s 			page 54


 1835              		.loc 1 1077 1 is_stmt 1 view -0
 1836              		.cfi_startproc
 1837              		@ args = 0, pretend = 0, frame = 0
 1838              		@ frame_needed = 0, uses_anonymous_args = 0
 1839              		.loc 1 1077 1 is_stmt 0 view .LVU477
 1840 0000 08B5     		push	{r3, lr}
 1841              		.cfi_def_cfa_offset 8
 1842              		.cfi_offset 3, -8
 1843              		.cfi_offset 14, -4
1078:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1079:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
1080:Src/mc_interface.c **** #else
1081:Src/mc_interface.c ****   return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 1844              		.loc 1 1081 3 is_stmt 1 view .LVU478
 1845              		.loc 1 1081 11 is_stmt 0 view .LVU479
 1846 0002 0068     		ldr	r0, [r0]
 1847              	.LVL169:
 1848              		.loc 1 1081 11 view .LVU480
 1849 0004 FFF7FEFF 		bl	STC_GetMecSpeedRefUnit
 1850              	.LVL170:
1082:Src/mc_interface.c **** #endif
1083:Src/mc_interface.c **** }
 1851              		.loc 1 1083 1 view .LVU481
 1852 0008 08BD     		pop	{r3, pc}
 1853              		.cfi_endproc
 1854              	.LFE1473:
 1856              		.section	.text.MCI_GetMecSpeedRef_F,"ax",%progbits
 1857              		.align	1
 1858              		.weak	MCI_GetMecSpeedRef_F
 1859              		.syntax unified
 1860              		.thumb
 1861              		.thumb_func
 1862              		.fpu fpv4-sp-d16
 1864              	MCI_GetMecSpeedRef_F:
 1865              	.LVL171:
 1866              	.LFB1474:
1084:Src/mc_interface.c **** 
1085:Src/mc_interface.c **** /**
1086:Src/mc_interface.c ****   * @brief  Returns the current mechanical rotor speed reference expressed in rpm.
1087:Src/mc_interface.c ****   *
1088:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1089:Src/mc_interface.c ****   *
1090:Src/mc_interface.c ****   */
1091:Src/mc_interface.c **** __weak float MCI_GetMecSpeedRef_F(MCI_Handle_t *pHandle)
1092:Src/mc_interface.c **** {
 1867              		.loc 1 1092 1 is_stmt 1 view -0
 1868              		.cfi_startproc
 1869              		@ args = 0, pretend = 0, frame = 0
 1870              		@ frame_needed = 0, uses_anonymous_args = 0
 1871              		.loc 1 1092 1 is_stmt 0 view .LVU483
 1872 0000 08B5     		push	{r3, lr}
 1873              		.cfi_def_cfa_offset 8
 1874              		.cfi_offset 3, -8
 1875              		.cfi_offset 14, -4
1093:Src/mc_interface.c ****   return ((float)((STC_GetMecSpeedRefUnit( pHandle->pSTC ) * U_RPM) / SPEED_UNIT));
 1876              		.loc 1 1093 3 is_stmt 1 view .LVU484
 1877              		.loc 1 1093 20 is_stmt 0 view .LVU485
ARM GAS  /tmp/ccX12T6L.s 			page 55


 1878 0002 0068     		ldr	r0, [r0]
 1879              	.LVL172:
 1880              		.loc 1 1093 20 view .LVU486
 1881 0004 FFF7FEFF 		bl	STC_GetMecSpeedRefUnit
 1882              	.LVL173:
 1883              		.loc 1 1093 69 view .LVU487
 1884 0008 00EB4000 		add	r0, r0, r0, lsl #1
 1885 000c 4300     		lsls	r3, r0, #1
 1886 000e 00EE103A 		vmov	s0, r3	@ int
1094:Src/mc_interface.c **** }
 1887              		.loc 1 1094 1 view .LVU488
 1888 0012 B8EEC00A 		vcvt.f32.s32	s0, s0
 1889 0016 08BD     		pop	{r3, pc}
 1890              		.cfi_endproc
 1891              	.LFE1474:
 1893              		.section	.text.MCI_GetIab,"ax",%progbits
 1894              		.align	1
 1895              		.weak	MCI_GetIab
 1896              		.syntax unified
 1897              		.thumb
 1898              		.thumb_func
 1899              		.fpu fpv4-sp-d16
 1901              	MCI_GetIab:
 1902              	.LVL174:
 1903              	.LFB1475:
1095:Src/mc_interface.c **** 
1096:Src/mc_interface.c **** /**
1097:Src/mc_interface.c ****   * @brief  It returns stator current Iab in ab_t format
1098:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1099:Src/mc_interface.c ****   * @retval ab_t Stator current Iab
1100:Src/mc_interface.c ****   */
1101:Src/mc_interface.c **** __weak ab_t MCI_GetIab(MCI_Handle_t *pHandle)
1102:Src/mc_interface.c **** {
 1904              		.loc 1 1102 1 is_stmt 1 view -0
 1905              		.cfi_startproc
 1906              		@ args = 0, pretend = 0, frame = 8
 1907              		@ frame_needed = 0, uses_anonymous_args = 0
 1908              		@ link register save eliminated.
 1909              		.loc 1 1102 1 is_stmt 0 view .LVU490
 1910 0000 82B0     		sub	sp, sp, #8
 1911              		.cfi_def_cfa_offset 8
1103:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1104:Src/mc_interface.c ****   ab_t tempVal;
1105:Src/mc_interface.c **** 
1106:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1107:Src/mc_interface.c ****   {
1108:Src/mc_interface.c ****     tempVal.a = 0;
1109:Src/mc_interface.c ****     tempVal.b = 0;
1110:Src/mc_interface.c ****   }
1111:Src/mc_interface.c ****   else
1112:Src/mc_interface.c ****   {
1113:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Iab;
1114:Src/mc_interface.c ****   }
1115:Src/mc_interface.c ****   return (tempVal);
1116:Src/mc_interface.c **** #else
1117:Src/mc_interface.c ****   return (pHandle->pFOCVars->Iab);
 1912              		.loc 1 1117 3 is_stmt 1 view .LVU491
ARM GAS  /tmp/ccX12T6L.s 			page 56


 1913              		.loc 1 1117 18 is_stmt 0 view .LVU492
 1914 0002 4368     		ldr	r3, [r0, #4]
 1915              		.loc 1 1117 28 view .LVU493
 1916 0004 1868     		ldr	r0, [r3]	@ unaligned
 1917              	.LVL175:
 1918              		.loc 1 1117 28 view .LVU494
 1919 0006 0023     		movs	r3, #0
 1920 0008 82B2     		uxth	r2, r0
 1921 000a 62F30F03 		bfi	r3, r2, #0, #16
 1922 000e 000C     		lsrs	r0, r0, #16
 1923 0010 60F31F43 		bfi	r3, r0, #16, #16
1118:Src/mc_interface.c **** #endif
1119:Src/mc_interface.c **** }
 1924              		.loc 1 1119 1 view .LVU495
 1925 0014 1846     		mov	r0, r3
 1926 0016 02B0     		add	sp, sp, #8
 1927              		.cfi_def_cfa_offset 0
 1928              		@ sp needed
 1929 0018 7047     		bx	lr
 1930              		.cfi_endproc
 1931              	.LFE1475:
 1933              		.global	__aeabi_d2f
 1934              		.section	.text.MCI_GetIab_F,"ax",%progbits
 1935              		.align	1
 1936              		.weak	MCI_GetIab_F
 1937              		.syntax unified
 1938              		.thumb
 1939              		.thumb_func
 1940              		.fpu fpv4-sp-d16
 1942              	MCI_GetIab_F:
 1943              	.LVL176:
 1944              	.LFB1476:
1120:Src/mc_interface.c **** 
1121:Src/mc_interface.c **** __weak ab_f_t MCI_GetIab_F(MCI_Handle_t *pHandle)
1122:Src/mc_interface.c **** {
 1945              		.loc 1 1122 1 is_stmt 1 view -0
 1946              		.cfi_startproc
 1947              		@ args = 0, pretend = 0, frame = 24
 1948              		@ frame_needed = 0, uses_anonymous_args = 0
 1949              		.loc 1 1122 1 is_stmt 0 view .LVU497
 1950 0000 10B5     		push	{r4, lr}
 1951              		.cfi_def_cfa_offset 8
 1952              		.cfi_offset 4, -8
 1953              		.cfi_offset 14, -4
 1954 0002 86B0     		sub	sp, sp, #24
 1955              		.cfi_def_cfa_offset 32
1123:Src/mc_interface.c ****   ab_f_t Iab;
 1956              		.loc 1 1123 3 is_stmt 1 view .LVU498
1124:Src/mc_interface.c **** 
1125:Src/mc_interface.c ****   Iab.a = (float)((float)pHandle->pFOCVars->Iab.a * CURRENT_CONV_FACTOR_INV);
 1957              		.loc 1 1125 3 view .LVU499
 1958              		.loc 1 1125 33 is_stmt 0 view .LVU500
 1959 0004 4468     		ldr	r4, [r0, #4]
 1960              		.loc 1 1125 48 view .LVU501
 1961 0006 B4F90000 		ldrsh	r0, [r4]
 1962              	.LVL177:
 1963              		.loc 1 1125 19 view .LVU502
ARM GAS  /tmp/ccX12T6L.s 			page 57


 1964 000a 07EE900A 		vmov	s15, r0	@ int
 1965 000e F8EEE77A 		vcvt.f32.s32	s15, s15
 1966 0012 17EE900A 		vmov	r0, s15
 1967 0016 FFF7FEFF 		bl	__aeabi_f2d
 1968              	.LVL178:
 1969              		.loc 1 1125 51 view .LVU503
 1970 001a 13A3     		adr	r3, .L134
 1971 001c D3E90023 		ldrd	r2, [r3]
 1972 0020 FFF7FEFF 		bl	__aeabi_dmul
 1973              	.LVL179:
 1974              		.loc 1 1125 11 view .LVU504
 1975 0024 FFF7FEFF 		bl	__aeabi_d2f
 1976              	.LVL180:
 1977              		.loc 1 1125 9 view .LVU505
 1978 0028 0290     		str	r0, [sp, #8]	@ float
1126:Src/mc_interface.c ****   Iab.b = (float)((float)pHandle->pFOCVars->Iab.b * CURRENT_CONV_FACTOR_INV);
 1979              		.loc 1 1126 3 is_stmt 1 view .LVU506
 1980              		.loc 1 1126 48 is_stmt 0 view .LVU507
 1981 002a B4F90200 		ldrsh	r0, [r4, #2]
 1982              		.loc 1 1126 19 view .LVU508
 1983 002e 07EE900A 		vmov	s15, r0	@ int
 1984 0032 F8EEE77A 		vcvt.f32.s32	s15, s15
 1985 0036 17EE900A 		vmov	r0, s15
 1986 003a FFF7FEFF 		bl	__aeabi_f2d
 1987              	.LVL181:
 1988              		.loc 1 1126 51 view .LVU509
 1989 003e 0AA3     		adr	r3, .L134
 1990 0040 D3E90023 		ldrd	r2, [r3]
 1991 0044 FFF7FEFF 		bl	__aeabi_dmul
 1992              	.LVL182:
 1993              		.loc 1 1126 11 view .LVU510
 1994 0048 FFF7FEFF 		bl	__aeabi_d2f
 1995              	.LVL183:
 1996              		.loc 1 1126 9 view .LVU511
 1997 004c 0390     		str	r0, [sp, #12]	@ float
1127:Src/mc_interface.c **** 
1128:Src/mc_interface.c ****   return (Iab);
 1998              		.loc 1 1128 3 is_stmt 1 view .LVU512
 1999              		.loc 1 1128 10 is_stmt 0 view .LVU513
 2000 004e 0399     		ldr	r1, [sp, #12]
 2001 0050 0298     		ldr	r0, [sp, #8]
 2002 0052 06AB     		add	r3, sp, #24
 2003 0054 03E90300 		stmdb	r3, {r0, r1}
1129:Src/mc_interface.c **** 
1130:Src/mc_interface.c **** }
 2004              		.loc 1 1130 1 view .LVU514
 2005 0058 9DED040A 		vldr.32	s0, [sp, #16]
 2006 005c DDED050A 		vldr.32	s1, [sp, #20]
 2007 0060 06B0     		add	sp, sp, #24
 2008              		.cfi_def_cfa_offset 8
 2009              		@ sp needed
 2010 0062 10BD     		pop	{r4, pc}
 2011              	.L135:
 2012 0064 AFF30080 		.align	3
 2013              	.L134:
 2014 0068 A59F4B31 		.word	827039653
 2015 006c 68165E3F 		.word	1063130728
ARM GAS  /tmp/ccX12T6L.s 			page 58


 2016              		.cfi_endproc
 2017              	.LFE1476:
 2019              		.section	.text.MCI_GetIalphabeta,"ax",%progbits
 2020              		.align	1
 2021              		.weak	MCI_GetIalphabeta
 2022              		.syntax unified
 2023              		.thumb
 2024              		.thumb_func
 2025              		.fpu fpv4-sp-d16
 2027              	MCI_GetIalphabeta:
 2028              	.LVL184:
 2029              	.LFB1477:
1131:Src/mc_interface.c **** 
1132:Src/mc_interface.c **** /**
1133:Src/mc_interface.c ****   * @brief  It returns stator current Ialphabeta in alphabeta_t format
1134:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1135:Src/mc_interface.c ****   * @retval alphabeta_t Stator current Ialphabeta
1136:Src/mc_interface.c ****   */
1137:Src/mc_interface.c **** __weak alphabeta_t MCI_GetIalphabeta(MCI_Handle_t *pHandle)
1138:Src/mc_interface.c **** {
 2030              		.loc 1 1138 1 is_stmt 1 view -0
 2031              		.cfi_startproc
 2032              		@ args = 0, pretend = 0, frame = 8
 2033              		@ frame_needed = 0, uses_anonymous_args = 0
 2034              		@ link register save eliminated.
 2035              		.loc 1 1138 1 is_stmt 0 view .LVU516
 2036 0000 82B0     		sub	sp, sp, #8
 2037              		.cfi_def_cfa_offset 8
1139:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1140:Src/mc_interface.c ****   alphabeta_t tempVal;
1141:Src/mc_interface.c **** 
1142:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1143:Src/mc_interface.c ****   {
1144:Src/mc_interface.c ****     tempVal.alpha = 0;
1145:Src/mc_interface.c ****     tempVal.beta = 0;
1146:Src/mc_interface.c ****   }
1147:Src/mc_interface.c ****   else
1148:Src/mc_interface.c ****   {
1149:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Ialphabeta;
1150:Src/mc_interface.c ****   }
1151:Src/mc_interface.c ****   return (tempVal);
1152:Src/mc_interface.c **** #else
1153:Src/mc_interface.c ****   return (pHandle->pFOCVars->Ialphabeta);
 2038              		.loc 1 1153 3 is_stmt 1 view .LVU517
 2039              		.loc 1 1153 18 is_stmt 0 view .LVU518
 2040 0002 4368     		ldr	r3, [r0, #4]
 2041              		.loc 1 1153 28 view .LVU519
 2042 0004 5868     		ldr	r0, [r3, #4]	@ unaligned
 2043              	.LVL185:
 2044              		.loc 1 1153 28 view .LVU520
 2045 0006 0023     		movs	r3, #0
 2046 0008 82B2     		uxth	r2, r0
 2047 000a 62F30F03 		bfi	r3, r2, #0, #16
 2048 000e 000C     		lsrs	r0, r0, #16
 2049 0010 60F31F43 		bfi	r3, r0, #16, #16
1154:Src/mc_interface.c **** #endif
1155:Src/mc_interface.c **** }
ARM GAS  /tmp/ccX12T6L.s 			page 59


 2050              		.loc 1 1155 1 view .LVU521
 2051 0014 1846     		mov	r0, r3
 2052 0016 02B0     		add	sp, sp, #8
 2053              		.cfi_def_cfa_offset 0
 2054              		@ sp needed
 2055 0018 7047     		bx	lr
 2056              		.cfi_endproc
 2057              	.LFE1477:
 2059              		.section	.text.MCI_GetIqd,"ax",%progbits
 2060              		.align	1
 2061              		.weak	MCI_GetIqd
 2062              		.syntax unified
 2063              		.thumb
 2064              		.thumb_func
 2065              		.fpu fpv4-sp-d16
 2067              	MCI_GetIqd:
 2068              	.LVL186:
 2069              	.LFB1478:
1156:Src/mc_interface.c **** 
1157:Src/mc_interface.c **** /**
1158:Src/mc_interface.c ****   * @brief  It returns stator current Iqd in qd_t format
1159:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1160:Src/mc_interface.c ****   * @retval qd_t Stator current Iqd
1161:Src/mc_interface.c ****   */
1162:Src/mc_interface.c **** __weak qd_t MCI_GetIqd(MCI_Handle_t *pHandle)
1163:Src/mc_interface.c **** {
 2070              		.loc 1 1163 1 is_stmt 1 view -0
 2071              		.cfi_startproc
 2072              		@ args = 0, pretend = 0, frame = 8
 2073              		@ frame_needed = 0, uses_anonymous_args = 0
 2074              		@ link register save eliminated.
 2075              		.loc 1 1163 1 is_stmt 0 view .LVU523
 2076 0000 82B0     		sub	sp, sp, #8
 2077              		.cfi_def_cfa_offset 8
1164:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1165:Src/mc_interface.c ****   qd_t tempVal;
1166:Src/mc_interface.c **** 
1167:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1168:Src/mc_interface.c ****   {
1169:Src/mc_interface.c ****     tempVal.q = 0;
1170:Src/mc_interface.c ****     tempVal.d = 0;
1171:Src/mc_interface.c ****   }
1172:Src/mc_interface.c ****   else
1173:Src/mc_interface.c ****   {
1174:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Iqd;
1175:Src/mc_interface.c ****   }
1176:Src/mc_interface.c ****   return (tempVal);
1177:Src/mc_interface.c **** #else
1178:Src/mc_interface.c ****   return (pHandle->pFOCVars->Iqd);
 2078              		.loc 1 1178 3 is_stmt 1 view .LVU524
 2079              		.loc 1 1178 18 is_stmt 0 view .LVU525
 2080 0002 4368     		ldr	r3, [r0, #4]
 2081              		.loc 1 1178 28 view .LVU526
 2082 0004 D868     		ldr	r0, [r3, #12]	@ unaligned
 2083              	.LVL187:
 2084              		.loc 1 1178 28 view .LVU527
 2085 0006 0023     		movs	r3, #0
ARM GAS  /tmp/ccX12T6L.s 			page 60


 2086 0008 82B2     		uxth	r2, r0
 2087 000a 62F30F03 		bfi	r3, r2, #0, #16
 2088 000e 000C     		lsrs	r0, r0, #16
 2089 0010 60F31F43 		bfi	r3, r0, #16, #16
1179:Src/mc_interface.c **** #endif
1180:Src/mc_interface.c **** }
 2090              		.loc 1 1180 1 view .LVU528
 2091 0014 1846     		mov	r0, r3
 2092 0016 02B0     		add	sp, sp, #8
 2093              		.cfi_def_cfa_offset 0
 2094              		@ sp needed
 2095 0018 7047     		bx	lr
 2096              		.cfi_endproc
 2097              	.LFE1478:
 2099              		.section	.text.MCI_GetIqd_F,"ax",%progbits
 2100              		.align	1
 2101              		.weak	MCI_GetIqd_F
 2102              		.syntax unified
 2103              		.thumb
 2104              		.thumb_func
 2105              		.fpu fpv4-sp-d16
 2107              	MCI_GetIqd_F:
 2108              	.LVL188:
 2109              	.LFB1479:
1181:Src/mc_interface.c **** 
1182:Src/mc_interface.c **** /**
1183:Src/mc_interface.c ****   * @brief  It returns stator current Iqd in float format
1184:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1185:Src/mc_interface.c ****   * @retval qd_f_t Stator current Iqd (in Ampere)
1186:Src/mc_interface.c ****   */
1187:Src/mc_interface.c **** __weak qd_f_t MCI_GetIqd_F(MCI_Handle_t *pHandle)
1188:Src/mc_interface.c **** {
 2110              		.loc 1 1188 1 is_stmt 1 view -0
 2111              		.cfi_startproc
 2112              		@ args = 0, pretend = 0, frame = 24
 2113              		@ frame_needed = 0, uses_anonymous_args = 0
 2114              		.loc 1 1188 1 is_stmt 0 view .LVU530
 2115 0000 10B5     		push	{r4, lr}
 2116              		.cfi_def_cfa_offset 8
 2117              		.cfi_offset 4, -8
 2118              		.cfi_offset 14, -4
 2119 0002 86B0     		sub	sp, sp, #24
 2120              		.cfi_def_cfa_offset 32
1189:Src/mc_interface.c ****   qd_f_t Iqd;
 2121              		.loc 1 1189 3 is_stmt 1 view .LVU531
1190:Src/mc_interface.c **** 
1191:Src/mc_interface.c ****   Iqd.d = (float)((float)pHandle->pFOCVars->Iqd.d * CURRENT_CONV_FACTOR_INV);
 2122              		.loc 1 1191 3 view .LVU532
 2123              		.loc 1 1191 33 is_stmt 0 view .LVU533
 2124 0004 4468     		ldr	r4, [r0, #4]
 2125              		.loc 1 1191 48 view .LVU534
 2126 0006 B4F90E00 		ldrsh	r0, [r4, #14]
 2127              	.LVL189:
 2128              		.loc 1 1191 19 view .LVU535
 2129 000a 07EE900A 		vmov	s15, r0	@ int
 2130 000e F8EEE77A 		vcvt.f32.s32	s15, s15
 2131 0012 17EE900A 		vmov	r0, s15
ARM GAS  /tmp/ccX12T6L.s 			page 61


 2132 0016 FFF7FEFF 		bl	__aeabi_f2d
 2133              	.LVL190:
 2134              		.loc 1 1191 51 view .LVU536
 2135 001a 13A3     		adr	r3, .L142
 2136 001c D3E90023 		ldrd	r2, [r3]
 2137 0020 FFF7FEFF 		bl	__aeabi_dmul
 2138              	.LVL191:
 2139              		.loc 1 1191 11 view .LVU537
 2140 0024 FFF7FEFF 		bl	__aeabi_d2f
 2141              	.LVL192:
 2142              		.loc 1 1191 9 view .LVU538
 2143 0028 0390     		str	r0, [sp, #12]	@ float
1192:Src/mc_interface.c ****   Iqd.q = (float)((float)pHandle->pFOCVars->Iqd.q * CURRENT_CONV_FACTOR_INV);
 2144              		.loc 1 1192 3 is_stmt 1 view .LVU539
 2145              		.loc 1 1192 48 is_stmt 0 view .LVU540
 2146 002a B4F90C00 		ldrsh	r0, [r4, #12]
 2147              		.loc 1 1192 19 view .LVU541
 2148 002e 07EE900A 		vmov	s15, r0	@ int
 2149 0032 F8EEE77A 		vcvt.f32.s32	s15, s15
 2150 0036 17EE900A 		vmov	r0, s15
 2151 003a FFF7FEFF 		bl	__aeabi_f2d
 2152              	.LVL193:
 2153              		.loc 1 1192 51 view .LVU542
 2154 003e 0AA3     		adr	r3, .L142
 2155 0040 D3E90023 		ldrd	r2, [r3]
 2156 0044 FFF7FEFF 		bl	__aeabi_dmul
 2157              	.LVL194:
 2158              		.loc 1 1192 11 view .LVU543
 2159 0048 FFF7FEFF 		bl	__aeabi_d2f
 2160              	.LVL195:
 2161              		.loc 1 1192 9 view .LVU544
 2162 004c 0290     		str	r0, [sp, #8]	@ float
1193:Src/mc_interface.c **** 
1194:Src/mc_interface.c ****   return (Iqd);
 2163              		.loc 1 1194 3 is_stmt 1 view .LVU545
 2164              		.loc 1 1194 10 is_stmt 0 view .LVU546
 2165 004e 0399     		ldr	r1, [sp, #12]
 2166 0050 0298     		ldr	r0, [sp, #8]
 2167 0052 06AB     		add	r3, sp, #24
 2168 0054 03E90300 		stmdb	r3, {r0, r1}
1195:Src/mc_interface.c **** }
 2169              		.loc 1 1195 1 view .LVU547
 2170 0058 9DED040A 		vldr.32	s0, [sp, #16]
 2171 005c DDED050A 		vldr.32	s1, [sp, #20]
 2172 0060 06B0     		add	sp, sp, #24
 2173              		.cfi_def_cfa_offset 8
 2174              		@ sp needed
 2175 0062 10BD     		pop	{r4, pc}
 2176              	.L143:
 2177 0064 AFF30080 		.align	3
 2178              	.L142:
 2179 0068 A59F4B31 		.word	827039653
 2180 006c 68165E3F 		.word	1063130728
 2181              		.cfi_endproc
 2182              	.LFE1479:
 2184              		.section	.text.MCI_GetIqdHF,"ax",%progbits
 2185              		.align	1
ARM GAS  /tmp/ccX12T6L.s 			page 62


 2186              		.weak	MCI_GetIqdHF
 2187              		.syntax unified
 2188              		.thumb
 2189              		.thumb_func
 2190              		.fpu fpv4-sp-d16
 2192              	MCI_GetIqdHF:
 2193              	.LVL196:
 2194              	.LFB1480:
1196:Src/mc_interface.c **** 
1197:Src/mc_interface.c **** /**
1198:Src/mc_interface.c ****   * @brief  It returns stator current IqdHF in qd_t format
1199:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1200:Src/mc_interface.c ****   * @retval qd_t Stator current IqdHF if HFI is selected as main
1201:Src/mc_interface.c ****   *         sensor. Otherwise it returns { 0, 0}.
1202:Src/mc_interface.c ****   */
1203:Src/mc_interface.c **** __weak qd_t MCI_GetIqdHF(MCI_Handle_t *pHandle)
1204:Src/mc_interface.c **** {
 2195              		.loc 1 1204 1 is_stmt 1 view -0
 2196              		.cfi_startproc
 2197              		@ args = 0, pretend = 0, frame = 8
 2198              		@ frame_needed = 0, uses_anonymous_args = 0
 2199              		@ link register save eliminated.
 2200              		.loc 1 1204 1 is_stmt 0 view .LVU549
 2201 0000 82B0     		sub	sp, sp, #8
 2202              		.cfi_def_cfa_offset 8
1205:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1206:Src/mc_interface.c ****   qd_t tempVal;
1207:Src/mc_interface.c **** 
1208:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1209:Src/mc_interface.c ****   {
1210:Src/mc_interface.c ****     tempVal.q = 0;
1211:Src/mc_interface.c ****     tempVal.d = 0;
1212:Src/mc_interface.c ****   }
1213:Src/mc_interface.c ****   else
1214:Src/mc_interface.c ****   {
1215:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->IqdHF;
1216:Src/mc_interface.c ****   }
1217:Src/mc_interface.c ****   return (tempVal);
1218:Src/mc_interface.c **** #else
1219:Src/mc_interface.c ****   return (pHandle->pFOCVars->IqdHF);
 2203              		.loc 1 1219 3 is_stmt 1 view .LVU550
 2204              		.loc 1 1219 18 is_stmt 0 view .LVU551
 2205 0002 4368     		ldr	r3, [r0, #4]
 2206              		.loc 1 1219 28 view .LVU552
 2207 0004 9868     		ldr	r0, [r3, #8]	@ unaligned
 2208              	.LVL197:
 2209              		.loc 1 1219 28 view .LVU553
 2210 0006 0023     		movs	r3, #0
 2211 0008 82B2     		uxth	r2, r0
 2212 000a 62F30F03 		bfi	r3, r2, #0, #16
 2213 000e 000C     		lsrs	r0, r0, #16
 2214 0010 60F31F43 		bfi	r3, r0, #16, #16
1220:Src/mc_interface.c **** #endif
1221:Src/mc_interface.c **** }
 2215              		.loc 1 1221 1 view .LVU554
 2216 0014 1846     		mov	r0, r3
 2217 0016 02B0     		add	sp, sp, #8
ARM GAS  /tmp/ccX12T6L.s 			page 63


 2218              		.cfi_def_cfa_offset 0
 2219              		@ sp needed
 2220 0018 7047     		bx	lr
 2221              		.cfi_endproc
 2222              	.LFE1480:
 2224              		.section	.text.MCI_GetIqdref,"ax",%progbits
 2225              		.align	1
 2226              		.weak	MCI_GetIqdref
 2227              		.syntax unified
 2228              		.thumb
 2229              		.thumb_func
 2230              		.fpu fpv4-sp-d16
 2232              	MCI_GetIqdref:
 2233              	.LVL198:
 2234              	.LFB1481:
1222:Src/mc_interface.c **** 
1223:Src/mc_interface.c **** /**
1224:Src/mc_interface.c ****   * @brief  It returns stator current Iqdref in qd_t format
1225:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1226:Src/mc_interface.c ****   * @retval qd_t Stator current Iqdref
1227:Src/mc_interface.c ****   */
1228:Src/mc_interface.c **** __weak qd_t MCI_GetIqdref(MCI_Handle_t *pHandle)
1229:Src/mc_interface.c **** {
 2235              		.loc 1 1229 1 is_stmt 1 view -0
 2236              		.cfi_startproc
 2237              		@ args = 0, pretend = 0, frame = 8
 2238              		@ frame_needed = 0, uses_anonymous_args = 0
 2239              		@ link register save eliminated.
 2240              		.loc 1 1229 1 is_stmt 0 view .LVU556
 2241 0000 82B0     		sub	sp, sp, #8
 2242              		.cfi_def_cfa_offset 8
1230:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1231:Src/mc_interface.c ****   qd_t tempVal;
1232:Src/mc_interface.c **** 
1233:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1234:Src/mc_interface.c ****   {
1235:Src/mc_interface.c ****     tempVal.q = 0;
1236:Src/mc_interface.c ****     tempVal.d = 0;
1237:Src/mc_interface.c ****   }
1238:Src/mc_interface.c ****   else
1239:Src/mc_interface.c ****   {
1240:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Iqdref;
1241:Src/mc_interface.c ****   }
1242:Src/mc_interface.c ****   return (tempVal);
1243:Src/mc_interface.c **** #else
1244:Src/mc_interface.c ****   return (pHandle->pFOCVars->Iqdref);
 2243              		.loc 1 1244 3 is_stmt 1 view .LVU557
 2244              		.loc 1 1244 18 is_stmt 0 view .LVU558
 2245 0002 4368     		ldr	r3, [r0, #4]
 2246              		.loc 1 1244 28 view .LVU559
 2247 0004 1869     		ldr	r0, [r3, #16]	@ unaligned
 2248              	.LVL199:
 2249              		.loc 1 1244 28 view .LVU560
 2250 0006 0023     		movs	r3, #0
 2251 0008 82B2     		uxth	r2, r0
 2252 000a 62F30F03 		bfi	r3, r2, #0, #16
 2253 000e 000C     		lsrs	r0, r0, #16
ARM GAS  /tmp/ccX12T6L.s 			page 64


 2254 0010 60F31F43 		bfi	r3, r0, #16, #16
1245:Src/mc_interface.c **** #endif
1246:Src/mc_interface.c **** }
 2255              		.loc 1 1246 1 view .LVU561
 2256 0014 1846     		mov	r0, r3
 2257 0016 02B0     		add	sp, sp, #8
 2258              		.cfi_def_cfa_offset 0
 2259              		@ sp needed
 2260 0018 7047     		bx	lr
 2261              		.cfi_endproc
 2262              	.LFE1481:
 2264              		.section	.text.MCI_GetIqdref_F,"ax",%progbits
 2265              		.align	1
 2266              		.weak	MCI_GetIqdref_F
 2267              		.syntax unified
 2268              		.thumb
 2269              		.thumb_func
 2270              		.fpu fpv4-sp-d16
 2272              	MCI_GetIqdref_F:
 2273              	.LVL200:
 2274              	.LFB1482:
1247:Src/mc_interface.c **** 
1248:Src/mc_interface.c **** /**
1249:Src/mc_interface.c ****   * @brief  It returns stator current Iqdref in float format
1250:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1251:Src/mc_interface.c ****   * @retval qd_f_t Stator current Iqdref (in Ampere)
1252:Src/mc_interface.c ****   */
1253:Src/mc_interface.c **** __weak qd_f_t MCI_GetIqdref_F(MCI_Handle_t *pHandle)
1254:Src/mc_interface.c **** {
 2275              		.loc 1 1254 1 is_stmt 1 view -0
 2276              		.cfi_startproc
 2277              		@ args = 0, pretend = 0, frame = 24
 2278              		@ frame_needed = 0, uses_anonymous_args = 0
 2279              		.loc 1 1254 1 is_stmt 0 view .LVU563
 2280 0000 10B5     		push	{r4, lr}
 2281              		.cfi_def_cfa_offset 8
 2282              		.cfi_offset 4, -8
 2283              		.cfi_offset 14, -4
 2284 0002 86B0     		sub	sp, sp, #24
 2285              		.cfi_def_cfa_offset 32
1255:Src/mc_interface.c ****   qd_f_t Iqdref;
 2286              		.loc 1 1255 3 is_stmt 1 view .LVU564
1256:Src/mc_interface.c **** 
1257:Src/mc_interface.c ****   Iqdref.d = (float)((float)pHandle->pFOCVars->Iqdref.d * CURRENT_CONV_FACTOR_INV);
 2287              		.loc 1 1257 3 view .LVU565
 2288              		.loc 1 1257 36 is_stmt 0 view .LVU566
 2289 0004 4468     		ldr	r4, [r0, #4]
 2290              		.loc 1 1257 54 view .LVU567
 2291 0006 B4F91200 		ldrsh	r0, [r4, #18]
 2292              	.LVL201:
 2293              		.loc 1 1257 22 view .LVU568
 2294 000a 07EE900A 		vmov	s15, r0	@ int
 2295 000e F8EEE77A 		vcvt.f32.s32	s15, s15
 2296 0012 17EE900A 		vmov	r0, s15
 2297 0016 FFF7FEFF 		bl	__aeabi_f2d
 2298              	.LVL202:
 2299              		.loc 1 1257 57 view .LVU569
ARM GAS  /tmp/ccX12T6L.s 			page 65


 2300 001a 13A3     		adr	r3, .L150
 2301 001c D3E90023 		ldrd	r2, [r3]
 2302 0020 FFF7FEFF 		bl	__aeabi_dmul
 2303              	.LVL203:
 2304              		.loc 1 1257 14 view .LVU570
 2305 0024 FFF7FEFF 		bl	__aeabi_d2f
 2306              	.LVL204:
 2307              		.loc 1 1257 12 view .LVU571
 2308 0028 0390     		str	r0, [sp, #12]	@ float
1258:Src/mc_interface.c ****   Iqdref.q = (float)((float)pHandle->pFOCVars->Iqdref.q * CURRENT_CONV_FACTOR_INV);
 2309              		.loc 1 1258 3 is_stmt 1 view .LVU572
 2310              		.loc 1 1258 54 is_stmt 0 view .LVU573
 2311 002a B4F91000 		ldrsh	r0, [r4, #16]
 2312              		.loc 1 1258 22 view .LVU574
 2313 002e 07EE900A 		vmov	s15, r0	@ int
 2314 0032 F8EEE77A 		vcvt.f32.s32	s15, s15
 2315 0036 17EE900A 		vmov	r0, s15
 2316 003a FFF7FEFF 		bl	__aeabi_f2d
 2317              	.LVL205:
 2318              		.loc 1 1258 57 view .LVU575
 2319 003e 0AA3     		adr	r3, .L150
 2320 0040 D3E90023 		ldrd	r2, [r3]
 2321 0044 FFF7FEFF 		bl	__aeabi_dmul
 2322              	.LVL206:
 2323              		.loc 1 1258 14 view .LVU576
 2324 0048 FFF7FEFF 		bl	__aeabi_d2f
 2325              	.LVL207:
 2326              		.loc 1 1258 12 view .LVU577
 2327 004c 0290     		str	r0, [sp, #8]	@ float
1259:Src/mc_interface.c **** 
1260:Src/mc_interface.c ****   return ( Iqdref );
 2328              		.loc 1 1260 3 is_stmt 1 view .LVU578
 2329              		.loc 1 1260 10 is_stmt 0 view .LVU579
 2330 004e 0399     		ldr	r1, [sp, #12]
 2331 0050 0298     		ldr	r0, [sp, #8]
 2332 0052 06AB     		add	r3, sp, #24
 2333 0054 03E90300 		stmdb	r3, {r0, r1}
1261:Src/mc_interface.c **** }
 2334              		.loc 1 1261 1 view .LVU580
 2335 0058 9DED040A 		vldr.32	s0, [sp, #16]
 2336 005c DDED050A 		vldr.32	s1, [sp, #20]
 2337 0060 06B0     		add	sp, sp, #24
 2338              		.cfi_def_cfa_offset 8
 2339              		@ sp needed
 2340 0062 10BD     		pop	{r4, pc}
 2341              	.L151:
 2342 0064 AFF30080 		.align	3
 2343              	.L150:
 2344 0068 A59F4B31 		.word	827039653
 2345 006c 68165E3F 		.word	1063130728
 2346              		.cfi_endproc
 2347              	.LFE1482:
 2349              		.section	.text.MCI_GetVqd,"ax",%progbits
 2350              		.align	1
 2351              		.weak	MCI_GetVqd
 2352              		.syntax unified
 2353              		.thumb
ARM GAS  /tmp/ccX12T6L.s 			page 66


 2354              		.thumb_func
 2355              		.fpu fpv4-sp-d16
 2357              	MCI_GetVqd:
 2358              	.LVL208:
 2359              	.LFB1483:
1262:Src/mc_interface.c **** 
1263:Src/mc_interface.c **** /**
1264:Src/mc_interface.c ****   * @brief  It returns stator current Vqd in qd_t format
1265:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1266:Src/mc_interface.c ****   * @retval qd_t Stator current Vqd
1267:Src/mc_interface.c ****   */
1268:Src/mc_interface.c **** __weak qd_t MCI_GetVqd(MCI_Handle_t *pHandle)
1269:Src/mc_interface.c **** {
 2360              		.loc 1 1269 1 is_stmt 1 view -0
 2361              		.cfi_startproc
 2362              		@ args = 0, pretend = 0, frame = 8
 2363              		@ frame_needed = 0, uses_anonymous_args = 0
 2364              		@ link register save eliminated.
 2365              		.loc 1 1269 1 is_stmt 0 view .LVU582
 2366 0000 82B0     		sub	sp, sp, #8
 2367              		.cfi_def_cfa_offset 8
1270:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1271:Src/mc_interface.c ****   qd_t tempVal;
1272:Src/mc_interface.c **** 
1273:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1274:Src/mc_interface.c ****   {
1275:Src/mc_interface.c ****     tempVal.q = 0;
1276:Src/mc_interface.c ****     tempVal.d = 0;
1277:Src/mc_interface.c ****   }
1278:Src/mc_interface.c ****   else
1279:Src/mc_interface.c ****   {
1280:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Vqd;
1281:Src/mc_interface.c ****   }
1282:Src/mc_interface.c ****   return (tempVal);
1283:Src/mc_interface.c **** #else
1284:Src/mc_interface.c ****   return (pHandle->pFOCVars->Vqd);
 2368              		.loc 1 1284 3 is_stmt 1 view .LVU583
 2369              		.loc 1 1284 18 is_stmt 0 view .LVU584
 2370 0002 4368     		ldr	r3, [r0, #4]
 2371              		.loc 1 1284 28 view .LVU585
 2372 0004 D3F81600 		ldr	r0, [r3, #22]	@ unaligned
 2373              	.LVL209:
 2374              		.loc 1 1284 28 view .LVU586
 2375 0008 0023     		movs	r3, #0
 2376 000a 82B2     		uxth	r2, r0
 2377 000c 62F30F03 		bfi	r3, r2, #0, #16
 2378 0010 000C     		lsrs	r0, r0, #16
 2379 0012 60F31F43 		bfi	r3, r0, #16, #16
1285:Src/mc_interface.c **** #endif
1286:Src/mc_interface.c **** }
 2380              		.loc 1 1286 1 view .LVU587
 2381 0016 1846     		mov	r0, r3
 2382 0018 02B0     		add	sp, sp, #8
 2383              		.cfi_def_cfa_offset 0
 2384              		@ sp needed
 2385 001a 7047     		bx	lr
 2386              		.cfi_endproc
ARM GAS  /tmp/ccX12T6L.s 			page 67


 2387              	.LFE1483:
 2389              		.section	.text.MCI_GetValphabeta,"ax",%progbits
 2390              		.align	1
 2391              		.weak	MCI_GetValphabeta
 2392              		.syntax unified
 2393              		.thumb
 2394              		.thumb_func
 2395              		.fpu fpv4-sp-d16
 2397              	MCI_GetValphabeta:
 2398              	.LVL210:
 2399              	.LFB1484:
1287:Src/mc_interface.c **** 
1288:Src/mc_interface.c **** /**
1289:Src/mc_interface.c ****   * @brief  It returns stator current Valphabeta in alphabeta_t format
1290:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1291:Src/mc_interface.c ****   * @retval alphabeta_t Stator current Valphabeta
1292:Src/mc_interface.c ****   */
1293:Src/mc_interface.c **** __weak alphabeta_t MCI_GetValphabeta(MCI_Handle_t *pHandle)
1294:Src/mc_interface.c **** {
 2400              		.loc 1 1294 1 is_stmt 1 view -0
 2401              		.cfi_startproc
 2402              		@ args = 0, pretend = 0, frame = 8
 2403              		@ frame_needed = 0, uses_anonymous_args = 0
 2404              		@ link register save eliminated.
 2405              		.loc 1 1294 1 is_stmt 0 view .LVU589
 2406 0000 82B0     		sub	sp, sp, #8
 2407              		.cfi_def_cfa_offset 8
1295:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1296:Src/mc_interface.c ****   alphabeta_t tempVal;
1297:Src/mc_interface.c **** 
1298:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1299:Src/mc_interface.c ****   {
1300:Src/mc_interface.c ****     tempVal.alpha = 0;
1301:Src/mc_interface.c ****     tempVal.beta = 0;
1302:Src/mc_interface.c ****   }
1303:Src/mc_interface.c ****   else
1304:Src/mc_interface.c ****   {
1305:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Valphabeta;
1306:Src/mc_interface.c ****   }
1307:Src/mc_interface.c ****   return (tempVal);
1308:Src/mc_interface.c **** #else
1309:Src/mc_interface.c ****   return (pHandle->pFOCVars->Valphabeta);
 2408              		.loc 1 1309 3 is_stmt 1 view .LVU590
 2409              		.loc 1 1309 18 is_stmt 0 view .LVU591
 2410 0002 4368     		ldr	r3, [r0, #4]
 2411              		.loc 1 1309 28 view .LVU592
 2412 0004 D3F81A00 		ldr	r0, [r3, #26]	@ unaligned
 2413              	.LVL211:
 2414              		.loc 1 1309 28 view .LVU593
 2415 0008 0023     		movs	r3, #0
 2416 000a 82B2     		uxth	r2, r0
 2417 000c 62F30F03 		bfi	r3, r2, #0, #16
 2418 0010 000C     		lsrs	r0, r0, #16
 2419 0012 60F31F43 		bfi	r3, r0, #16, #16
1310:Src/mc_interface.c **** #endif
1311:Src/mc_interface.c **** }
 2420              		.loc 1 1311 1 view .LVU594
ARM GAS  /tmp/ccX12T6L.s 			page 68


 2421 0016 1846     		mov	r0, r3
 2422 0018 02B0     		add	sp, sp, #8
 2423              		.cfi_def_cfa_offset 0
 2424              		@ sp needed
 2425 001a 7047     		bx	lr
 2426              		.cfi_endproc
 2427              	.LFE1484:
 2429              		.section	.text.MCI_GetElAngledpp,"ax",%progbits
 2430              		.align	1
 2431              		.weak	MCI_GetElAngledpp
 2432              		.syntax unified
 2433              		.thumb
 2434              		.thumb_func
 2435              		.fpu fpv4-sp-d16
 2437              	MCI_GetElAngledpp:
 2438              	.LVL212:
 2439              	.LFB1485:
1312:Src/mc_interface.c **** 
1313:Src/mc_interface.c **** /**
1314:Src/mc_interface.c ****   * @brief  It returns the rotor electrical angle actually used for reference
1315:Src/mc_interface.c ****   *         frame transformation
1316:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1317:Src/mc_interface.c ****   * @retval int16_t Rotor electrical angle in dpp format
1318:Src/mc_interface.c ****   */
1319:Src/mc_interface.c **** __weak int16_t MCI_GetElAngledpp(MCI_Handle_t *pHandle)
1320:Src/mc_interface.c **** {
 2440              		.loc 1 1320 1 is_stmt 1 view -0
 2441              		.cfi_startproc
 2442              		@ args = 0, pretend = 0, frame = 0
 2443              		@ frame_needed = 0, uses_anonymous_args = 0
 2444              		@ link register save eliminated.
1321:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1322:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hElAngle);
1323:Src/mc_interface.c **** #else
1324:Src/mc_interface.c ****   return (pHandle->pFOCVars->hElAngle);
 2445              		.loc 1 1324 3 view .LVU596
 2446              		.loc 1 1324 18 is_stmt 0 view .LVU597
 2447 0000 4368     		ldr	r3, [r0, #4]
1325:Src/mc_interface.c **** #endif
1326:Src/mc_interface.c **** }
 2448              		.loc 1 1326 1 view .LVU598
 2449 0002 B3F92000 		ldrsh	r0, [r3, #32]
 2450              	.LVL213:
 2451              		.loc 1 1326 1 view .LVU599
 2452 0006 7047     		bx	lr
 2453              		.cfi_endproc
 2454              	.LFE1485:
 2456              		.section	.text.MCI_GetTeref,"ax",%progbits
 2457              		.align	1
 2458              		.weak	MCI_GetTeref
 2459              		.syntax unified
 2460              		.thumb
 2461              		.thumb_func
 2462              		.fpu fpv4-sp-d16
 2464              	MCI_GetTeref:
 2465              	.LVL214:
 2466              	.LFB1486:
ARM GAS  /tmp/ccX12T6L.s 			page 69


1327:Src/mc_interface.c **** 
1328:Src/mc_interface.c **** /**
1329:Src/mc_interface.c ****   * @brief  It returns the reference electrical torque, fed to derived class for
1330:Src/mc_interface.c ****   *         Iqref and Idref computation
1331:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1332:Src/mc_interface.c ****   * @retval int16_t Teref
1333:Src/mc_interface.c ****   */
1334:Src/mc_interface.c **** __weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle)
1335:Src/mc_interface.c **** {
 2467              		.loc 1 1335 1 is_stmt 1 view -0
 2468              		.cfi_startproc
 2469              		@ args = 0, pretend = 0, frame = 0
 2470              		@ frame_needed = 0, uses_anonymous_args = 0
 2471              		@ link register save eliminated.
1336:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1337:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
1338:Src/mc_interface.c **** #else
1339:Src/mc_interface.c ****   return (pHandle->pFOCVars->hTeref);
 2472              		.loc 1 1339 3 view .LVU601
 2473              		.loc 1 1339 18 is_stmt 0 view .LVU602
 2474 0000 4368     		ldr	r3, [r0, #4]
1340:Src/mc_interface.c **** #endif
1341:Src/mc_interface.c **** }
 2475              		.loc 1 1341 1 view .LVU603
 2476 0002 B3F91E00 		ldrsh	r0, [r3, #30]
 2477              	.LVL215:
 2478              		.loc 1 1341 1 view .LVU604
 2479 0006 7047     		bx	lr
 2480              		.cfi_endproc
 2481              	.LFE1486:
 2483              		.global	__aeabi_i2d
 2484              		.section	.text.MCI_GetTeref_F,"ax",%progbits
 2485              		.align	1
 2486              		.weak	MCI_GetTeref_F
 2487              		.syntax unified
 2488              		.thumb
 2489              		.thumb_func
 2490              		.fpu fpv4-sp-d16
 2492              	MCI_GetTeref_F:
 2493              	.LVL216:
 2494              	.LFB1487:
1342:Src/mc_interface.c **** 
1343:Src/mc_interface.c **** /**
1344:Src/mc_interface.c ****   * @brief  It returns the reference electrical torque.
1345:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1346:Src/mc_interface.c ****   * @retval float Teref
1347:Src/mc_interface.c ****   */
1348:Src/mc_interface.c **** __weak float MCI_GetTeref_F(MCI_Handle_t *pHandle)
1349:Src/mc_interface.c **** {
 2495              		.loc 1 1349 1 is_stmt 1 view -0
 2496              		.cfi_startproc
 2497              		@ args = 0, pretend = 0, frame = 0
 2498              		@ frame_needed = 0, uses_anonymous_args = 0
 2499              		.loc 1 1349 1 is_stmt 0 view .LVU606
 2500 0000 08B5     		push	{r3, lr}
 2501              		.cfi_def_cfa_offset 8
 2502              		.cfi_offset 3, -8
ARM GAS  /tmp/ccX12T6L.s 			page 70


 2503              		.cfi_offset 14, -4
1350:Src/mc_interface.c **** 
1351:Src/mc_interface.c ****   return ((float)(pHandle->pFOCVars->hTeref * CURRENT_CONV_FACTOR_INV));
 2504              		.loc 1 1351 3 is_stmt 1 view .LVU607
 2505              		.loc 1 1351 26 is_stmt 0 view .LVU608
 2506 0002 4368     		ldr	r3, [r0, #4]
 2507              		.loc 1 1351 45 view .LVU609
 2508 0004 B3F91E00 		ldrsh	r0, [r3, #30]
 2509              	.LVL217:
 2510              		.loc 1 1351 45 view .LVU610
 2511 0008 FFF7FEFF 		bl	__aeabi_i2d
 2512              	.LVL218:
 2513 000c 04A3     		adr	r3, .L160
 2514 000e D3E90023 		ldrd	r2, [r3]
 2515 0012 FFF7FEFF 		bl	__aeabi_dmul
 2516              	.LVL219:
 2517              		.loc 1 1351 11 view .LVU611
 2518 0016 FFF7FEFF 		bl	__aeabi_d2f
 2519              	.LVL220:
1352:Src/mc_interface.c **** }
 2520              		.loc 1 1352 1 view .LVU612
 2521 001a 00EE100A 		vmov	s0, r0
 2522 001e 08BD     		pop	{r3, pc}
 2523              	.L161:
 2524              		.align	3
 2525              	.L160:
 2526 0020 A59F4B31 		.word	827039653
 2527 0024 68165E3F 		.word	1063130728
 2528              		.cfi_endproc
 2529              	.LFE1487:
 2531              		.section	.text.MCI_GetPhaseCurrentAmplitude,"ax",%progbits
 2532              		.align	1
 2533              		.weak	MCI_GetPhaseCurrentAmplitude
 2534              		.syntax unified
 2535              		.thumb
 2536              		.thumb_func
 2537              		.fpu fpv4-sp-d16
 2539              	MCI_GetPhaseCurrentAmplitude:
 2540              	.LVL221:
 2541              	.LFB1488:
1353:Src/mc_interface.c **** 
1354:Src/mc_interface.c **** /**
1355:Src/mc_interface.c ****   * @brief  It returns the motor phase current amplitude (0-to-peak) in s16A
1356:Src/mc_interface.c ****   *         To convert s16A into Ampere following formula must be used:
1357:Src/mc_interface.c ****   *         Current(Amp) = [Current(s16A) * Vdd micro] / [65536 * Rshunt * Aop]
1358:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1359:Src/mc_interface.c ****   * @retval int16_t Motor phase current (0-to-peak) in s16A
1360:Src/mc_interface.c ****   */
1361:Src/mc_interface.c **** __weak int16_t MCI_GetPhaseCurrentAmplitude(MCI_Handle_t *pHandle)
1362:Src/mc_interface.c **** {
 2542              		.loc 1 1362 1 is_stmt 1 view -0
 2543              		.cfi_startproc
 2544              		@ args = 0, pretend = 0, frame = 8
 2545              		@ frame_needed = 0, uses_anonymous_args = 0
 2546              		@ link register save eliminated.
 2547              		.loc 1 1362 1 is_stmt 0 view .LVU614
 2548 0000 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/ccX12T6L.s 			page 71


 2549              		.cfi_def_cfa_offset 8
1363:Src/mc_interface.c ****   alphabeta_t Local_Curr;
 2550              		.loc 1 1363 3 is_stmt 1 view .LVU615
1364:Src/mc_interface.c ****   int16_t wAux;
 2551              		.loc 1 1364 3 view .LVU616
1365:Src/mc_interface.c **** 
1366:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1367:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1368:Src/mc_interface.c ****   {
1369:Src/mc_interface.c ****     wAux = 0;
1370:Src/mc_interface.c ****   }
1371:Src/mc_interface.c ****   else
1372:Src/mc_interface.c ****   {
1373:Src/mc_interface.c **** #endif
1374:Src/mc_interface.c ****   Local_Curr = pHandle->pFOCVars->Ialphabeta;
 2552              		.loc 1 1374 3 view .LVU617
 2553              		.loc 1 1374 23 is_stmt 0 view .LVU618
 2554 0002 4368     		ldr	r3, [r0, #4]
 2555              		.loc 1 1374 14 view .LVU619
 2556 0004 5868     		ldr	r0, [r3, #4]	@ unaligned
 2557              	.LVL222:
 2558              		.loc 1 1374 14 view .LVU620
 2559 0006 0190     		str	r0, [sp, #4]
1375:Src/mc_interface.c ****   wAux = MCM_Modulus( Local_Curr.alpha, Local_Curr.beta );
 2560              		.loc 1 1375 3 is_stmt 1 view .LVU621
 2561              		.loc 1 1375 10 is_stmt 0 view .LVU622
 2562 0008 03B2     		sxth	r3, r0
 2563 000a 0014     		asrs	r0, r0, #16
 2564              	.LVL223:
 2565              	.LBB30:
 2566              	.LBI30:
 2567              		.file 2 "Inc/mc_math.h"
   1:Inc/mc_math.h **** 
   2:Inc/mc_math.h **** /**
   3:Inc/mc_math.h ****   ******************************************************************************
   4:Inc/mc_math.h ****   * @file    mc_math.h
   5:Inc/mc_math.h ****   * @author  Motor Control SDK Team, ST Microelectronics
   6:Inc/mc_math.h ****   * @brief   This file provides mathematics functions useful for and specific to
   7:Inc/mc_math.h ****   *          Motor Control.
   8:Inc/mc_math.h ****   *
   9:Inc/mc_math.h ****   ******************************************************************************
  10:Inc/mc_math.h ****   * @attention
  11:Inc/mc_math.h ****   *
  12:Inc/mc_math.h ****   * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  13:Inc/mc_math.h ****   * All rights reserved.</center></h2>
  14:Inc/mc_math.h ****   *
  15:Inc/mc_math.h ****   * This software component is licensed by ST under Ultimate Liberty license
  16:Inc/mc_math.h ****   * SLA0044, the "License"; You may not use this file except in compliance with
  17:Inc/mc_math.h ****   * the License. You may obtain a copy of the License at:
  18:Inc/mc_math.h ****   *                             www.st.com/SLA0044
  19:Inc/mc_math.h ****   *
  20:Inc/mc_math.h ****   ******************************************************************************
  21:Inc/mc_math.h ****   * @ingroup MC_Math
  22:Inc/mc_math.h ****   */
  23:Inc/mc_math.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  24:Inc/mc_math.h **** #ifndef MC_MATH_H
  25:Inc/mc_math.h **** #define MC_MATH_H
ARM GAS  /tmp/ccX12T6L.s 			page 72


  26:Inc/mc_math.h **** 
  27:Inc/mc_math.h **** /* Includes ------------------------------------------------------------------*/
  28:Inc/mc_math.h **** #include "mc_type.h"
  29:Inc/mc_math.h **** 
  30:Inc/mc_math.h **** /** @addtogroup MCSDK
  31:Inc/mc_math.h ****   * @{
  32:Inc/mc_math.h ****   */
  33:Inc/mc_math.h **** 
  34:Inc/mc_math.h **** /** @addtogroup MC_Math
  35:Inc/mc_math.h ****   * @{
  36:Inc/mc_math.h ****   */
  37:Inc/mc_math.h **** #define SQRT_2  1.4142
  38:Inc/mc_math.h **** #define SQRT_3  1.732
  39:Inc/mc_math.h **** 
  40:Inc/mc_math.h **** /* CORDIC coprocessor configuration register settings */
  41:Inc/mc_math.h **** 
  42:Inc/mc_math.h **** /* CORDIC FUNCTION: PHASE q1.31 (Electrical Angle computation) */
  43:Inc/mc_math.h **** #define CORDIC_CONFIG_PHASE     (LL_CORDIC_FUNCTION_PHASE | LL_CORDIC_PRECISION_6CYCLES | LL_CORDIC
  44:Inc/mc_math.h ****          LL_CORDIC_NBWRITE_2 | LL_CORDIC_NBREAD_1 |\
  45:Inc/mc_math.h ****          LL_CORDIC_INSIZE_32BITS | LL_CORDIC_OUTSIZE_32BITS)
  46:Inc/mc_math.h **** 
  47:Inc/mc_math.h **** /* CORDIC FUNCTION: SQUAREROOT q1.31 */
  48:Inc/mc_math.h **** #define CORDIC_CONFIG_SQRT      (LL_CORDIC_FUNCTION_SQUAREROOT | LL_CORDIC_PRECISION_6CYCLES | LL_C
  49:Inc/mc_math.h ****          LL_CORDIC_NBWRITE_1 | LL_CORDIC_NBREAD_1 |\
  50:Inc/mc_math.h ****          LL_CORDIC_INSIZE_32BITS | LL_CORDIC_OUTSIZE_32BITS)
  51:Inc/mc_math.h **** 
  52:Inc/mc_math.h **** /* CORDIC FUNCTION: COSINE q1.15 */
  53:Inc/mc_math.h **** #define CORDIC_CONFIG_COSINE    (LL_CORDIC_FUNCTION_COSINE | LL_CORDIC_PRECISION_6CYCLES | LL_CORDI
  54:Inc/mc_math.h ****          LL_CORDIC_NBWRITE_1 | LL_CORDIC_NBREAD_1 |\
  55:Inc/mc_math.h ****          LL_CORDIC_INSIZE_16BITS | LL_CORDIC_OUTSIZE_16BITS)
  56:Inc/mc_math.h **** 
  57:Inc/mc_math.h **** /* CORDIC FUNCTION: MODULUS q1.15 */
  58:Inc/mc_math.h **** #define CORDIC_CONFIG_MODULUS   (LL_CORDIC_FUNCTION_MODULUS | LL_CORDIC_PRECISION_6CYCLES | LL_CORD
  59:Inc/mc_math.h **** 				 LL_CORDIC_NBWRITE_1 | LL_CORDIC_NBREAD_1 |\
  60:Inc/mc_math.h **** 				 LL_CORDIC_INSIZE_16BITS | LL_CORDIC_OUTSIZE_16BITS)
  61:Inc/mc_math.h **** 
  62:Inc/mc_math.h **** /**
  63:Inc/mc_math.h ****   * @brief  Macro to compute logarithm of two
  64:Inc/mc_math.h ****   */
  65:Inc/mc_math.h **** #define LOG2(x) \
  66:Inc/mc_math.h ****   (((x) == 65535 ) ? 16 : \
  67:Inc/mc_math.h ****    (((x) == (2*2*2*2*2*2*2*2*2*2*2*2*2*2*2)) ? 15 : \
  68:Inc/mc_math.h ****     (((x) == (2*2*2*2*2*2*2*2*2*2*2*2*2*2)) ? 14 : \
  69:Inc/mc_math.h ****      (((x) == (2*2*2*2*2*2*2*2*2*2*2*2*2)) ? 13 : \
  70:Inc/mc_math.h ****       (((x) == (2*2*2*2*2*2*2*2*2*2*2*2)) ? 12 : \
  71:Inc/mc_math.h ****        (((x) == (2*2*2*2*2*2*2*2*2*2*2)) ? 11 : \
  72:Inc/mc_math.h ****         (((x) == (2*2*2*2*2*2*2*2*2*2)) ? 10 : \
  73:Inc/mc_math.h ****          (((x) == (2*2*2*2*2*2*2*2*2)) ? 9 : \
  74:Inc/mc_math.h ****           (((x) == (2*2*2*2*2*2*2*2)) ? 8 : \
  75:Inc/mc_math.h ****            (((x) == (2*2*2*2*2*2*2)) ? 7 : \
  76:Inc/mc_math.h ****             (((x) == (2*2*2*2*2*2)) ? 6 : \
  77:Inc/mc_math.h ****              (((x) == (2*2*2*2*2)) ? 5 : \
  78:Inc/mc_math.h ****               (((x) == (2*2*2*2)) ? 4 : \
  79:Inc/mc_math.h ****                (((x) == (2*2*2)) ? 3 : \
  80:Inc/mc_math.h ****                 (((x) == (2*2)) ? 2 : \
  81:Inc/mc_math.h ****                  (((x) == 2) ? 1 : \
  82:Inc/mc_math.h ****                   (((x) == 1) ? 0 : -1)))))))))))))))))
ARM GAS  /tmp/ccX12T6L.s 			page 73


  83:Inc/mc_math.h **** 
  84:Inc/mc_math.h **** /**
  85:Inc/mc_math.h ****   * @brief  Trigonometrical functions type definition
  86:Inc/mc_math.h ****   */
  87:Inc/mc_math.h **** typedef struct
  88:Inc/mc_math.h **** {
  89:Inc/mc_math.h ****   int16_t hCos;
  90:Inc/mc_math.h ****   int16_t hSin;
  91:Inc/mc_math.h **** } Trig_Components;
  92:Inc/mc_math.h **** 
  93:Inc/mc_math.h **** /**
  94:Inc/mc_math.h ****   * @brief  This function transforms stator currents Ia and qIb (which are
  95:Inc/mc_math.h ****   *         directed along axes each displaced by 120 degrees) into currents
  96:Inc/mc_math.h ****   *         Ialpha and Ibeta in a stationary qd reference frame.
  97:Inc/mc_math.h ****   *                               Ialpha = Ia
  98:Inc/mc_math.h ****   *                       Ibeta = -(2*Ib+Ia)/sqrt(3)
  99:Inc/mc_math.h ****   * @param  Curr_Input: stator current Ia and Ib in ab_t format
 100:Inc/mc_math.h ****   * @retval Stator current Ialpha and Ibeta in alphabeta_t format
 101:Inc/mc_math.h ****   */
 102:Inc/mc_math.h **** alphabeta_t MCM_Clarke(ab_t Input);
 103:Inc/mc_math.h **** 
 104:Inc/mc_math.h **** /**
 105:Inc/mc_math.h ****   * @brief  This function transforms stator values alpha and beta, which
 106:Inc/mc_math.h ****   *         belong to a stationary qd reference frame, to a rotor flux
 107:Inc/mc_math.h ****   *         synchronous reference frame (properly oriented), so as Iq and Id.
 108:Inc/mc_math.h ****   *                   Id= Ialpha *sin(theta)+qIbeta *cos(Theta)
 109:Inc/mc_math.h ****   *                   Iq=qIalpha *cos(Theta)-qIbeta *sin(Theta)
 110:Inc/mc_math.h ****   * @param  Curr_Input: stator values alpha and beta in alphabeta_t format
 111:Inc/mc_math.h ****   * @param  Theta: rotating frame angular position in q1.15 format
 112:Inc/mc_math.h ****   * @retval Stator current q and d in qd_t format
 113:Inc/mc_math.h ****   */
 114:Inc/mc_math.h **** qd_t MCM_Park(alphabeta_t Input, int16_t Theta);
 115:Inc/mc_math.h **** 
 116:Inc/mc_math.h **** /**
 117:Inc/mc_math.h ****   * @brief  This function transforms stator voltage qVq and qVd, that belong to
 118:Inc/mc_math.h ****   *         a rotor flux synchronous rotating frame, to a stationary reference
 119:Inc/mc_math.h ****   *         frame, so as to obtain qValpha and qVbeta:
 120:Inc/mc_math.h ****   *                  Valfa= Vq*Cos(theta)+ Vd*Sin(theta)
 121:Inc/mc_math.h ****   *                  Vbeta=-Vq*Sin(theta)+ Vd*Cos(theta)
 122:Inc/mc_math.h ****   * @param  Curr_Input: stator voltage Vq and Vd in qd_t format
 123:Inc/mc_math.h ****   * @param  Theta: rotating frame angular position in q1.15 format
 124:Inc/mc_math.h ****   * @retval Stator values alpha and beta in alphabeta_t format
 125:Inc/mc_math.h ****   */
 126:Inc/mc_math.h **** alphabeta_t MCM_Rev_Park(qd_t Input, int16_t Theta);
 127:Inc/mc_math.h **** 
 128:Inc/mc_math.h **** /**
 129:Inc/mc_math.h ****   * @brief  This function returns cosine and sine functions of the angle fed in
 130:Inc/mc_math.h ****   *         input
 131:Inc/mc_math.h ****   * @param  hAngle: angle in q1.15 format
 132:Inc/mc_math.h ****   * @retval Trig_Components Cos(angle) and Sin(angle) in Trig_Components format
 133:Inc/mc_math.h ****   */
 134:Inc/mc_math.h **** Trig_Components MCM_Trig_Functions(int16_t hAngle);
 135:Inc/mc_math.h **** 
 136:Inc/mc_math.h **** /**
 137:Inc/mc_math.h ****   * @brief  It calculates the square root of a non-negative s32. It returns 0
 138:Inc/mc_math.h ****   *         for negative s32.
 139:Inc/mc_math.h ****   * @param  Input int32_t number
ARM GAS  /tmp/ccX12T6L.s 			page 74


 140:Inc/mc_math.h ****   * @retval int32_t Square root of Input (0 if Input<0)
 141:Inc/mc_math.h ****   */
 142:Inc/mc_math.h **** int32_t MCM_Sqrt(int32_t wInput);
 143:Inc/mc_math.h **** 
 144:Inc/mc_math.h **** /**
 145:Inc/mc_math.h ****   * @brief  Sqrt table used by Circle Limitation function
 146:Inc/mc_math.h ****   *         used for STM32F0/STM32G0 series only
 147:Inc/mc_math.h ****   */
 148:Inc/mc_math.h **** #define SQRT_CIRCLE_LIMITATION {\
 149:Inc/mc_math.h ****      0 , 1023 , 1448 , 1773 , 2047 , 2289 , 2508 , 2709,\
 150:Inc/mc_math.h ****      2896 , 3071 , 3238 , 3396 , 3547 , 3691 , 3831 , 3965,\
 151:Inc/mc_math.h ****      4095 , 4221 , 4344 , 4463 , 4579 , 4692 , 4802 , 4910,\
 152:Inc/mc_math.h ****      5016 , 5119 , 5221 , 5320 , 5418 , 5514 , 5608 , 5701,\
 153:Inc/mc_math.h ****      5792 , 5882 , 5970 , 6057 , 6143 , 6228 , 6312 , 6394,\
 154:Inc/mc_math.h ****      6476 , 6556 , 6636 , 6714 , 6792 , 6868 , 6944 , 7019,\
 155:Inc/mc_math.h ****      7094 , 7167 , 7240 , 7312 , 7383 , 7454 , 7524 , 7593,\
 156:Inc/mc_math.h ****      7662 , 7730 , 7798 , 7865 , 7931 , 7997 , 8062 , 8127,\
 157:Inc/mc_math.h ****      8191 , 8255 , 8318 , 8381 , 8443 , 8505 , 8567 , 8628,\
 158:Inc/mc_math.h ****      8688 , 8748 , 8808 , 8867 , 8926 , 8985 , 9043 , 9101,\
 159:Inc/mc_math.h ****      9158 , 9215 , 9272 , 9328 , 9384 , 9440 , 9495 , 9550,\
 160:Inc/mc_math.h ****      9605 , 9660 , 9714 , 9768 , 9821 , 9874 , 9927 , 9980,\
 161:Inc/mc_math.h ****      10032 , 10084 , 10136 , 10188 , 10239 , 10290 , 10341 , 10392,\
 162:Inc/mc_math.h ****      10442 , 10492 , 10542 , 10592 , 10641 , 10690 , 10739 , 10788,\
 163:Inc/mc_math.h ****      10836 , 10884 , 10932 , 10980 , 11028 , 11075 , 11123 , 11170,\
 164:Inc/mc_math.h ****      11217 , 11263 , 11310 , 11356 , 11402 , 11448 , 11494 , 11539,\
 165:Inc/mc_math.h ****      11584 , 11630 , 11675 , 11719 , 11764 , 11808 , 11853 , 11897,\
 166:Inc/mc_math.h ****      11941 , 11985 , 12028 , 12072 , 12115 , 12158 , 12201 , 12244,\
 167:Inc/mc_math.h ****      12287 , 12330 , 12372 , 12414 , 12457 , 12499 , 12541 , 12582,\
 168:Inc/mc_math.h ****      12624 , 12665 , 12707 , 12748 , 12789 , 12830 , 12871 , 12911,\
 169:Inc/mc_math.h ****      12952 , 12992 , 13032 , 13073 , 13113 , 13153 , 13192 , 13232,\
 170:Inc/mc_math.h ****      13272 , 13311 , 13350 , 13390 , 13429 , 13468 , 13507 , 13545,\
 171:Inc/mc_math.h ****      13584 , 13623 , 13661 , 13699 , 13737 , 13776 , 13814 , 13851,\
 172:Inc/mc_math.h ****      13889 , 13927 , 13965 , 14002 , 14039 , 14077 , 14114 , 14151,\
 173:Inc/mc_math.h ****      14188 , 14225 , 14262 , 14298 , 14335 , 14372 , 14408 , 14444,\
 174:Inc/mc_math.h ****      14481 , 14517 , 14553 , 14589 , 14625 , 14661 , 14696 , 14732,\
 175:Inc/mc_math.h ****      14767 , 14803 , 14838 , 14874 , 14909 , 14944 , 14979 , 15014,\
 176:Inc/mc_math.h ****      15049 , 15084 , 15118 , 15153 , 15187 , 15222 , 15256 , 15291,\
 177:Inc/mc_math.h ****      15325 , 15359 , 15393 , 15427 , 15461 , 15495 , 15529 , 15562,\
 178:Inc/mc_math.h ****      15596 , 15630 , 15663 , 15697 , 15730 , 15763 , 15797 , 15830,\
 179:Inc/mc_math.h ****      15863 , 15896 , 15929 , 15962 , 15994 , 16027 , 16060 , 16092,\
 180:Inc/mc_math.h ****      16125 , 16157 , 16190 , 16222 , 16254 , 16287 , 16319 , 16351,\
 181:Inc/mc_math.h ****      16383 , 16415 , 16447 , 16479 , 16510 , 16542 , 16574 , 16605,\
 182:Inc/mc_math.h ****      16637 , 16669 , 16700 , 16731 , 16763 , 16794 , 16825 , 16856,\
 183:Inc/mc_math.h ****      16887 , 16918 , 16949 , 16980 , 17011 , 17042 , 17072 , 17103,\
 184:Inc/mc_math.h ****      17134 , 17164 , 17195 , 17225 , 17256 , 17286 , 17316 , 17347,\
 185:Inc/mc_math.h ****      17377 , 17407 , 17437 , 17467 , 17497 , 17527 , 17557 , 17587,\
 186:Inc/mc_math.h ****      17617 , 17646 , 17676 , 17706 , 17735 , 17765 , 17794 , 17824,\
 187:Inc/mc_math.h ****      17853 , 17882 , 17912 , 17941 , 17970 , 17999 , 18028 , 18057,\
 188:Inc/mc_math.h ****      18086 , 18115 , 18144 , 18173 , 18202 , 18231 , 18259 , 18288,\
 189:Inc/mc_math.h ****      18317 , 18345 , 18374 , 18402 , 18431 , 18459 , 18488 , 18516,\
 190:Inc/mc_math.h ****      18544 , 18573 , 18601 , 18629 , 18657 , 18685 , 18713 , 18741,\
 191:Inc/mc_math.h ****      18769 , 18797 , 18825 , 18853 , 18881 , 18908 , 18936 , 18964,\
 192:Inc/mc_math.h ****      18991 , 19019 , 19046 , 19074 , 19101 , 19129 , 19156 , 19184,\
 193:Inc/mc_math.h ****      19211 , 19238 , 19265 , 19293 , 19320 , 19347 , 19374 , 19401,\
 194:Inc/mc_math.h ****      19428 , 19455 , 19482 , 19509 , 19536 , 19562 , 19589 , 19616,\
 195:Inc/mc_math.h ****      19643 , 19669 , 19696 , 19723 , 19749 , 19776 , 19802 , 19829,\
 196:Inc/mc_math.h ****      19855 , 19881 , 19908 , 19934 , 19960 , 19987 , 20013 , 20039,\
ARM GAS  /tmp/ccX12T6L.s 			page 75


 197:Inc/mc_math.h ****      20065 , 20091 , 20117 , 20143 , 20169 , 20195 , 20221 , 20247,\
 198:Inc/mc_math.h ****      20273 , 20299 , 20325 , 20350 , 20376 , 20402 , 20428 , 20453,\
 199:Inc/mc_math.h ****      20479 , 20504 , 20530 , 20556 , 20581 , 20606 , 20632 , 20657,\
 200:Inc/mc_math.h ****      20683 , 20708 , 20733 , 20759 , 20784 , 20809 , 20834 , 20859,\
 201:Inc/mc_math.h ****      20884 , 20910 , 20935 , 20960 , 20985 , 21010 , 21035 , 21059,\
 202:Inc/mc_math.h ****      21084 , 21109 , 21134 , 21159 , 21184 , 21208 , 21233 , 21258,\
 203:Inc/mc_math.h ****      21282 , 21307 , 21331 , 21356 , 21381 , 21405 , 21430 , 21454,\
 204:Inc/mc_math.h ****      21478 , 21503 , 21527 , 21552 , 21576 , 21600 , 21624 , 21649,\
 205:Inc/mc_math.h ****      21673 , 21697 , 21721 , 21745 , 21769 , 21793 , 21817 , 21841,\
 206:Inc/mc_math.h ****      21865 , 21889 , 21913 , 21937 , 21961 , 21985 , 22009 , 22033,\
 207:Inc/mc_math.h ****      22056 , 22080 , 22104 , 22128 , 22151 , 22175 , 22199 , 22222,\
 208:Inc/mc_math.h ****      22246 , 22269 , 22293 , 22316 , 22340 , 22363 , 22387 , 22410,\
 209:Inc/mc_math.h ****      22434 , 22457 , 22480 , 22504 , 22527 , 22550 , 22573 , 22597,\
 210:Inc/mc_math.h ****      22620 , 22643 , 22666 , 22689 , 22712 , 22735 , 22758 , 22781,\
 211:Inc/mc_math.h ****      22804 , 22827 , 22850 , 22873 , 22896 , 22919 , 22942 , 22965,\
 212:Inc/mc_math.h ****      22988 , 23010 , 23033 , 23056 , 23079 , 23101 , 23124 , 23147,\
 213:Inc/mc_math.h ****      23169 , 23192 , 23214 , 23237 , 23260 , 23282 , 23305 , 23327,\
 214:Inc/mc_math.h ****      23350 , 23372 , 23394 , 23417 , 23439 , 23462 , 23484 , 23506,\
 215:Inc/mc_math.h ****      23529 , 23551 , 23573 , 23595 , 23617 , 23640 , 23662 , 23684,\
 216:Inc/mc_math.h ****      23706 , 23728 , 23750 , 23772 , 23794 , 23816 , 23838 , 23860,\
 217:Inc/mc_math.h ****      23882 , 23904 , 23926 , 23948 , 23970 , 23992 , 24014 , 24036,\
 218:Inc/mc_math.h ****      24057 , 24079 , 24101 , 24123 , 24144 , 24166 , 24188 , 24209,\
 219:Inc/mc_math.h ****      24231 , 24253 , 24274 , 24296 , 24317 , 24339 , 24360 , 24382,\
 220:Inc/mc_math.h ****      24403 , 24425 , 24446 , 24468 , 24489 , 24511 , 24532 , 24553,\
 221:Inc/mc_math.h ****      24575 , 24596 , 24617 , 24639 , 24660 , 24681 , 24702 , 24724,\
 222:Inc/mc_math.h ****      24745 , 24766 , 24787 , 24808 , 24829 , 24851 , 24872 , 24893,\
 223:Inc/mc_math.h ****      24914 , 24935 , 24956 , 24977 , 24998 , 25019 , 25040 , 25061,\
 224:Inc/mc_math.h ****      25082 , 25102 , 25123 , 25144 , 25165 , 25186 , 25207 , 25227,\
 225:Inc/mc_math.h ****      25248 , 25269 , 25290 , 25310 , 25331 , 25352 , 25372 , 25393,\
 226:Inc/mc_math.h ****      25414 , 25434 , 25455 , 25476 , 25496 , 25517 , 25537 , 25558,\
 227:Inc/mc_math.h ****      25578 , 25599 , 25619 , 25640 , 25660 , 25681 , 25701 , 25721,\
 228:Inc/mc_math.h ****      25742 , 25762 , 25782 , 25803 , 25823 , 25843 , 25864 , 25884,\
 229:Inc/mc_math.h ****      25904 , 25924 , 25945 , 25965 , 25985 , 26005 , 26025 , 26045,\
 230:Inc/mc_math.h ****      26065 , 26086 , 26106 , 26126 , 26146 , 26166 , 26186 , 26206,\
 231:Inc/mc_math.h ****      26226 , 26246 , 26266 , 26286 , 26306 , 26326 , 26346 , 26365,\
 232:Inc/mc_math.h ****      26385 , 26405 , 26425 , 26445 , 26465 , 26484 , 26504 , 26524,\
 233:Inc/mc_math.h ****      26544 , 26564 , 26583 , 26603 , 26623 , 26642 , 26662 , 26682,\
 234:Inc/mc_math.h ****      26701 , 26721 , 26741 , 26760 , 26780 , 26799 , 26819 , 26838,\
 235:Inc/mc_math.h ****      26858 , 26877 , 26897 , 26916 , 26936 , 26955 , 26975 , 26994,\
 236:Inc/mc_math.h ****      27014 , 27033 , 27052 , 27072 , 27091 , 27111 , 27130 , 27149,\
 237:Inc/mc_math.h ****      27168 , 27188 , 27207 , 27226 , 27246 , 27265 , 27284 , 27303,\
 238:Inc/mc_math.h ****      27322 , 27342 , 27361 , 27380 , 27399 , 27418 , 27437 , 27456,\
 239:Inc/mc_math.h ****      27475 , 27495 , 27514 , 27533 , 27552 , 27571 , 27590 , 27609,\
 240:Inc/mc_math.h ****      27628 , 27647 , 27666 , 27685 , 27703 , 27722 , 27741 , 27760,\
 241:Inc/mc_math.h ****      27779 , 27798 , 27817 , 27836 , 27854 , 27873 , 27892 , 27911,\
 242:Inc/mc_math.h ****      27930 , 27948 , 27967 , 27986 , 28005 , 28023 , 28042 , 28061,\
 243:Inc/mc_math.h ****      28079 , 28098 , 28117 , 28135 , 28154 , 28173 , 28191 , 28210,\
 244:Inc/mc_math.h ****      28228 , 28247 , 28265 , 28284 , 28303 , 28321 , 28340 , 28358,\
 245:Inc/mc_math.h ****      28377 , 28395 , 28413 , 28432 , 28450 , 28469 , 28487 , 28506,\
 246:Inc/mc_math.h ****      28524 , 28542 , 28561 , 28579 , 28597 , 28616 , 28634 , 28652,\
 247:Inc/mc_math.h ****      28671 , 28689 , 28707 , 28725 , 28744 , 28762 , 28780 , 28798,\
 248:Inc/mc_math.h ****      28817 , 28835 , 28853 , 28871 , 28889 , 28907 , 28925 , 28944,\
 249:Inc/mc_math.h ****      28962 , 28980 , 28998 , 29016 , 29034 , 29052 , 29070 , 29088,\
 250:Inc/mc_math.h ****      29106 , 29124 , 29142 , 29160 , 29178 , 29196 , 29214 , 29232,\
 251:Inc/mc_math.h ****      29250 , 29268 , 29286 , 29304 , 29322 , 29339 , 29357 , 29375,\
 252:Inc/mc_math.h ****      29393 , 29411 , 29429 , 29446 , 29464 , 29482 , 29500 , 29518,\
 253:Inc/mc_math.h ****      29535 , 29553 , 29571 , 29588 , 29606 , 29624 , 29642 , 29659,\
ARM GAS  /tmp/ccX12T6L.s 			page 76


 254:Inc/mc_math.h ****      29677 , 29695 , 29712 , 29730 , 29748 , 29765 , 29783 , 29800,\
 255:Inc/mc_math.h ****      29818 , 29835 , 29853 , 29871 , 29888 , 29906 , 29923 , 29941,\
 256:Inc/mc_math.h ****      29958 , 29976 , 29993 , 30011 , 30028 , 30046 , 30063 , 30080,\
 257:Inc/mc_math.h ****      30098 , 30115 , 30133 , 30150 , 30168 , 30185 , 30202 , 30220,\
 258:Inc/mc_math.h ****      30237 , 30254 , 30272 , 30289 , 30306 , 30324 , 30341 , 30358,\
 259:Inc/mc_math.h ****      30375 , 30393 , 30410 , 30427 , 30444 , 30461 , 30479 , 30496,\
 260:Inc/mc_math.h ****      30513 , 30530 , 30547 , 30565 , 30582 , 30599 , 30616 , 30633,\
 261:Inc/mc_math.h ****      30650 , 30667 , 30684 , 30701 , 30719 , 30736 , 30753 , 30770,\
 262:Inc/mc_math.h ****      30787 , 30804 , 30821 , 30838 , 30855 , 30872 , 30889 , 30906,\
 263:Inc/mc_math.h ****      30923 , 30940 , 30957 , 30973 , 30990 , 31007 , 31024 , 31041,\
 264:Inc/mc_math.h ****      31058 , 31075 , 31092 , 31109 , 31125 , 31142 , 31159 , 31176,\
 265:Inc/mc_math.h ****      31193 , 31210 , 31226 , 31243 , 31260 , 31277 , 31293 , 31310,\
 266:Inc/mc_math.h ****      31327 , 31344 , 31360 , 31377 , 31394 , 31410 , 31427 , 31444,\
 267:Inc/mc_math.h ****      31461 , 31477 , 31494 , 31510 , 31527 , 31544 , 31560 , 31577,\
 268:Inc/mc_math.h ****      31594 , 31610 , 31627 , 31643 , 31660 , 31676 , 31693 , 31709,\
 269:Inc/mc_math.h ****      31726 , 31743 , 31759 , 31776 , 31792 , 31809 , 31825 , 31841,\
 270:Inc/mc_math.h ****      31858 , 31874 , 31891 , 31907 , 31924 , 31940 , 31957 , 31973,\
 271:Inc/mc_math.h ****      31989 , 32006 , 32022 , 32038 , 32055 , 32071 , 32087 , 32104,\
 272:Inc/mc_math.h ****      32120 , 32136 , 32153 , 32169 , 32185 , 32202 , 32218 , 32234,\
 273:Inc/mc_math.h ****      32250 , 32267 , 32283 , 32299 , 32315 , 32332 , 32348 , 32364,\
 274:Inc/mc_math.h ****      32380 , 32396 , 32413 , 32429 , 32445 , 32461 , 32477 , 32493,\
 275:Inc/mc_math.h ****      32509 , 32526 , 32542 , 32558 , 32574 , 32590 , 32606 , 32622,\
 276:Inc/mc_math.h ****      32638 , 32654 , 32670 , 32686 , 32702 , 32718 , 32734 , 32750,\
 277:Inc/mc_math.h ****      32767 }
 278:Inc/mc_math.h **** 
 279:Inc/mc_math.h **** #define ATAN1DIV1     (int16_t)8192
 280:Inc/mc_math.h **** #define ATAN1DIV2     (int16_t)4836
 281:Inc/mc_math.h **** #define ATAN1DIV4     (int16_t)2555
 282:Inc/mc_math.h **** #define ATAN1DIV8     (int16_t)1297
 283:Inc/mc_math.h **** #define ATAN1DIV16    (int16_t)651
 284:Inc/mc_math.h **** #define ATAN1DIV32    (int16_t)326
 285:Inc/mc_math.h **** #define ATAN1DIV64    (int16_t)163
 286:Inc/mc_math.h **** #define ATAN1DIV128   (int16_t)81
 287:Inc/mc_math.h **** #define ATAN1DIV256   (int16_t)41
 288:Inc/mc_math.h **** #define ATAN1DIV512   (int16_t)20
 289:Inc/mc_math.h **** #define ATAN1DIV1024  (int16_t)10
 290:Inc/mc_math.h **** #define ATAN1DIV2048  (int16_t)5
 291:Inc/mc_math.h **** #define ATAN1DIV4096  (int16_t)3
 292:Inc/mc_math.h **** #define ATAN1DIV8192  (int16_t)1
 293:Inc/mc_math.h **** 
 294:Inc/mc_math.h **** /**
 295:Inc/mc_math.h ****   * @brief  It executes Modulus algorithm
 296:Inc/mc_math.h ****   * @param  alpha component
 297:Inc/mc_math.h ****   *         beta component
 298:Inc/mc_math.h ****   * @retval int16_t Modulus
 299:Inc/mc_math.h ****   */
 300:Inc/mc_math.h **** static inline int16_t MCM_Modulus( int16_t alpha, int16_t beta )
 2568              		.loc 2 300 23 is_stmt 1 view .LVU623
 2569              	.LBB31:
 301:Inc/mc_math.h **** {
 302:Inc/mc_math.h ****   int16_t Val;
 2570              		.loc 2 302 3 view .LVU624
 303:Inc/mc_math.h ****    __disable_irq();
 2571              		.loc 2 303 4 view .LVU625
 2572              	.LBB32:
 2573              	.LBI32:
 2574              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
ARM GAS  /tmp/ccX12T6L.s 			page 77


   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccX12T6L.s 			page 78


  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
ARM GAS  /tmp/ccX12T6L.s 			page 79


 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccX12T6L.s 			page 80


 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 2575              		.loc 3 207 27 view .LVU626
 2576              	.LBB33:
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 2577              		.loc 3 209 3 view .LVU627
 2578              		.syntax unified
 2579              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2580 000c 72B6     		cpsid i
 2581              	@ 0 "" 2
 2582              		.thumb
 2583              		.syntax unified
 2584              	.LBE33:
 2585              	.LBE32:
 304:Inc/mc_math.h ****    /* Configure and call to CORDIC- */
 305:Inc/mc_math.h ****    WRITE_REG(CORDIC->CSR,CORDIC_CONFIG_MODULUS);
 2586              		.loc 2 305 4 view .LVU628
 2587 000e 084A     		ldr	r2, .L165
 2588 0010 0849     		ldr	r1, .L165+4
 2589 0012 1160     		str	r1, [r2]
 306:Inc/mc_math.h ****    LL_CORDIC_WriteData(CORDIC, (int32_t) (beta)<<16 | alpha);
 2590              		.loc 2 306 4 view .LVU629
ARM GAS  /tmp/ccX12T6L.s 			page 81


 2591              		.loc 2 306 53 is_stmt 0 view .LVU630
 2592 0014 43EA0043 		orr	r3, r3, r0, lsl #16
 2593              	.LVL224:
 2594              	.LBB34:
 2595              	.LBI34:
 2596              		.file 4 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h"
   1:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
   2:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   ******************************************************************************
   3:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @file    stm32g4xx_ll_cordic.h
   4:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @author  MCD Application Team
   5:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief   Header file of CORDIC LL module.
   6:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   ******************************************************************************
   7:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @attention
   8:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *
   9:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * Copyright (c) 2019 STMicroelectronics.
  10:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * All rights reserved.
  11:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *
  12:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * in the root directory of this software component.
  14:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *
  16:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   ******************************************************************************
  17:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  18:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  19:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #ifndef STM32G4xx_LL_CORDIC_H
  21:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define STM32G4xx_LL_CORDIC_H
  22:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  23:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #ifdef __cplusplus
  24:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** extern "C" {
  25:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #endif
  26:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  27:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #include "stm32g4xx.h"
  29:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  30:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @addtogroup STM32G4xx_LL_Driver
  31:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  32:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  33:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  34:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #if defined(CORDIC)
  35:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  36:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL CORDIC
  37:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  38:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  39:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  40:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Private variables ---------------------------------------------------------*/
  41:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  42:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Private constants ---------------------------------------------------------*/
  43:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  44:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Private macros ------------------------------------------------------------*/
  45:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  46:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Exported types ------------------------------------------------------------*/
  47:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  48:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Exported constants --------------------------------------------------------*/
  49:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_Exported_Constants CORDIC Exported Constants
  50:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  51:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
ARM GAS  /tmp/ccX12T6L.s 			page 82


  52:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  53:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_GET_FLAG Get Flags Defines
  54:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief    Flags defines which can be used with LL_CORDIC_ReadReg function.
  55:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  56:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  57:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FLAG_RRDY                CORDIC_CSR_RRDY
  58:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
  59:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
  60:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  61:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  62:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_IT IT Defines
  63:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief    IT defines which can be used with LL_CORDIC_ReadReg and LL_CORDIC_WriteReg functions.
  64:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  65:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  66:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_IT_IEN                   CORDIC_CSR_IEN            /*!< Result Ready interrupt en
  67:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
  68:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
  69:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  70:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  71:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_FUNCTION FUNCTION
  72:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  73:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  74:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_COSINE          (0x00000000U)                                           
  75:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_SINE            ((uint32_t)(CORDIC_CSR_FUNC_0))                         
  76:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_PHASE           ((uint32_t)(CORDIC_CSR_FUNC_1))                         
  77:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_MODULUS         ((uint32_t)(CORDIC_CSR_FUNC_1 | CORDIC_CSR_FUNC_0))     
  78:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_ARCTANGENT      ((uint32_t)(CORDIC_CSR_FUNC_2))                         
  79:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_HCOSINE         ((uint32_t)(CORDIC_CSR_FUNC_2 | CORDIC_CSR_FUNC_0))     
  80:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_HSINE           ((uint32_t)(CORDIC_CSR_FUNC_2 | CORDIC_CSR_FUNC_1))     
  81:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_HARCTANGENT     ((uint32_t)(CORDIC_CSR_FUNC_2 | CORDIC_CSR_FUNC_1 | CORD
  82:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_NATURALLOG      ((uint32_t)(CORDIC_CSR_FUNC_3))                         
  83:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_SQUAREROOT      ((uint32_t)(CORDIC_CSR_FUNC_3 | CORDIC_CSR_FUNC_0))     
  84:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
  85:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
  86:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  87:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  88:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_PRECISION PRECISION
  89:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  90:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  91:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_1CYCLE         ((uint32_t)(CORDIC_CSR_PRECISION_0))
  92:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_2CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_1))
  93:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_3CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_1 | CORDIC_CSR_PRECISIO
  94:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_4CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_2))
  95:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_5CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECISIO
  96:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_6CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECISIO
  97:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_7CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_2\
  98:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_1 | CORDIC_CSR_PRECIS
  99:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_8CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_3))
 100:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_9CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_3 | CORDIC_CSR_PRECISIO
 101:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_10CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3 | CORDIC_CSR_PRECISIO
 102:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_11CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3\
 103:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_1 | CORDIC_CSR_PRECIS
 104:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_12CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3 | CORDIC_CSR_PRECISIO
 105:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_13CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3\
 106:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECIS
 107:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_14CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3\
 108:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECIS
ARM GAS  /tmp/ccX12T6L.s 			page 83


 109:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_15CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3\
 110:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECIS
 111:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_0))
 112:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 113:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 114:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 115:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 116:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_SCALE SCALE
 117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 118:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_0                  (0x00000000U)
 120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_1                  ((uint32_t)(CORDIC_CSR_SCALE_0))
 121:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_2                  ((uint32_t)(CORDIC_CSR_SCALE_1))
 122:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_3                  ((uint32_t)(CORDIC_CSR_SCALE_1 | CORDIC_CSR_SCALE_0))
 123:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_4                  ((uint32_t)(CORDIC_CSR_SCALE_2))
 124:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_5                  ((uint32_t)(CORDIC_CSR_SCALE_2 | CORDIC_CSR_SCALE_0))
 125:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_6                  ((uint32_t)(CORDIC_CSR_SCALE_2 | CORDIC_CSR_SCALE_1))
 126:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_7                  ((uint32_t)(CORDIC_CSR_SCALE_2 | CORDIC_CSR_SCALE_1 | CO
 127:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 128:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 129:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 130:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 131:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_NBWRITE NBWRITE
 132:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 133:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 134:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_NBWRITE_1                (0x00000000U)             /*!< One 32-bits write contain
 135:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           32-bit data input (Q1.31 
 136:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           16-bit data input (Q1.15 
 137:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           in one 32 bits Data */
 138:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_NBWRITE_2                CORDIC_CSR_NARGS          /*!< Two 32-bit write containi
 139:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           (Q1.31 format) */
 140:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 141:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 142:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 143:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 144:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_NBREAD NBREAD
 145:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 146:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 147:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_NBREAD_1                 (0x00000000U)             /*!< One 32-bits read containi
 148:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           32-bit data output (Q1.31
 149:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           16-bit data output (Q1.15
 150:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           in one 32 bits Data */
 151:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_NBREAD_2                 CORDIC_CSR_NRES           /*!< Two 32-bit Data containin
 152:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           (Q1.31 format) */
 153:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 154:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 155:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 156:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 157:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_INSIZE INSIZE
 158:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 159:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 160:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_INSIZE_32BITS            (0x00000000U)             /*!< 32 bits input data size (
 161:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_INSIZE_16BITS            CORDIC_CSR_ARGSIZE        /*!< 16 bits input data size (
 162:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 163:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 164:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 165:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
ARM GAS  /tmp/ccX12T6L.s 			page 84


 166:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_OUTSIZE OUTSIZE
 167:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 168:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 169:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_OUTSIZE_32BITS           (0x00000000U)             /*!< 32 bits output data size 
 170:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_OUTSIZE_16BITS           CORDIC_CSR_RESSIZE        /*!< 16 bits output data size 
 171:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 172:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 173:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 174:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 175:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_DMA_REG_DATA DMA register data
 176:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 177:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 178:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_DMA_REG_DATA_IN          (0x00000000U)             /*!< Get address of input data
 179:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_DMA_REG_DATA_OUT         (0x00000001U)             /*!< Get address of output dat
 180:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 181:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 182:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 183:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 184:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 185:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 186:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 187:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 188:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Exported macro ------------------------------------------------------------*/
 189:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_Exported_Macros CORDIC Exported Macros
 190:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 191:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 192:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 193:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EM_WRITE_READ Common Write and read registers Macros
 194:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 195:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 196:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 197:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 198:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Write a value in CORDIC register.
 199:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __INSTANCE__ CORDIC Instance
 200:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __REG__ Register to be written
 201:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __VALUE__ Value to be written in the register
 202:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 203:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 204:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VA
 205:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 206:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 207:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Read a value in CORDIC register.
 208:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __INSTANCE__ CORDIC Instance
 209:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __REG__ Register to be read
 210:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Register value
 211:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 212:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 213:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 214:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 215:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 216:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 217:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 218:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 219:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 220:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 221:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 222:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Exported functions --------------------------------------------------------*/
ARM GAS  /tmp/ccX12T6L.s 			page 85


 223:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 224:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_Exported_Functions CORDIC Exported Functions
 225:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 226:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 227:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 228:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_Configuration CORDIC Configuration functions
 229:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 230:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 231:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 232:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 233:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure the CORDIC processing.
 234:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @note   This function set all parameters of CORDIC processing.
 235:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         These parameters can also be set individually using
 236:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         dedicated functions:
 237:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetFunction()
 238:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetPrecision()
 239:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetScale()
 240:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetNbWrite()
 241:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetNbRead()
 242:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetInSize()
 243:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetOutSize()
 244:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          FUNC          LL_CORDIC_Configure\n
 245:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          PRECISION     LL_CORDIC_Configure\n
 246:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          SCALE         LL_CORDIC_Configure\n
 247:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          NARGS         LL_CORDIC_Configure\n
 248:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          NRES          LL_CORDIC_Configure\n
 249:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          ARGSIZE       LL_CORDIC_Configure\n
 250:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          RESIZE        LL_CORDIC_Configure
 251:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC instance
 252:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Function parameter can be one of the following values:
 253:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_COSINE
 254:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SINE
 255:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_PHASE
 256:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_MODULUS
 257:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_ARCTANGENT
 258:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HCOSINE
 259:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HSINE
 260:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HARCTANGENT
 261:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_NATURALLOG
 262:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SQUAREROOT
 263:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Precision parameter can be one of the following values:
 264:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_1CYCLE
 265:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_2CYCLES
 266:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_3CYCLES
 267:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_4CYCLES
 268:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_5CYCLES
 269:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_6CYCLES
 270:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_7CYCLES
 271:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_8CYCLES
 272:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_9CYCLES
 273:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_10CYCLES
 274:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_11CYCLES
 275:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_12CYCLES
 276:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_13CYCLES
 277:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_14CYCLES
 278:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_15CYCLES
 279:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Scale parameter can be one of the following values:
ARM GAS  /tmp/ccX12T6L.s 			page 86


 280:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_0
 281:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_1
 282:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_2
 283:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_3
 284:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_4
 285:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_5
 286:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_6
 287:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_7
 288:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  NbWrite parameter can be one of the following values:
 289:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_1
 290:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_2
 291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  NbRead parameter can be one of the following values:
 292:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_1
 293:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_2
 294:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  InSize parameter can be one of the following values:
 295:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_32BITS
 296:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_16BITS
 297:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  OutSize parameter can be one of the following values:
 298:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_32BITS
 299:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
 300:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 301:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_Config(CORDIC_TypeDef *CORDICx, uint32_t Function, uint32_t Precisio
 303:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                       uint32_t NbWrite, uint32_t NbRead, uint32_t InSize, uint32_t 
 304:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 305:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR,
 306:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****              CORDIC_CSR_FUNC | CORDIC_CSR_PRECISION | CORDIC_CSR_SCALE |
 307:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****              CORDIC_CSR_NARGS | CORDIC_CSR_NRES | CORDIC_CSR_ARGSIZE | CORDIC_CSR_RESSIZE,
 308:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****              Function | Precision | Scale |
 309:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****              NbWrite | NbRead | InSize | OutSize);
 310:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 311:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 312:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure function.
 314:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          FUNC          LL_CORDIC_SetFunction
 315:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 316:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Function parameter can be one of the following values:
 317:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_COSINE
 318:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SINE
 319:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_PHASE
 320:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_MODULUS
 321:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_ARCTANGENT
 322:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HCOSINE
 323:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HSINE
 324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HARCTANGENT
 325:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_NATURALLOG
 326:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SQUAREROOT
 327:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 328:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 329:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetFunction(CORDIC_TypeDef *CORDICx, uint32_t Function)
 330:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 331:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_FUNC, Function);
 332:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 333:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 334:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 335:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return function.
 336:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          FUNC          LL_CORDIC_GetFunction
ARM GAS  /tmp/ccX12T6L.s 			page 87


 337:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 338:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 339:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_COSINE
 340:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SINE
 341:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_PHASE
 342:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_MODULUS
 343:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_ARCTANGENT
 344:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HCOSINE
 345:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HSINE
 346:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HARCTANGENT
 347:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_NATURALLOG
 348:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SQUAREROOT
 349:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 350:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetFunction(CORDIC_TypeDef *CORDICx)
 351:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 352:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_FUNC));
 353:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 354:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 355:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 356:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure precision in cycles number.
 357:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          PRECISION     LL_CORDIC_SetPrecision
 358:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 359:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Precision parameter can be one of the following values:
 360:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_1CYCLE
 361:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_2CYCLES
 362:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_3CYCLES
 363:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_4CYCLES
 364:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_5CYCLES
 365:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_6CYCLES
 366:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_7CYCLES
 367:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_8CYCLES
 368:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_9CYCLES
 369:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_10CYCLES
 370:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_11CYCLES
 371:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_12CYCLES
 372:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_13CYCLES
 373:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_14CYCLES
 374:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_15CYCLES
 375:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 376:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 377:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetPrecision(CORDIC_TypeDef *CORDICx, uint32_t Precision)
 378:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 379:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_PRECISION, Precision);
 380:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 381:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 382:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 383:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return precision in cycles number.
 384:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          PRECISION     LL_CORDIC_GetPrecision
 385:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 386:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 387:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_1CYCLE
 388:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_2CYCLES
 389:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_3CYCLES
 390:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_4CYCLES
 391:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_5CYCLES
 392:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_6CYCLES
 393:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_7CYCLES
ARM GAS  /tmp/ccX12T6L.s 			page 88


 394:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_8CYCLES
 395:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_9CYCLES
 396:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_10CYCLES
 397:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_11CYCLES
 398:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_12CYCLES
 399:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_13CYCLES
 400:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_14CYCLES
 401:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_15CYCLES
 402:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 403:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetPrecision(CORDIC_TypeDef *CORDICx)
 404:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 405:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_PRECISION));
 406:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 407:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 408:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 409:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure scaling factor.
 410:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          SCALE         LL_CORDIC_SetScale
 411:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 412:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Scale parameter can be one of the following values:
 413:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_0
 414:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_1
 415:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_2
 416:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_3
 417:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_4
 418:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_5
 419:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_6
 420:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_7
 421:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 422:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 423:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetScale(CORDIC_TypeDef *CORDICx, uint32_t Scale)
 424:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 425:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_SCALE, Scale);
 426:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 427:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 428:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 429:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return scaling factor.
 430:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          SCALE         LL_CORDIC_GetScale
 431:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 432:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 433:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_0
 434:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_1
 435:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_2
 436:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_3
 437:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_4
 438:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_5
 439:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_6
 440:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_7
 441:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 442:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetScale(CORDIC_TypeDef *CORDICx)
 443:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 444:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_SCALE));
 445:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 446:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 447:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 448:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure number of 32-bit write expected for one calculation.
 449:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          NARGS         LL_CORDIC_SetNbWrite
 450:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
ARM GAS  /tmp/ccX12T6L.s 			page 89


 451:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  NbWrite parameter can be one of the following values:
 452:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_1
 453:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_2
 454:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 455:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 456:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetNbWrite(CORDIC_TypeDef *CORDICx, uint32_t NbWrite)
 457:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 458:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_NARGS, NbWrite);
 459:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 460:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 461:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 462:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return number of 32-bit write expected for one calculation.
 463:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          NARGS         LL_CORDIC_GetNbWrite
 464:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 466:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_1
 467:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_2
 468:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 469:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetNbWrite(CORDIC_TypeDef *CORDICx)
 470:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 471:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_NARGS));
 472:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 473:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 474:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 475:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure number of 32-bit read expected after one calculation.
 476:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          NRES          LL_CORDIC_SetNbRead
 477:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 478:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  NbRead parameter can be one of the following values:
 479:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_1
 480:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_2
 481:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 482:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 483:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetNbRead(CORDIC_TypeDef *CORDICx, uint32_t NbRead)
 484:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 485:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_NRES, NbRead);
 486:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 487:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 488:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 489:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return number of 32-bit read expected after one calculation.
 490:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          NRES          LL_CORDIC_GetNbRead
 491:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 492:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 493:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_1
 494:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_2
 495:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 496:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetNbRead(CORDIC_TypeDef *CORDICx)
 497:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 498:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_NRES));
 499:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 500:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 501:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 502:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure width of input data.
 503:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          ARGSIZE       LL_CORDIC_SetInSize
 504:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 505:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  InSize parameter can be one of the following values:
 506:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_32BITS
 507:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_16BITS
ARM GAS  /tmp/ccX12T6L.s 			page 90


 508:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 509:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 510:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetInSize(CORDIC_TypeDef *CORDICx, uint32_t InSize)
 511:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 512:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_ARGSIZE, InSize);
 513:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 514:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 515:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 516:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return width of input data.
 517:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          ARGSIZE       LL_CORDIC_GetInSize
 518:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 519:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_32BITS
 521:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_16BITS
 522:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 523:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetInSize(CORDIC_TypeDef *CORDICx)
 524:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 525:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_ARGSIZE));
 526:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 527:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 528:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 529:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure width of output data.
 530:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          RESIZE       LL_CORDIC_SetOutSize
 531:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 532:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  OutSize parameter can be one of the following values:
 533:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_32BITS
 534:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
 535:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 536:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 537:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetOutSize(CORDIC_TypeDef *CORDICx, uint32_t OutSize)
 538:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 539:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_RESSIZE, OutSize);
 540:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 541:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 543:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return width of output data.
 544:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          RESIZE       LL_CORDIC_GetOutSize
 545:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 546:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 547:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_32BITS
 548:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
 549:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 550:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetOutSize(CORDIC_TypeDef *CORDICx)
 551:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 552:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_RESSIZE));
 553:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 554:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 555:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 556:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 557:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 558:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 559:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_IT_Management IT_Management
 560:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 561:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 562:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 563:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 564:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Enable CORDIC result ready interrupt
ARM GAS  /tmp/ccX12T6L.s 			page 91


 565:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          IEN           LL_CORDIC_EnableIT
 566:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 567:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 568:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 569:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_EnableIT(CORDIC_TypeDef *CORDICx)
 570:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 571:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   SET_BIT(CORDICx->CSR, CORDIC_CSR_IEN);
 572:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 573:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 574:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 575:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Disable CORDIC result ready interrupt
 576:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          IEN           LL_CORDIC_DisableIT
 577:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 578:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 579:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 580:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_DisableIT(CORDIC_TypeDef *CORDICx)
 581:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 582:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   CLEAR_BIT(CORDICx->CSR, CORDIC_CSR_IEN);
 583:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 584:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 585:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 586:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Check CORDIC result ready interrupt state.
 587:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          IEN           LL_CORDIC_IsEnabledIT
 588:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 589:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval State of bit (1 or 0).
 590:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 591:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_IsEnabledIT(CORDIC_TypeDef *CORDICx)
 592:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 593:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_IEN) == (CORDIC_CSR_IEN)) ? 1U : 0U);
 594:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 595:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 596:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 597:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 598:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 599:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 600:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_DMA_Management DMA_Management
 601:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 602:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 603:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 604:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 605:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Enable CORDIC DMA read channel request.
 606:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAREN        LL_CORDIC_EnableDMAReq_RD
 607:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 608:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 609:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 610:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_EnableDMAReq_RD(CORDIC_TypeDef *CORDICx)
 611:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 612:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   SET_BIT(CORDICx->CSR, CORDIC_CSR_DMAREN);
 613:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 614:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 615:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 616:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Disable CORDIC DMA read channel request.
 617:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAREN        LL_CORDIC_DisableDMAReq_RD
 618:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 619:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 620:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 621:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_DisableDMAReq_RD(CORDIC_TypeDef *CORDICx)
ARM GAS  /tmp/ccX12T6L.s 			page 92


 622:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 623:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   CLEAR_BIT(CORDICx->CSR, CORDIC_CSR_DMAREN);
 624:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 625:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 626:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 627:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Check CORDIC DMA read channel request state.
 628:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAREN        LL_CORDIC_IsEnabledDMAReq_RD
 629:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 630:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval State of bit (1 or 0).
 631:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 632:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_IsEnabledDMAReq_RD(CORDIC_TypeDef *CORDICx)
 633:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 634:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_DMAREN) == (CORDIC_CSR_DMAREN)) ? 1U : 0U);
 635:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 636:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 637:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 638:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Enable CORDIC DMA write channel request.
 639:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAWEN        LL_CORDIC_EnableDMAReq_WR
 640:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 641:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 642:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 643:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_EnableDMAReq_WR(CORDIC_TypeDef *CORDICx)
 644:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 645:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   SET_BIT(CORDICx->CSR, CORDIC_CSR_DMAWEN);
 646:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 647:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 648:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 649:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Disable CORDIC DMA write channel request.
 650:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAWEN        LL_CORDIC_DisableDMAReq_WR
 651:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 652:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 653:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 654:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_DisableDMAReq_WR(CORDIC_TypeDef *CORDICx)
 655:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 656:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   CLEAR_BIT(CORDICx->CSR, CORDIC_CSR_DMAWEN);
 657:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 658:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 659:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 660:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Check CORDIC DMA write channel request state.
 661:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAWEN        LL_CORDIC_IsEnabledDMAReq_WR
 662:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 663:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval State of bit (1 or 0).
 664:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 665:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_IsEnabledDMAReq_WR(CORDIC_TypeDef *CORDICx)
 666:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 667:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_DMAWEN) == (CORDIC_CSR_DMAWEN)) ? 1U : 0U);
 668:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 669:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 670:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 671:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Get the CORDIC data register address used for DMA transfer.
 672:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll RDATA        RES           LL_CORDIC_DMA_GetRegAddr\n
 673:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll WDATA        ARG           LL_CORDIC_DMA_GetRegAddr
 674:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 675:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Direction parameter can be one of the following values:
 676:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_DMA_REG_DATA_IN
 677:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_DMA_REG_DATA_OUT
 678:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Address of data register
ARM GAS  /tmp/ccX12T6L.s 			page 93


 679:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 680:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_DMA_GetRegAddr(CORDIC_TypeDef *CORDICx, uint32_t Direction)
 681:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 682:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   uint32_t data_reg_addr;
 683:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 684:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   if (Direction == LL_CORDIC_DMA_REG_DATA_OUT)
 685:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   {
 686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****     /* return address of RDATA register */
 687:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****     data_reg_addr = (uint32_t) &(CORDICx->RDATA);
 688:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   }
 689:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   else
 690:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   {
 691:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****     /* return address of WDATA register */
 692:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****     data_reg_addr = (uint32_t) &(CORDICx->WDATA);
 693:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   }
 694:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 695:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return data_reg_addr;
 696:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 697:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 698:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 699:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 700:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 701:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 702:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_FLAG_Management FLAG_Management
 703:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 704:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 705:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 706:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 707:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Check CORDIC result ready flag state.
 708:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          RRDY          LL_CORDIC_IsActiveFlag_RRDY
 709:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 710:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval State of bit (1 or 0).
 711:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_IsActiveFlag_RRDY(CORDIC_TypeDef *CORDICx)
 713:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_RRDY) == (CORDIC_CSR_RRDY)) ? 1U : 0U);
 715:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 716:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 717:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 718:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 720:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_Data_Management Data_Management
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 725:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Write 32-bit input data for the CORDIC processing.
 727:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll WDATA        ARG           LL_CORDIC_WriteData
 728:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 729:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processin
 730:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 731:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 732:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
 2597              		.loc 4 732 22 is_stmt 1 view .LVU631
 2598              	.LBB35:
 733:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
ARM GAS  /tmp/ccX12T6L.s 			page 94


 734:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   WRITE_REG(CORDICx->WDATA, InData);
 2599              		.loc 4 734 3 view .LVU632
 2600 0018 5360     		str	r3, [r2, #4]
 2601              	.LVL225:
 2602              	.L163:
 2603              		.loc 4 734 3 is_stmt 0 view .LVU633
 2604              	.LBE35:
 2605              	.LBE34:
 307:Inc/mc_math.h ****    /* Wait for result */
 308:Inc/mc_math.h ****    while(!LL_CORDIC_IsActiveFlag_RRDY( CORDIC ))
 309:Inc/mc_math.h ****    {
 310:Inc/mc_math.h ****    }
 2606              		.loc 2 310 4 is_stmt 1 view .LVU634
 308:Inc/mc_math.h ****    {
 2607              		.loc 2 308 9 view .LVU635
 2608              	.LBB36:
 2609              	.LBI36:
 712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 2610              		.loc 4 712 26 view .LVU636
 2611              	.LBB37:
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 2612              		.loc 4 714 3 view .LVU637
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 2613              		.loc 4 714 12 is_stmt 0 view .LVU638
 2614 001a 054B     		ldr	r3, .L165
 2615 001c 1B68     		ldr	r3, [r3]
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 2616              		.loc 4 714 79 view .LVU639
 2617 001e 002B     		cmp	r3, #0
 2618 0020 FBDA     		bge	.L163
 2619              	.LVL226:
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 2620              		.loc 4 714 79 view .LVU640
 2621              	.LBE37:
 2622              	.LBE36:
 311:Inc/mc_math.h ****   /* Read computed modulus */
 312:Inc/mc_math.h ****   Val = (int16_t)(LL_CORDIC_ReadData(CORDIC)&0xFFFF);
 2623              		.loc 2 312 3 is_stmt 1 view .LVU641
 2624              	.LBB38:
 2625              	.LBI38:
 735:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 736:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 738:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return 32-bit output data of CORDIC processing.
 739:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll RDATA        RES           LL_CORDIC_ReadData
 740:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 741:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval 32-bit output data of CORDIC processing.
 742:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 743:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
 2626              		.loc 4 743 26 view .LVU642
 2627              	.LBB39:
 744:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 745:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_REG(CORDICx->RDATA));
 2628              		.loc 4 745 3 view .LVU643
 2629              		.loc 4 745 10 is_stmt 0 view .LVU644
 2630 0022 034B     		ldr	r3, .L165
 2631 0024 9868     		ldr	r0, [r3, #8]
ARM GAS  /tmp/ccX12T6L.s 			page 95


 2632              	.LVL227:
 2633              		.loc 4 745 10 view .LVU645
 2634              	.LBE39:
 2635              	.LBE38:
 2636              		.loc 2 312 7 view .LVU646
 2637 0026 00B2     		sxth	r0, r0
 2638              	.LVL228:
 313:Inc/mc_math.h ****   __enable_irq();
 2639              		.loc 2 313 3 is_stmt 1 view .LVU647
 2640              	.LBB40:
 2641              	.LBI40:
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2642              		.loc 3 196 27 view .LVU648
 2643              	.LBB41:
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2644              		.loc 3 198 3 view .LVU649
 2645              		.syntax unified
 2646              	@ 198 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2647 0028 62B6     		cpsie i
 2648              	@ 0 "" 2
 2649              		.thumb
 2650              		.syntax unified
 2651              	.LBE41:
 2652              	.LBE40:
 314:Inc/mc_math.h ****   return Val;
 2653              		.loc 2 314 3 view .LVU650
 2654              	.LVL229:
 2655              		.loc 2 314 3 is_stmt 0 view .LVU651
 2656              	.LBE31:
 2657              	.LBE30:
1376:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1377:Src/mc_interface.c ****   }
1378:Src/mc_interface.c **** #endif
1379:Src/mc_interface.c **** 
1380:Src/mc_interface.c ****   return (wAux);
 2658              		.loc 1 1380 3 is_stmt 1 view .LVU652
1381:Src/mc_interface.c **** }
 2659              		.loc 1 1381 1 is_stmt 0 view .LVU653
 2660 002a 02B0     		add	sp, sp, #8
 2661              		.cfi_def_cfa_offset 0
 2662              		@ sp needed
 2663 002c 7047     		bx	lr
 2664              	.L166:
 2665 002e 00BF     		.align	2
 2666              	.L165:
 2667 0030 000C0240 		.word	1073875968
 2668 0034 63006000 		.word	6291555
 2669              		.cfi_endproc
 2670              	.LFE1488:
 2672              		.section	.text.MCI_GetPhaseVoltageAmplitude,"ax",%progbits
 2673              		.align	1
 2674              		.weak	MCI_GetPhaseVoltageAmplitude
 2675              		.syntax unified
 2676              		.thumb
 2677              		.thumb_func
 2678              		.fpu fpv4-sp-d16
 2680              	MCI_GetPhaseVoltageAmplitude:
ARM GAS  /tmp/ccX12T6L.s 			page 96


 2681              	.LVL230:
 2682              	.LFB1489:
1382:Src/mc_interface.c **** 
1383:Src/mc_interface.c **** /**
1384:Src/mc_interface.c ****   * @brief  It returns the applied motor phase voltage amplitude (0-to-peak) in
1385:Src/mc_interface.c ****   *         s16V. To convert s16V into Volts following formula must be used:
1386:Src/mc_interface.c ****   *         PhaseVoltage(V) = [PhaseVoltage(s16A) * Vbus(V)] /[sqrt(3) *32767]
1387:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1388:Src/mc_interface.c ****   * @retval int16_t Motor phase voltage (0-to-peak) in s16V
1389:Src/mc_interface.c ****   */
1390:Src/mc_interface.c **** __weak int16_t MCI_GetPhaseVoltageAmplitude(MCI_Handle_t *pHandle)
1391:Src/mc_interface.c **** {
 2683              		.loc 1 1391 1 is_stmt 1 view -0
 2684              		.cfi_startproc
 2685              		@ args = 0, pretend = 0, frame = 8
 2686              		@ frame_needed = 0, uses_anonymous_args = 0
 2687              		.loc 1 1391 1 is_stmt 0 view .LVU655
 2688 0000 00B5     		push	{lr}
 2689              		.cfi_def_cfa_offset 4
 2690              		.cfi_offset 14, -4
 2691 0002 83B0     		sub	sp, sp, #12
 2692              		.cfi_def_cfa_offset 16
1392:Src/mc_interface.c ****   int16_t temp_wAux;
 2693              		.loc 1 1392 3 is_stmt 1 view .LVU656
1393:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1394:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1395:Src/mc_interface.c ****   {
1396:Src/mc_interface.c ****     temp_wAux = 0;
1397:Src/mc_interface.c ****   }
1398:Src/mc_interface.c ****   else
1399:Src/mc_interface.c ****   {
1400:Src/mc_interface.c **** #endif
1401:Src/mc_interface.c ****     alphabeta_t Local_Voltage;
 2694              		.loc 1 1401 5 view .LVU657
1402:Src/mc_interface.c ****     int32_t wAux1;
 2695              		.loc 1 1402 5 view .LVU658
1403:Src/mc_interface.c ****     int32_t wAux2;
 2696              		.loc 1 1403 5 view .LVU659
1404:Src/mc_interface.c **** 
1405:Src/mc_interface.c ****     Local_Voltage = pHandle->pFOCVars->Valphabeta;
 2697              		.loc 1 1405 5 view .LVU660
 2698              		.loc 1 1405 28 is_stmt 0 view .LVU661
 2699 0004 4368     		ldr	r3, [r0, #4]
 2700              		.loc 1 1405 19 view .LVU662
 2701 0006 D3F81A00 		ldr	r0, [r3, #26]	@ unaligned
 2702              	.LVL231:
 2703              		.loc 1 1405 19 view .LVU663
 2704 000a 0246     		mov	r2, r0	@ movhi
1406:Src/mc_interface.c ****     wAux1 = (int32_t)(Local_Voltage.alpha) * Local_Voltage.alpha;
 2705              		.loc 1 1406 5 is_stmt 1 view .LVU664
 2706              	.LVL232:
1407:Src/mc_interface.c ****     wAux2 = (int32_t)(Local_Voltage.beta) * Local_Voltage.beta;
 2707              		.loc 1 1407 5 view .LVU665
 2708              		.loc 1 1407 11 is_stmt 0 view .LVU666
 2709 000c 10FB30F0 		smultt	r0, r0, r0
 2710              	.LVL233:
1408:Src/mc_interface.c **** 
ARM GAS  /tmp/ccX12T6L.s 			page 97


1409:Src/mc_interface.c ****     wAux1 += wAux2;
 2711              		.loc 1 1409 5 is_stmt 1 view .LVU667
1410:Src/mc_interface.c ****     wAux1 = MCM_Sqrt(wAux1);
 2712              		.loc 1 1410 5 view .LVU668
 2713              		.loc 1 1410 13 is_stmt 0 view .LVU669
 2714 0010 12FB0200 		smlabb	r0, r2, r2, r0
 2715              	.LVL234:
 2716              		.loc 1 1410 13 view .LVU670
 2717 0014 FFF7FEFF 		bl	MCM_Sqrt
 2718              	.LVL235:
1411:Src/mc_interface.c **** 
1412:Src/mc_interface.c ****     if (wAux1 > INT16_MAX)
 2719              		.loc 1 1412 5 is_stmt 1 view .LVU671
 2720              		.loc 1 1412 8 is_stmt 0 view .LVU672
 2721 0018 B0F5004F 		cmp	r0, #32768
 2722 001c 01DB     		blt	.L168
1413:Src/mc_interface.c ****     {
1414:Src/mc_interface.c ****       wAux1 = (int32_t)INT16_MAX;
 2723              		.loc 1 1414 13 view .LVU673
 2724 001e 47F6FF70 		movw	r0, #32767
 2725              	.LVL236:
 2726              	.L168:
1415:Src/mc_interface.c ****     }
1416:Src/mc_interface.c ****     temp_wAux = (int16_t)wAux1;
 2727              		.loc 1 1416 5 is_stmt 1 view .LVU674
1417:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1418:Src/mc_interface.c ****   }
1419:Src/mc_interface.c **** #endif
1420:Src/mc_interface.c ****   return (temp_wAux);
 2728              		.loc 1 1420 3 view .LVU675
1421:Src/mc_interface.c **** }
 2729              		.loc 1 1421 1 is_stmt 0 view .LVU676
 2730 0022 00B2     		sxth	r0, r0
 2731              	.LVL237:
 2732              		.loc 1 1421 1 view .LVU677
 2733 0024 03B0     		add	sp, sp, #12
 2734              		.cfi_def_cfa_offset 4
 2735              		@ sp needed
 2736 0026 5DF804FB 		ldr	pc, [sp], #4
 2737              		.cfi_endproc
 2738              	.LFE1489:
 2740              		.section	.text.MCI_Clear_Iqdref,"ax",%progbits
 2741              		.align	1
 2742              		.weak	MCI_Clear_Iqdref
 2743              		.syntax unified
 2744              		.thumb
 2745              		.thumb_func
 2746              		.fpu fpv4-sp-d16
 2748              	MCI_Clear_Iqdref:
 2749              	.LVL238:
 2750              	.LFB1490:
1422:Src/mc_interface.c **** 
1423:Src/mc_interface.c **** /**
1424:Src/mc_interface.c ****   * @brief  It re-initializes Iqdref variables with their default values.
1425:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1426:Src/mc_interface.c ****   * @retval none
1427:Src/mc_interface.c ****   */
ARM GAS  /tmp/ccX12T6L.s 			page 98


1428:Src/mc_interface.c **** __weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
1429:Src/mc_interface.c **** {
 2751              		.loc 1 1429 1 is_stmt 1 view -0
 2752              		.cfi_startproc
 2753              		@ args = 0, pretend = 0, frame = 0
 2754              		@ frame_needed = 0, uses_anonymous_args = 0
 2755              		.loc 1 1429 1 is_stmt 0 view .LVU679
 2756 0000 10B5     		push	{r4, lr}
 2757              		.cfi_def_cfa_offset 8
 2758              		.cfi_offset 4, -8
 2759              		.cfi_offset 14, -4
1430:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1431:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1432:Src/mc_interface.c ****   {
1433:Src/mc_interface.c ****     /* Nothing to do */
1434:Src/mc_interface.c ****   }
1435:Src/mc_interface.c ****   else
1436:Src/mc_interface.c ****   {
1437:Src/mc_interface.c **** #endif
1438:Src/mc_interface.c ****     pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 2760              		.loc 1 1438 5 is_stmt 1 view .LVU680
 2761              		.loc 1 1438 12 is_stmt 0 view .LVU681
 2762 0002 4468     		ldr	r4, [r0, #4]
 2763              		.loc 1 1438 33 view .LVU682
 2764 0004 0068     		ldr	r0, [r0]
 2765              	.LVL239:
 2766              		.loc 1 1438 33 view .LVU683
 2767 0006 FFF7FEFF 		bl	STC_GetDefaultIqdref
 2768              	.LVL240:
 2769 000a 2082     		strh	r0, [r4, #16]	@ movhi
 2770 000c C0F30F40 		ubfx	r0, r0, #16, #16
 2771 0010 6082     		strh	r0, [r4, #18]	@ movhi
1439:Src/mc_interface.c **** #ifdef NULL_PTR_MC_INT
1440:Src/mc_interface.c ****   }
1441:Src/mc_interface.c **** #endif
1442:Src/mc_interface.c **** }
 2772              		.loc 1 1442 1 view .LVU684
 2773 0012 10BD     		pop	{r4, pc}
 2774              		.cfi_endproc
 2775              	.LFE1490:
 2777              		.text
 2778              	.Letext0:
 2779              		.file 5 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 2780              		.file 6 "Drivers/CMSIS/Include/core_cm4.h"
 2781              		.file 7 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/system_stm32g4xx.h"
 2782              		.file 8 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 2783              		.file 9 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 2784              		.file 10 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_flash.h"
 2785              		.file 11 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal.h"
 2786              		.file 12 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 2787              		.file 13 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 2788              		.file 14 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 2789              		.file 15 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/mc_type.h"
 2790              		.file 16 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/pid_regulator.h"
 2791              		.file 17 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h"
 2792              		.file 18 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h"
 2793              		.file 19 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/pwm_curr_fdbk.h"
ARM GAS  /tmp/ccX12T6L.s 			page 99


 2794              		.file 20 "Inc/mc_interface.h"
 2795              		.file 21 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/virtual_speed_sensor.h"
 2796              		.file 22 "Inc/regular_conversion_manager.h"
 2797              		.file 23 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/ntc_temperature_sensor.h"
 2798              		.file 24 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_speed_pos_fdbk.h"
 2799              		.file 25 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/revup_ctrl.h"
 2800              		.file 26 "Inc/mc_configuration_registers.h"
 2801              		.file 27 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h"
 2802              		.file 28 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/r_divider_bus_voltage_sensor.h"
 2803              		.file 29 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/pqd_motor_power_measurement.h"
 2804              		.file 30 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/G4xx/Inc/r3_2_g4xx_pwm_curr_fdbk.h"
 2805              		.file 31 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/ramp_ext_mngr.h"
 2806              		.file 32 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/circle_limitation.h"
 2807              		.file 33 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h"
 2808              		.file 34 "MCSDK_v6.0.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_cordic_speed_pos_fdbk.h"
 2809              		.file 35 "Inc/mc_config.h"
ARM GAS  /tmp/ccX12T6L.s 			page 100


DEFINED SYMBOLS
                            *ABS*:0000000000000000 mc_interface.c
     /tmp/ccX12T6L.s:18     .text.MCI_Init:0000000000000000 $t
     /tmp/ccX12T6L.s:26     .text.MCI_Init:0000000000000000 MCI_Init
     /tmp/ccX12T6L.s:80     .text.MCI_ExecSpeedRamp:0000000000000000 $t
     /tmp/ccX12T6L.s:87     .text.MCI_ExecSpeedRamp:0000000000000000 MCI_ExecSpeedRamp
     /tmp/ccX12T6L.s:118    .text.MCI_ExecSpeedRamp_F:0000000000000000 $t
     /tmp/ccX12T6L.s:125    .text.MCI_ExecSpeedRamp_F:0000000000000000 MCI_ExecSpeedRamp_F
     /tmp/ccX12T6L.s:161    .text.MCI_ExecSpeedRamp_F:0000000000000024 $d
     /tmp/ccX12T6L.s:166    .text.MCI_ExecTorqueRamp:0000000000000000 $t
     /tmp/ccX12T6L.s:173    .text.MCI_ExecTorqueRamp:0000000000000000 MCI_ExecTorqueRamp
     /tmp/ccX12T6L.s:208    .text.MCI_ExecTorqueRamp_F:0000000000000000 $t
     /tmp/ccX12T6L.s:215    .text.MCI_ExecTorqueRamp_F:0000000000000000 MCI_ExecTorqueRamp_F
     /tmp/ccX12T6L.s:261    .text.MCI_ExecTorqueRamp_F:0000000000000028 $d
     /tmp/ccX12T6L.s:267    .text.MCI_SetCurrentReferences:0000000000000000 $t
     /tmp/ccX12T6L.s:274    .text.MCI_SetCurrentReferences:0000000000000000 MCI_SetCurrentReferences
     /tmp/ccX12T6L.s:314    .text.MCI_SetCurrentReferences_F:0000000000000000 $t
     /tmp/ccX12T6L.s:321    .text.MCI_SetCurrentReferences_F:0000000000000000 MCI_SetCurrentReferences_F
     /tmp/ccX12T6L.s:385    .text.MCI_SetCurrentReferences_F:0000000000000048 $d
     /tmp/ccX12T6L.s:391    .text.MCI_SetSpeedMode:0000000000000000 $t
     /tmp/ccX12T6L.s:398    .text.MCI_SetSpeedMode:0000000000000000 MCI_SetSpeedMode
     /tmp/ccX12T6L.s:435    .text.MCI_SetOpenLoopCurrent:0000000000000000 $t
     /tmp/ccX12T6L.s:442    .text.MCI_SetOpenLoopCurrent:0000000000000000 MCI_SetOpenLoopCurrent
     /tmp/ccX12T6L.s:479    .text.MCI_SetOpenLoopVoltage:0000000000000000 $t
     /tmp/ccX12T6L.s:486    .text.MCI_SetOpenLoopVoltage:0000000000000000 MCI_SetOpenLoopVoltage
     /tmp/ccX12T6L.s:524    .text.MCI_GetCalibratedOffsetsMotor:0000000000000000 $t
     /tmp/ccX12T6L.s:531    .text.MCI_GetCalibratedOffsetsMotor:0000000000000000 MCI_GetCalibratedOffsetsMotor
     /tmp/ccX12T6L.s:570    .text.MCI_FaultProcessing:0000000000000000 $t
     /tmp/ccX12T6L.s:577    .text.MCI_FaultProcessing:0000000000000000 MCI_FaultProcessing
     /tmp/ccX12T6L.s:607    .text.MCI_ExecBufferedCommands:0000000000000000 $t
     /tmp/ccX12T6L.s:614    .text.MCI_ExecBufferedCommands:0000000000000000 MCI_ExecBufferedCommands
     /tmp/ccX12T6L.s:746    .text.MCI_IsCommandAcknowledged:0000000000000000 $t
     /tmp/ccX12T6L.s:753    .text.MCI_IsCommandAcknowledged:0000000000000000 MCI_IsCommandAcknowledged
     /tmp/ccX12T6L.s:790    .text.MCI_GetSTMState:0000000000000000 $t
     /tmp/ccX12T6L.s:797    .text.MCI_GetSTMState:0000000000000000 MCI_GetSTMState
     /tmp/ccX12T6L.s:815    .text.MCI_GetOccurredFaults:0000000000000000 $t
     /tmp/ccX12T6L.s:822    .text.MCI_GetOccurredFaults:0000000000000000 MCI_GetOccurredFaults
     /tmp/ccX12T6L.s:840    .text.MCI_GetCurrentFaults:0000000000000000 $t
     /tmp/ccX12T6L.s:847    .text.MCI_GetCurrentFaults:0000000000000000 MCI_GetCurrentFaults
     /tmp/ccX12T6L.s:865    .text.MCI_StartMotor:0000000000000000 $t
     /tmp/ccX12T6L.s:872    .text.MCI_StartMotor:0000000000000000 MCI_StartMotor
     /tmp/ccX12T6L.s:937    .text.MCI_StartWithMeasurementOffset:0000000000000000 $t
     /tmp/ccX12T6L.s:944    .text.MCI_StartWithMeasurementOffset:0000000000000000 MCI_StartWithMeasurementOffset
     /tmp/ccX12T6L.s:1015   .text.MCI_StartOffsetMeasurments:0000000000000000 $t
     /tmp/ccX12T6L.s:1022   .text.MCI_StartOffsetMeasurments:0000000000000000 MCI_StartOffsetMeasurments
     /tmp/ccX12T6L.s:1091   .text.MCI_SetCalibratedOffsetsMotor:0000000000000000 $t
     /tmp/ccX12T6L.s:1098   .text.MCI_SetCalibratedOffsetsMotor:0000000000000000 MCI_SetCalibratedOffsetsMotor
     /tmp/ccX12T6L.s:1162   .text.MCI_StopMotor:0000000000000000 $t
     /tmp/ccX12T6L.s:1169   .text.MCI_StopMotor:0000000000000000 MCI_StopMotor
     /tmp/ccX12T6L.s:1255   .text.MCI_FaultAcknowledged:0000000000000000 $t
     /tmp/ccX12T6L.s:1262   .text.MCI_FaultAcknowledged:0000000000000000 MCI_FaultAcknowledged
     /tmp/ccX12T6L.s:1320   .text.MCI_GetFaultState:0000000000000000 $t
     /tmp/ccX12T6L.s:1327   .text.MCI_GetFaultState:0000000000000000 MCI_GetFaultState
     /tmp/ccX12T6L.s:1354   .text.MCI_GetControlMode:0000000000000000 $t
     /tmp/ccX12T6L.s:1361   .text.MCI_GetControlMode:0000000000000000 MCI_GetControlMode
     /tmp/ccX12T6L.s:1379   .text.MCI_GetImposedMotorDirection:0000000000000000 $t
     /tmp/ccX12T6L.s:1386   .text.MCI_GetImposedMotorDirection:0000000000000000 MCI_GetImposedMotorDirection
ARM GAS  /tmp/ccX12T6L.s 			page 101


     /tmp/ccX12T6L.s:1474   .text.MCI_GetLastRampFinalSpeed:0000000000000000 $t
     /tmp/ccX12T6L.s:1481   .text.MCI_GetLastRampFinalSpeed:0000000000000000 MCI_GetLastRampFinalSpeed
     /tmp/ccX12T6L.s:1499   .text.MCI_GetLastRampFinalTorque:0000000000000000 $t
     /tmp/ccX12T6L.s:1506   .text.MCI_GetLastRampFinalTorque:0000000000000000 MCI_GetLastRampFinalTorque
     /tmp/ccX12T6L.s:1524   .text.MCI_GetLastRampFinalDuration:0000000000000000 $t
     /tmp/ccX12T6L.s:1531   .text.MCI_GetLastRampFinalDuration:0000000000000000 MCI_GetLastRampFinalDuration
     /tmp/ccX12T6L.s:1549   .text.MCI_GetLastRampFinalSpeed_F:0000000000000000 $t
     /tmp/ccX12T6L.s:1556   .text.MCI_GetLastRampFinalSpeed_F:0000000000000000 MCI_GetLastRampFinalSpeed_F
     /tmp/ccX12T6L.s:1590   .text.MCI_GetLastRampFinalSpeed_F:000000000000001c $d
     /tmp/ccX12T6L.s:1595   .text.MCI_RampCompleted:0000000000000000 $t
     /tmp/ccX12T6L.s:1602   .text.MCI_RampCompleted:0000000000000000 MCI_RampCompleted
     /tmp/ccX12T6L.s:1645   .text.MCI_StopSpeedRamp:0000000000000000 $t
     /tmp/ccX12T6L.s:1652   .text.MCI_StopSpeedRamp:0000000000000000 MCI_StopSpeedRamp
     /tmp/ccX12T6L.s:1677   .text.MCI_StopRamp:0000000000000000 $t
     /tmp/ccX12T6L.s:1684   .text.MCI_StopRamp:0000000000000000 MCI_StopRamp
     /tmp/ccX12T6L.s:1708   .text.MCI_GetSpdSensorReliability:0000000000000000 $t
     /tmp/ccX12T6L.s:1715   .text.MCI_GetSpdSensorReliability:0000000000000000 MCI_GetSpdSensorReliability
     /tmp/ccX12T6L.s:1746   .text.MCI_GetAvrgMecSpeedUnit:0000000000000000 $t
     /tmp/ccX12T6L.s:1753   .text.MCI_GetAvrgMecSpeedUnit:0000000000000000 MCI_GetAvrgMecSpeedUnit
     /tmp/ccX12T6L.s:1784   .text.MCI_GetAvrgMecSpeed_F:0000000000000000 $t
     /tmp/ccX12T6L.s:1791   .text.MCI_GetAvrgMecSpeed_F:0000000000000000 MCI_GetAvrgMecSpeed_F
     /tmp/ccX12T6L.s:1825   .text.MCI_GetMecSpeedRefUnit:0000000000000000 $t
     /tmp/ccX12T6L.s:1832   .text.MCI_GetMecSpeedRefUnit:0000000000000000 MCI_GetMecSpeedRefUnit
     /tmp/ccX12T6L.s:1857   .text.MCI_GetMecSpeedRef_F:0000000000000000 $t
     /tmp/ccX12T6L.s:1864   .text.MCI_GetMecSpeedRef_F:0000000000000000 MCI_GetMecSpeedRef_F
     /tmp/ccX12T6L.s:1894   .text.MCI_GetIab:0000000000000000 $t
     /tmp/ccX12T6L.s:1901   .text.MCI_GetIab:0000000000000000 MCI_GetIab
     /tmp/ccX12T6L.s:1935   .text.MCI_GetIab_F:0000000000000000 $t
     /tmp/ccX12T6L.s:1942   .text.MCI_GetIab_F:0000000000000000 MCI_GetIab_F
     /tmp/ccX12T6L.s:2014   .text.MCI_GetIab_F:0000000000000068 $d
     /tmp/ccX12T6L.s:2020   .text.MCI_GetIalphabeta:0000000000000000 $t
     /tmp/ccX12T6L.s:2027   .text.MCI_GetIalphabeta:0000000000000000 MCI_GetIalphabeta
     /tmp/ccX12T6L.s:2060   .text.MCI_GetIqd:0000000000000000 $t
     /tmp/ccX12T6L.s:2067   .text.MCI_GetIqd:0000000000000000 MCI_GetIqd
     /tmp/ccX12T6L.s:2100   .text.MCI_GetIqd_F:0000000000000000 $t
     /tmp/ccX12T6L.s:2107   .text.MCI_GetIqd_F:0000000000000000 MCI_GetIqd_F
     /tmp/ccX12T6L.s:2179   .text.MCI_GetIqd_F:0000000000000068 $d
     /tmp/ccX12T6L.s:2185   .text.MCI_GetIqdHF:0000000000000000 $t
     /tmp/ccX12T6L.s:2192   .text.MCI_GetIqdHF:0000000000000000 MCI_GetIqdHF
     /tmp/ccX12T6L.s:2225   .text.MCI_GetIqdref:0000000000000000 $t
     /tmp/ccX12T6L.s:2232   .text.MCI_GetIqdref:0000000000000000 MCI_GetIqdref
     /tmp/ccX12T6L.s:2265   .text.MCI_GetIqdref_F:0000000000000000 $t
     /tmp/ccX12T6L.s:2272   .text.MCI_GetIqdref_F:0000000000000000 MCI_GetIqdref_F
     /tmp/ccX12T6L.s:2344   .text.MCI_GetIqdref_F:0000000000000068 $d
     /tmp/ccX12T6L.s:2350   .text.MCI_GetVqd:0000000000000000 $t
     /tmp/ccX12T6L.s:2357   .text.MCI_GetVqd:0000000000000000 MCI_GetVqd
     /tmp/ccX12T6L.s:2390   .text.MCI_GetValphabeta:0000000000000000 $t
     /tmp/ccX12T6L.s:2397   .text.MCI_GetValphabeta:0000000000000000 MCI_GetValphabeta
     /tmp/ccX12T6L.s:2430   .text.MCI_GetElAngledpp:0000000000000000 $t
     /tmp/ccX12T6L.s:2437   .text.MCI_GetElAngledpp:0000000000000000 MCI_GetElAngledpp
     /tmp/ccX12T6L.s:2457   .text.MCI_GetTeref:0000000000000000 $t
     /tmp/ccX12T6L.s:2464   .text.MCI_GetTeref:0000000000000000 MCI_GetTeref
     /tmp/ccX12T6L.s:2485   .text.MCI_GetTeref_F:0000000000000000 $t
     /tmp/ccX12T6L.s:2492   .text.MCI_GetTeref_F:0000000000000000 MCI_GetTeref_F
     /tmp/ccX12T6L.s:2526   .text.MCI_GetTeref_F:0000000000000020 $d
     /tmp/ccX12T6L.s:2532   .text.MCI_GetPhaseCurrentAmplitude:0000000000000000 $t
     /tmp/ccX12T6L.s:2539   .text.MCI_GetPhaseCurrentAmplitude:0000000000000000 MCI_GetPhaseCurrentAmplitude
ARM GAS  /tmp/ccX12T6L.s 			page 102


     /tmp/ccX12T6L.s:2667   .text.MCI_GetPhaseCurrentAmplitude:0000000000000030 $d
     /tmp/ccX12T6L.s:2673   .text.MCI_GetPhaseVoltageAmplitude:0000000000000000 $t
     /tmp/ccX12T6L.s:2680   .text.MCI_GetPhaseVoltageAmplitude:0000000000000000 MCI_GetPhaseVoltageAmplitude
     /tmp/ccX12T6L.s:2741   .text.MCI_Clear_Iqdref:0000000000000000 $t
     /tmp/ccX12T6L.s:2748   .text.MCI_Clear_Iqdref:0000000000000000 MCI_Clear_Iqdref

UNDEFINED SYMBOLS
__aeabi_f2d
__aeabi_dmul
__aeabi_d2iz
STC_SetControlMode
PWMC_GetOffsetCalib
STC_ExecRamp
PWMC_SetOffsetCalib
STC_RampCompleted
STC_StopSpeedRamp
STC_StopRamp
STC_GetSpeedSensor
SPD_Check
SPD_GetAvrgMecSpeedUnit
STC_GetMecSpeedRefUnit
__aeabi_d2f
__aeabi_i2d
MCM_Sqrt
STC_GetDefaultIqdref
